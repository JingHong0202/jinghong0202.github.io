<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ES6</title>
      <link href="/posts/33ad.html"/>
      <url>/posts/33ad.html</url>
      
        <content type="html"><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a><strong>ES6</strong></h1><h2 id="变量声明扩展"><a href="#变量声明扩展" class="headerlink" title="变量声明扩展"></a>变量声明扩展</h2><h3 id="变量声明的特性比较"><a href="#变量声明的特性比较" class="headerlink" title="变量声明的特性比较"></a>变量声明的特性比较</h3><hr><table><thead><tr><th align="center">语法格式</th><th align="center">声明类型</th><th align="center">是否可重复声明</th><th align="center">是否声明提升</th><th align="center">特性</th></tr></thead><tbody><tr><td align="center">var</td><td align="center">变量</td><td align="center">YES</td><td align="center">YES</td><td align="center">无块级作用域、限制性太弱</td></tr><tr><td align="center">let</td><td align="center">变量</td><td align="center">NO</td><td align="center">NO</td><td align="center">有块级作用域、不可重复、无声明提升、限制性强</td></tr><tr><td align="center">const</td><td align="center">常量</td><td align="center">NO</td><td align="center">NO</td><td align="center">不可修改、有块级作用域、限制性强</td></tr></tbody></table><hr><h3 id="块级作用域："><a href="#块级作用域：" class="headerlink" title="块级作用域："></a>块级作用域：</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> a3 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在括号内使用即可正常使用、由内向外、不可从外向内</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//20</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//20</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//或</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在以上带{}语法中用let、const声明时都具有块级作用域</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ERROR</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ERROR</span></code></pre><h3 id="暂时性死区："><a href="#暂时性死区：" class="headerlink" title="暂时性死区："></a>暂时性死区：</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//由于let和const 无变量提升，在声明前调用将会出错 var 会出现undefined，不会报错</span><span class="token comment" spellcheck="true">//未被let、const声明的变量、执行操作反而没事，而使用了这两者未在规定的范围内使用将会直接出错。</span><span class="token keyword">var</span> STR <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>STR<span class="token punctuation">)</span>            <span class="token keyword">let</span> STR<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//去掉这句，即可正常执行</span>        <span class="token punctuation">}</span></code></pre><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>语法格式：</p><ol><li>左右两边类型相同、一样。</li><li>右边必须是个可使用的东西或者是容器，不一定要相同的格数</li><li>若相同可简写，注意区分</li><li>右边可设置默认值</li><li>可嵌套 如：数组、对象</li></ol><hr><p>用法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//解构不一定要相同</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"string"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//若相同可简写，注意区分</span><span class="token punctuation">{</span>m<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>m<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于</span><span class="token punctuation">{</span>m<span class="token punctuation">:</span>m<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>m<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可默认值</span><span class="token punctuation">{</span>j<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">}</span><span class="token operator">=</span><span class="token punctuation">{</span>c<span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出 {j:200,b:299,c:300};</span><span class="token comment" spellcheck="true">//在一些传参发面时可以使用以下这种方法</span><span class="token punctuation">{</span>type<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">,</span>dataType<span class="token operator">=</span><span class="token string">'json'</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//没传参 默认使用对应的参数</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>type<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">,</span>dataType<span class="token operator">=</span><span class="token string">'json'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没传对象时使用默认的对象</span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><hr><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ol><li>可以固定this的指向</li><li>语法格式比较与ES5时有一定的改变和缩简</li><li>在特定情况可以极大缩简</li></ol><hr><p>语法格式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> f1 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//特定情况:指当参数和执行语句只有一条时即可</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token operator">></span>a<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">let</span> f2 <span class="token operator">=</span> a<span class="token operator">=</span><span class="token operator">></span>a<span class="token punctuation">;</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><h2 id="扩展运算符-参数展开"><a href="#扩展运算符-参数展开" class="headerlink" title="扩展运算符(参数展开)"></a>扩展运算符(参数展开)</h2><ol><li>用于函数参数、数组、对象、对多个变量操作时</li><li>参数使用时必须放在最后</li><li>可以连接数组</li><li>当连接合成时，名相同的，将被最后个替换合并</li><li>作用：当不知道有多少个参数时，可以使用像数组一样，的传入参数</li></ol><p>语法格式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ...变量名</span><span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> a2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> a1A2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>a1<span class="token punctuation">,</span><span class="token operator">...</span>a2<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数组连接</span><span class="token keyword">let</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>        a2<span class="token punctuation">:</span><span class="token number">3</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span>        c<span class="token punctuation">:</span><span class="token number">3</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> os <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>a1<span class="token punctuation">,</span>        <span class="token operator">...</span>o1    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//对象合并 相同的属性将被最后的替换合并</span></code></pre><h2 id="系统自带对象方法扩展"><a href="#系统自带对象方法扩展" class="headerlink" title="系统自带对象方法扩展"></a>系统自带对象方法扩展</h2><h3 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h3><ul><li><p>map</p></li><li><p>forEach</p></li><li><p>filter</p></li><li><p>reduce</p></li></ul><h3 id="map语法格式："><a href="#map语法格式：" class="headerlink" title="map语法格式："></a><strong>map语法格式：</strong></h3><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">//参数 Array.map((item，index)=>{}) 当前值，索引</span>  <span class="token comment" spellcheck="true">//return 新数组</span>  <span class="token comment" spellcheck="true">// 作用：1对1执行代码快 简称映射</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">return</span> item <span class="token operator">>=</span> <span class="token number">5</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[false,false,false,false,true]</span></code></pre><p>  <strong>forEach语法格式：</strong></p><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">//参数 Array.forEach((item,index,array)=>{}) 当前值，索引，当前数组</span>  <span class="token comment" spellcheck="true">//retrun 无</span>  <span class="token comment" spellcheck="true">//作用：跟ES5的foreach一样都是遍历数组</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="filter语法格式："><a href="#filter语法格式：" class="headerlink" title="filter语法格式："></a><strong>filter语法格式：</strong></h3><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">//参数Array.filter((item)=>{}) 当前值 </span>  <span class="token comment" spellcheck="true">//retrun 过滤后的数组</span>  <span class="token comment" spellcheck="true">//作用：过滤</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//过滤条件</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[4,5]</span></code></pre><h3 id="roduce语法格式："><a href="#roduce语法格式：" class="headerlink" title="roduce语法格式："></a>roduce语法格式：</h3><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">//参数Array.roduce((tmp,item,index)=>{}) 临时值（中间值）,当前值 ,索引</span>  <span class="token comment" spellcheck="true">//retrun 处理后只有一个变量的数组</span>  <span class="token comment" spellcheck="true">//作用：多对1 可以用来求平均值、某项数据</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">roduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>       <span class="token keyword">return</span> index <span class="token operator">===</span> arr<span class="token punctuation">.</span>length<span class="token number">-1</span> <span class="token operator">?</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span>item<span class="token punctuation">)</span><span class="token operator">/</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">:</span> tmp<span class="token operator">+</span><span class="token operator">=</span>item<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><ul><li>字符串模板</li><li>startsWith</li><li>endsWith</li></ul><p>字符串模板使用方式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//字符串模板`${a}和${b}` 按此格式里面的变量会被识别</span></code></pre><p>startsWith和endsWith 语法格式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//参数 String.starts\ends With(str) 字符串</span><span class="token comment" spellcheck="true">// return boolean</span><span class="token comment" spellcheck="true">//作用：字符串检索 starts 开头 ends结尾 可以多个字符</span>str <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"https://"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><h2 id="新增数据类型"><a href="#新增数据类型" class="headerlink" title="新增数据类型"></a>新增数据类型</h2><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>作用：作为对象（唯一不重复）属性名、唯一的值…….等</p><p>声明语法格式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Symbol由Symbol函数生成，不需要new 参数：是一个描述 ，生成一模一样Symbol，其返回值不相等 可以转字符串、布尔，不能转数值</span><span class="token comment" spellcheck="true">//其作用可以用来生成独一无二的属性名、函数名等</span><span class="token comment" spellcheck="true">//注意：再用Symbol生成对象属性名时 属性名格式不能用 . 而是用[content]，访问Symbol的属性名必须用[];</span><span class="token keyword">let</span> attr <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"Arak"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> fun <span class="token operator">=</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token string">"attr"</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">1000</span>    <span class="token punctuation">[</span><span class="token string">"fun"</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>；obj<span class="token punctuation">[</span><span class="token string">'attr'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 1000</span>obj<span class="token punctuation">.</span>attr<span class="token comment" spellcheck="true">//undefined</span><span class="token comment" spellcheck="true">//获取方式还可以用以下方法</span><span class="token comment" spellcheck="true">//获取对象属性的两种方法</span><span class="token comment" spellcheck="true">//Object.getOwnPropertySymbols()方法</span><span class="token comment" spellcheck="true">//返回只包含Symbol类型的属性名的数组</span><span class="token comment" spellcheck="true">//Object.getOwnPropertyNames()方法</span><span class="token comment" spellcheck="true">//返回只包含字符串类型的属性名的数组</span><span class="token comment" spellcheck="true">//Symbol.for()和Symbol.keyFor()方法</span><span class="token comment" spellcheck="true">//Symbol.for()类似于单例模式，首先在全局中搜索有没有以该参数为名称的Symbol值，如果有则返回该Symbol值，否则新建并返回一个以该参数为名称的Symbol值</span><span class="token keyword">var</span> symbol1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> symbol2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbol1 <span class="token operator">===</span> symbol2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出：true</span><span class="token comment" spellcheck="true">//Symbol.keyFor()返回一个已创建的Symbol类型值的key，实质是检测该Symbol是否已创建。</span><span class="token keyword">var</span> symbol1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>symbol1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出："Alice"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>symbol2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：undefined</span></code></pre><h2 id="兼容性解决"><a href="#兼容性解决" class="headerlink" title="兼容性解决"></a>兼容性解决</h2><p>由于ES6在一些低版本的浏览器上无法运行，需转成ES5之前的版本兼容，以下有几种方案可以自动转换</p><h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><p>使用方法：</p><p>1.导入方式</p><pre><code>需下载babel的browser.min.js包  在官网下载即可导入页面，然后在需转换的script标签上 加 type=&quot;text/babel&quot; 即可自动转换</code></pre><p>2.编译方式（推荐）</p><pre><code>安装node.js  进入cmd到要编译的目录 cd符号进入  输入 npm init-y 调出node配置文件          输入 npm i @babel/core @babel/cli @babel/preset-env 安装babel  package.json =&gt; scripts中添加脚本 &quot;test&quot;:&quot;babel js -d dest&quot;                                    名 要编译的文件目录  存放文件的目录  添加.babelrc文件——声明preset 格式为：{   &quot;preset&quot;:[&quot;@babel/preset-env&quot;]  }  执行命令：nmp run test（package中scripts名设置的什么就是什么）</code></pre><h2 id="ES6对象"><a href="#ES6对象" class="headerlink" title="ES6对象"></a>ES6对象</h2><p>面向对象<br>机器语言 -&gt; 汇编 -&gt; 低级语言(面向过程) -&gt; 高级语言(面向对象) -&gt; 模块 -&gt; 框架 -&gt; API</p><p>面向对象：<br>1.封装性<br>2.继承性<br>3.多态性</p><hr><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>ES6类的添加可以覆盖之前构造函数传统的方式，更便捷，更系统</p><p>注意的是：以前<strong>proto</strong>只能访问不能修改，ES6后可修改指向也可访问</p><p>关于类的关键字和方法</p><ul><li>class 类</li><li>constructor  构造函数</li><li>extends  继承</li><li>super（）  替代之前借用构造函数来初始化继承的函数</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>   <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>age<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="闭包理解"><a href="#闭包理解" class="headerlink" title="闭包理解"></a>闭包理解</h2><p>首先，我们所声明的变量，都是在运行完程序后自动执行垃圾回收，如果某个变量正在使用未释放，那么这个变量的生命周期将会延长，也就达成了闭包的条件，这里的例子用了（垃圾回收）来更好的理解闭包。</p><h3 id="GC-垃圾回收"><a href="#GC-垃圾回收" class="headerlink" title="GC: 垃圾回收"></a>GC: 垃圾回收</h3><h6 id="闭包："><a href="#闭包：" class="headerlink" title="闭包："></a>闭包：</h6><ul><li>1.底层：栈</li><li>2.高层：<strong>函数当作对象处理</strong></li></ul><p>闭包—— 只要还在用就不会被回收</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>局部变量i在执行完成后就删除了，但是function函数里在使用i，所以i不会被回收，循环多少次产生多少i</p><h2 id="异步与同步"><a href="#异步与同步" class="headerlink" title="异步与同步"></a>异步与同步</h2><p>异步——多个操作可以一起进行，互不干扰<br>同步——操作一个个进行</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise 是异步编程的一种解决方案，其实是一个构造函数，自己身上有all、reject、resolve这几个方法，原型上有then、catch等方法。</p><p>Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p><p><a href="参考链接">https://blog.csdn.net/qq_34645412/article/details/81170576</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">rePromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reslove<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//resolve是对promise成功时候的回调 reject则是失败</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回Promise对象</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**reject的用法以上是对promise的resolve用法进行了解释，相当于resolve是对promise成功时候的回调，它把promise的状态修改为fullfiled，那么，reject就是失败的时候的回调，他把promise的状态修改为rejected，这样我们在then中就能捕捉到，然后执行“失败”情况的回调。rePromise()**/</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//then同样有对成功失败时的反应</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>reject<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>   <span class="token comment" spellcheck="true">//异步方法 </span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//all接受一组数组，里面一般装异步函数代码快，</span><span class="token comment" spellcheck="true">//随机数案例 满足条件则继续向下执行，失败则停止或执行失败专有的线路</span><span class="token comment" spellcheck="true">//只有all里面的所有方法执行成功后，才会继续执行then参数中的resolve，一当里面一个方法错误，那将会执行参数中的reject</span><span class="token keyword">function</span> <span class="token function">promiseClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">var</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成1-10的随机数</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'随机数生成的值：'</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'数字太于10了即将执行失败回调'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span>           <span class="token keyword">return</span> p       <span class="token punctuation">}</span>    <span class="token function">promiseClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolved成功回调'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功回调接受的值：'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token keyword">function</span><span class="token punctuation">(</span>reason<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rejected失败回调'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败执行回调抛出失败原因：'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>随机数案例结果图：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/20180725094633828.png" alt=""></p><h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><p>async 异步</p><p>await 同步</p><p>两者结合即可以同步的方式执行异步操作</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//这种情况一般用在需要上一步返回的数据来继续执行下面的操作</span><span class="token comment" spellcheck="true">//语法格式：</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token comment" spellcheck="true">//await只能在有async装饰下才能使用</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token string">"loding"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*自动将常规函数转换成Promise，返回值也是一个Promise对象只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数异步函数内部可以使用await*/</span></code></pre><h2 id="第6章-ES6语法及JS语言的其他特性"><a href="#第6章-ES6语法及JS语言的其他特性" class="headerlink" title="第6章 ES6语法及JS语言的其他特性"></a>第6章 ES6语法及JS语言的其他特性</h2><h3 id="6-0-ECMAScript的变迁"><a href="#6-0-ECMAScript的变迁" class="headerlink" title="6.0 ECMAScript的变迁"></a>6.0 ECMAScript的变迁</h3><p>ECMAScript 1.0（1997年）</p><p>ECMAScript 2.0（1998年）</p><p>ECMAScript 3.0（1999年12月）</p><p>ECMAScript 4.0 (太激进,夭折了)</p><p>ECMAScript 5.0 (2009) </p><p>ECMAScript 6.0 (2015) </p><p>3.0版是一个巨大的成功，在业界得到广泛支持，成为通行标准，奠定了JavaScript语言的基本语法，以后的版本完全继承。<br>直到今天，初学者一开始学习JavaScript，其实就是在学3.0版的语法。<br>5.0版和3.0版区别不大。</p><p>随着JS的崛起,应用于移动开发,后端开发,游戏开发等,业界对JS的语言的要求越来越高.<br>此时再看4.0时提出的设想,已经不显得激进了.于是,6.0版本终于通过了.</p><p>此标准严格的叫法应是<code>ECMAScript2015</code>,当然叫<code>ES6</code>也没啥,没人和你抬杠.</p><p>ESMAScript 与 JavaScript 两者的关系, 就如同 <em>快捷宾馆营业标准</em> 和 <em>如家酒店</em> 一样.</p><p><strong>浏览器支持情况</strong></p><p><a href="http://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener">http://kangax.github.io/compat-table/es6/</a></p><h3 id="6-1-变量的声明"><a href="#6-1-变量的声明" class="headerlink" title="6.1 变量的声明"></a>6.1 变量的声明</h3><h4 id="6-1-1-let-块级证明"><a href="#6-1-1-let-块级证明" class="headerlink" title="6.1.1 let 块级证明"></a>6.1.1 let 块级证明</h4><p>ES6 新增了<code>let</code>命令，用来声明变量。</p><p>它的用法类似于<code>var</code>，但是所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p><p>看下例:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 相同的效果</span></code></pre><p>再看下例:</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//ReferenceError: c is not defined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// world</span></code></pre><p>可以看出: <code>let</code>命令在定义的<code>{}</code>内生效,某些语言也有类似特点，我们将其称为”块级作用域”.</p><p>这样,<code>let</code>定义的变量,只在块内生效,不影响其他区域,所以我们说Ta更 “清洁”.</p><p>在某些场合下,用<code>let</code>特别适合,比如<code>for()</code>循环</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 设置i仅为循环数组,但循环后,残留一个变量i.</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span> <span class="token punctuation">,</span> <span class="token string">'b'</span> <span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><p>换成<code>let</code>再试一下,是不是更清洁?</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// i变量只在for()内有效,不污染其他区域</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span> <span class="token punctuation">,</span> <span class="token string">'b'</span> <span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: i is not defined</span></code></pre><p>不污染全局的window属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>d<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span>window<span class="token punctuation">.</span>c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//hello</span></code></pre><p>注:同域下,var ,let 声明同一变量名,error</p><blockquote><p>let 申明的变量不存在变量提升 </p><p>let 申明的变量不允许重复声明</p><p>let 申明的变量存在块级作用域</p></blockquote><h4 id="6-1-2-const-常量"><a href="#6-1-2-const-常量" class="headerlink" title="6.1.2 const 常量"></a>6.1.2 const 常量</h4><p>常量并不稀奇 (话外音：都21世纪了，你咋现在才有?)<br>PHP,Java,C,C++ …多数语言都有常量.</p><p><code>const</code> 声明一个只读的常量。一旦声明，常量的值就不能改变。</p><p>常量,即不可改变其值的量.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 一旦声明值不可修改</span>PI <span class="token operator">=</span> <span class="token number">3.15</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TypeError: Assignment to constant variable.</span><span class="token comment" spellcheck="true">// 不可重复声明</span><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.15</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Identifier 'PI' has already been declare</span><span class="token comment" spellcheck="true">// 因为声明后值不能修改，所以声明必须赋值</span><span class="token keyword">const</span> c <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Missing initializer in const declaration</span></code></pre><p>注:常量名和变量名,都区分大小写</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> STU <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'lucy'</span> <span class="token punctuation">,</span> age <span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>STU<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'lucy', age: 22 }</span>STU<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'lily'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>STU<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'lily', age: 22 }</span></code></pre><p>注：常量不可改变的是其引用地址；</p><h3 id="6-2-模板字符"><a href="#6-2-模板字符" class="headerlink" title="6.2 模板字符"></a>6.2 模板字符</h3><p>ES6用反引号 <strong>( ` )</strong>  包住字符串,可以让字符串多行书写,也可以自由的嵌入变量.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'world'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'李四'</span><span class="token punctuation">}</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hello</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> , </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token number">9</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> , </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token string">'ok'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,这是个换行`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// hello李四 world , 16 , ok,</span><span class="token comment" spellcheck="true">// 这是个换行</span></code></pre><h3 id="6-3-变量的解构赋值"><a href="#6-3-变量的解构赋值" class="headerlink" title="6.3 变量的解构赋值"></a>6.3 变量的解构赋值</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p><p>字符串解构赋值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>a <span class="token comment" spellcheck="true">// "h"</span>b <span class="token comment" spellcheck="true">// "e"</span>c <span class="token comment" spellcheck="true">// "l"</span>d <span class="token comment" spellcheck="true">// "l"</span>e <span class="token comment" spellcheck="true">// "o"</span></code></pre><h4 id="6-3-1-数组的解构赋值"><a href="#6-3-1-数组的解构赋值" class="headerlink" title="6.3.1 数组的解构赋值"></a>6.3.1 数组的解构赋值</h4><p>以前，为变量赋值，只能直接指定值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ES6允许写成下面这样。</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。</p><p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>foo<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>bar<span class="token punctuation">]</span><span class="token punctuation">,</span> baz<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>foo <span class="token comment" spellcheck="true">// 1</span>bar <span class="token comment" spellcheck="true">// 2</span>baz <span class="token comment" spellcheck="true">// 3</span><span class="token keyword">let</span> <span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> third<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token string">"baz"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>third <span class="token comment" spellcheck="true">// "baz"</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token comment" spellcheck="true">// 1</span>y <span class="token comment" spellcheck="true">// 3</span><span class="token keyword">let</span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>head <span class="token comment" spellcheck="true">// 1</span>tail <span class="token comment" spellcheck="true">// [2, 3, 4]</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">...</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token comment" spellcheck="true">// "a"</span>y <span class="token comment" spellcheck="true">// undefined</span>z <span class="token comment" spellcheck="true">// []</span></code></pre><h4 id="6-3-2-对象的解构赋值"><a href="#6-3-2-对象的解构赋值" class="headerlink" title="6.3.2 对象的解构赋值"></a>6.3.2 对象的解构赋值</h4><p>解构不仅可以用于数组，还可以用于对象。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token string">"bbb"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>foo <span class="token comment" spellcheck="true">// "aaa"</span>bar <span class="token comment" spellcheck="true">// "bbb"</span></code></pre><p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">{</span> bar<span class="token punctuation">,</span> foo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token string">"bbb"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>foo <span class="token comment" spellcheck="true">// "aaa"</span>bar <span class="token comment" spellcheck="true">// "bbb"</span><span class="token keyword">let</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token string">"bbb"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>name <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于<code>undefined</code>。</p><h3 id="6-4-对象的扩展"><a href="#6-4-对象的扩展" class="headerlink" title="6.4 对象的扩展"></a>6.4 对象的扩展</h3><h4 id="6-4-1-属性的简洁表示法"><a href="#6-4-1-属性的简洁表示法" class="headerlink" title="6.4.1 属性的简洁表示法"></a>6.4.1 属性的简洁表示法</h4><p>ES6 允许直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span><span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span><span class="token punctuation">;</span>baz <span class="token comment" spellcheck="true">// {foo: "bar"}</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token punctuation">:</span> foo<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>上面代码表明，ES6 允许在对象之中，直接写变量。这时，属性名为变量名, 属性值为变量的值。</p><h4 id="6-4-2-方法的简洁表示法"><a href="#6-4-2-方法的简洁表示法" class="headerlink" title="6.4.2 方法的简洁表示法"></a>6.4.2 方法的简洁表示法</h4><p>除了属性简写，方法也可以简写。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> fun <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>    fun<span class="token punctuation">:</span>fun<span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>    fun<span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span>    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span></code></pre><p>CommonJS 模块输出一组数据及方法，就非常合适使用简洁写法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">setItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> getItem<span class="token punctuation">,</span> setItem<span class="token punctuation">,</span> clear <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    getItem<span class="token punctuation">:</span> getItem<span class="token punctuation">,</span>    setItem<span class="token punctuation">:</span> setItem<span class="token punctuation">,</span>    clear<span class="token punctuation">:</span> clear<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="6-5-Promise-异步控制对象"><a href="#6-5-Promise-异步控制对象" class="headerlink" title="6.5 Promise 异步控制对象"></a>6.5 Promise 异步控制对象</h3><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises</a></p></blockquote><h4 id="6-5-1为什么要使用-Promise"><a href="#6-5-1为什么要使用-Promise" class="headerlink" title="6.5.1为什么要使用 Promise"></a>6.5.1为什么要使用 Promise</h4><p><strong>以读取文件内容为例：</strong></p><p>无法保证顺序的代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// return console.log('读取失败')</span>    <span class="token comment" spellcheck="true">// 抛出异常</span>    <span class="token comment" spellcheck="true">//    1. 阻止程序的执行</span>    <span class="token comment" spellcheck="true">//    2. 把错误消息打印到控制台</span>    <span class="token keyword">throw</span> err  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/b.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// return console.log('读取失败')</span>    <span class="token comment" spellcheck="true">// 抛出异常</span>    <span class="token comment" spellcheck="true">//    1. 阻止程序的执行</span>    <span class="token comment" spellcheck="true">//    2. 把错误消息打印到控制台</span>    <span class="token keyword">throw</span> err  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/c.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// return console.log('读取失败')</span>    <span class="token comment" spellcheck="true">// 抛出异常</span>    <span class="token comment" spellcheck="true">//    1. 阻止程序的执行</span>    <span class="token comment" spellcheck="true">//    2. 把错误消息打印到控制台</span>    <span class="token keyword">throw</span> err  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>通过回调嵌套的方式来保证顺序：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// return console.log('读取失败')</span>    <span class="token comment" spellcheck="true">// 抛出异常</span>    <span class="token comment" spellcheck="true">//    1. 阻止程序的执行</span>    <span class="token comment" spellcheck="true">//    2. 把错误消息打印到控制台</span>    <span class="token keyword">throw</span> err  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/b.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// return console.log('读取失败')</span>      <span class="token comment" spellcheck="true">// 抛出异常</span>      <span class="token comment" spellcheck="true">//    1. 阻止程序的执行</span>      <span class="token comment" spellcheck="true">//    2. 把错误消息打印到控制台</span>      <span class="token keyword">throw</span> err    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/c.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// return console.log('读取失败')</span>        <span class="token comment" spellcheck="true">// 抛出异常</span>        <span class="token comment" spellcheck="true">//    1. 阻止程序的执行</span>        <span class="token comment" spellcheck="true">//    2. 把错误消息打印到控制台</span>        <span class="token keyword">throw</span> err      <span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>多层使用回调函数，就会进入 “<strong>回调地狱</strong>“</p><p>为了解决以上编码方式带来的问题（回调地狱嵌套），所以在 EcmaScript 6 中新增了一个 API：<code>Promise</code>。</p><h4 id="6-5-2-Promise-的使用"><a href="#6-5-2-Promise-的使用" class="headerlink" title="6.5.2 Promise 的使用"></a>6.5.2 Promise 的使用</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 在 EcmaScript 6 中新增了一个 API Promise</span><span class="token comment" spellcheck="true">// Promise 是一个构造函数</span><span class="token comment" spellcheck="true">// 创建 Promise 容器</span><span class="token comment" spellcheck="true">// 1. 给别人一个承诺 I promise you.</span><span class="token comment" spellcheck="true">//    Promise 容器一旦创建，就开始执行里面的代码</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// console.log(2)</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/aa.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 失败了，承诺容器中的任务失败了</span>      <span class="token comment" spellcheck="true">// console.log(err)</span>      <span class="token comment" spellcheck="true">// 把容器的 Pending 状态变为 Rejected</span>      <span class="token comment" spellcheck="true">// 调用 reject 就相当于调用了 then 方法的第二个参数函数</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// console.log(3)</span>      <span class="token comment" spellcheck="true">// 承诺容器中的任务成功了</span>      <span class="token comment" spellcheck="true">// console.log(data)</span>      <span class="token comment" spellcheck="true">// 把容器的 Pending 状态改为成功 Resolved</span>      <span class="token comment" spellcheck="true">// 也就是说这里调用的 resolve 方法实际上就是 then 方法传递的那个 function</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// console.log(4)</span><span class="token comment" spellcheck="true">// p1 就是那个承若</span><span class="token comment" spellcheck="true">// 当 p1 成功了 然后(then) 做指定的操作</span><span class="token comment" spellcheck="true">// then 方法接收的 function 就是容器中的 resolve 函数</span>p1  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取文件失败了'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>封装 Promise 版本的 <code>readFile</code>:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">pReadFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">pReadFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">pReadFile</span><span class="token punctuation">(</span><span class="token string">'./data/b.txt'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">pReadFile</span><span class="token punctuation">(</span><span class="token string">'./data/c.txt'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="6-6-箭头函数"><a href="#6-6-箭头函数" class="headerlink" title="6.6 箭头函数"></a>6.6 箭头函数</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions</a></p><p>ES6 允许使用“箭头”（<code>=&gt;</code>）定义函数。</p><p><strong>箭头函数表达式</strong>的语法比 <em>函数表达式</em> 更短，并且没有自己的 this，arguments。这些函数表达式更适用于那些本来需要匿名函数的地方，并且它们不能用作构造函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fun1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>str1 <span class="token operator">+</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ↓ </span><span class="token keyword">var</span> fun2 <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>str1 <span class="token operator">+</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ↓ </span><span class="token keyword">var</span> fun3 <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 9</span></code></pre><blockquote><p>如果参数只有一个，可以将()省略    // arr.map(c=&gt;c+1);<br>如果没有参数，则一定能要写上()     // ()=&gt; console.log(‘a’)<br>如果多于一个参数，每个参数之间用逗号分隔   (x, y) =&gt; { … }<br>如果方法体只有一句代码，可以省略{} 和分号，如果有返回可以省略return<br>如果方法体多于一句代码，则不能省略{} ,每句代码使用 分号分隔</p></blockquote><p><strong>注意：</strong></p><blockquote><p>a. 箭头函数没有自己的this，函数体内部写的this，指向的是外层代码块的this<br>b. 箭头函数内部的this是定义时所在的对象，而不是使用时所在的对象并且不会改变<br>c. 箭头箭头函数不能用作构造函数<br>d. 箭头函数内部不存在arguments，箭头函数体中使用的arguments其实指向的是外层函数的arguments</p></blockquote><p>箭头就是让你当做一个普通函数来使用,别整花里胡哨;</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5新特性</title>
      <link href="/posts/17f6.html"/>
      <url>/posts/17f6.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、H5拖拽"><a href="#一、H5拖拽" class="headerlink" title="一、H5拖拽"></a>一、H5拖拽</h2><p>JS里拖拽三事件， onmousedown onmousemove onmouseup 是实现交互性效果，根据鼠标的移动位置让标签元素联动</p><p>而H5拖拽也可以实现但更简单，实际例子： 百度图片识别，qq邮箱文件提交，百度网盘文件上传，并可以获取到文件的 名称，大小，修改时间</p><p>标签元素默认是不可以拖拽的，<code>draggable=&quot;true&quot;</code>才能够被拖拽</p><ul><li><code>js</code>和<code>h5</code>拖拽的对比    </li><li><code>drag</code>七事件的理解   <ul><li>只是简单的拖拽而没有数据交换是没有什么用的</li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 拖拽元素</span>        drag<span class="token punctuation">.</span>ondragstart <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 拖拽的一瞬间</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        drag<span class="token punctuation">.</span>ondrag <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 连续触发</span>            document<span class="token punctuation">.</span>title <span class="token operator">=</span> n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        drag<span class="token punctuation">.</span>ondragend <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 目标元素</span>        box<span class="token punctuation">.</span>ondragenter <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 监听拖拽元素进入到目标元素区域内</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'skyblue'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        box<span class="token punctuation">.</span>ondragover <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 在目标元素身上 连续触发</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        box<span class="token punctuation">.</span>ondragleave <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 在目标元素身上离开</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        box<span class="token punctuation">.</span>ondrop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 将拖动的元素放置在目标元素上时触发</span>        <span class="token punctuation">}</span></code></pre><ul><li><code>drag</code>兼容处理方式   </li><li>捕获<code>dataTransfer</code>对象里的数据</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> li <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>li<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    item<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'draggable'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token punctuation">.</span>ondragstart <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(e.dataTransfer.setData())</span>        e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>    e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>    e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span>    e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lastModified<span class="token punctuation">,</span>    e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lastModifiedDate<span class="token punctuation">.</span><span class="token function">toLocaleDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lastModifiedDate<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lastModifiedDate<span class="token punctuation">.</span><span class="token function">toDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p><code>Blog</code>对象与<code>URL</code>对象读取数据</p><p> Blob对象代表了一段二进制数据，提供了一系列操作接口  </p><pre><code>file对象的父类型是Blob对象</code></pre><p>​对象URL也被称为 blob URL，指的是引用保存在File或Blob中数据的URL，使用对象URL的好处是没必要把内容读取到js中，而直接使用文件内容，能生成一个链接，例如 Img的src = URL</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 拖拽图片预览</span>            <span class="token keyword">let</span> oFile <span class="token operator">=</span> e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>oFile<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第一参数一定是个数组 第二个mime类型</span>            <span class="token keyword">let</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            img<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>            img<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>            img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>            img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span></code></pre></li><li><p><code>FileReader</code>读取数据   </p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 拖拽图片预览</span>            <span class="token keyword">let</span> oFile <span class="token operator">=</span> e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建文件读取对象</span>            <span class="token keyword">let</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>oFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 分析oFile 文件对象</span>            reader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 返回data: base64数据  A-Z a-z 0~9 + / = 64位字符</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                img<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>                img<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>                img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">;</span>                img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span></code></pre></li></ul><ul><li><p>mime类型</p><pre><code>application/envoy    evyapplication/fractals    fifapplication/futuresplash    splapplication/hta    htaapplication/internet-property-stream    acxapplication/mac-binhex40    hqxapplication/msword    docapplication/msword    dotapplication/octet-stream    *application/octet-stream    binapplication/octet-stream    classapplication/octet-stream    dmsapplication/octet-stream    exeapplication/octet-stream    lhaapplication/octet-stream    lzhapplication/oda    odaapplication/olescript    axsapplication/pdf    pdfapplication/pics-rules    prfapplication/pkcs10    p10application/pkix-crl    crlapplication/postscript    aiapplication/postscript    epsapplication/postscript    psapplication/rtf    rtfapplication/set-payment-initiation    setpayapplication/set-registration-initiation    setregapplication/vnd.ms-excel    xlaapplication/vnd.ms-excel    xlcapplication/vnd.ms-excel    xlmapplication/vnd.ms-excel    xlsapplication/vnd.ms-excel    xltapplication/vnd.ms-excel    xlwapplication/vnd.ms-outlook    msgapplication/vnd.ms-pkicertstore    sstapplication/vnd.ms-pkiseccat    catapplication/vnd.ms-pkistl    stlapplication/vnd.ms-powerpoint    potapplication/vnd.ms-powerpoint    ppsapplication/vnd.ms-powerpoint    pptapplication/vnd.ms-project    mppapplication/vnd.ms-works    wcmapplication/vnd.ms-works    wdbapplication/vnd.ms-works    wksapplication/vnd.ms-works    wpsapplication/winhlp    hlpapplication/x-bcpio    bcpioapplication/x-cdf    cdfapplication/x-compress    zapplication/x-compressed    tgzapplication/x-cpio    cpioapplication/x-csh    cshapplication/x-director    dcrapplication/x-director    dirapplication/x-director    dxrapplication/x-dvi    dviapplication/x-gtar    gtarapplication/x-gzip    gzapplication/x-hdf    hdfapplication/x-internet-signup    insapplication/x-internet-signup    ispapplication/x-iphone    iiiapplication/x-javascript    jsapplication/x-latex    latexapplication/x-msaccess    mdbapplication/x-mscardfile    crdapplication/x-msclip    clpapplication/x-msdownload    dllapplication/x-msmediaview    m13application/x-msmediaview    m14application/x-msmediaview    mvbapplication/x-msmetafile    wmfapplication/x-msmoney    mnyapplication/x-mspublisher    pubapplication/x-msschedule    scdapplication/x-msterminal    trmapplication/x-mswrite    wriapplication/x-netcdf    cdfapplication/x-netcdf    ncapplication/x-perfmon    pmaapplication/x-perfmon    pmcapplication/x-perfmon    pmlapplication/x-perfmon    pmrapplication/x-perfmon    pmwapplication/x-pkcs12    p12application/x-pkcs12    pfxapplication/x-pkcs7-certificates    p7bapplication/x-pkcs7-certificates    spcapplication/x-pkcs7-certreqresp    p7rapplication/x-pkcs7-mime    p7capplication/x-pkcs7-mime    p7mapplication/x-pkcs7-signature    p7sapplication/x-sh    shapplication/x-shar    sharapplication/x-shockwave-flash    swfapplication/x-stuffit    sitapplication/x-sv4cpio    sv4cpioapplication/x-sv4crc    sv4crcapplication/x-tar    tarapplication/x-tcl    tclapplication/x-tex    texapplication/x-texinfo    texiapplication/x-texinfo    texinfoapplication/x-troff    roffapplication/x-troff    tapplication/x-troff    trapplication/x-troff-man    manapplication/x-troff-me    meapplication/x-troff-ms    msapplication/x-ustar    ustarapplication/x-wais-source    srcapplication/x-x509-ca-cert    cerapplication/x-x509-ca-cert    crtapplication/x-x509-ca-cert    derapplication/ynd.ms-pkipko    pkoapplication/zip    zipaudio/basic    auaudio/basic    sndaudio/mid    midaudio/mid    rmiaudio/mpeg    mp3audio/x-aiff    aifaudio/x-aiff    aifcaudio/x-aiff    aiffaudio/x-mpegurl    m3uaudio/x-pn-realaudio    raaudio/x-pn-realaudio    ramaudio/x-wav    wavimage/bmp    bmpimage/cis-cod    codimage/gif    gifimage/ief    iefimage/jpeg    jpeimage/jpeg    jpegimage/jpeg    jpgimage/pipeg    jfifimage/svg+xml    svgimage/tiff    tifimage/tiff    tiffimage/x-cmu-raster    rasimage/x-cmx    cmximage/x-icon    icoimage/x-portable-anymap    pnmimage/x-portable-bitmap    pbmimage/x-portable-graymap    pgmimage/x-portable-pixmap    ppmimage/x-rgb    rgbimage/x-xbitmap    xbmimage/x-xpixmap    xpmimage/x-xwindowdump    xwdmessage/rfc822    mhtmessage/rfc822    mhtmlmessage/rfc822    nwstext/css    csstext/h323    323text/html    htmtext/html    htmltext/html    stmtext/iuls    ulstext/plain    bastext/plain    ctext/plain    htext/plain    txttext/richtext    rtxtext/scriptlet    scttext/tab-separated-values    tsvtext/webviewhtml    htttext/x-component    htctext/x-setext    etxtext/x-vcard    vcfvideo/mpeg    mp2video/mpeg    mpavideo/mpeg    mpevideo/mpeg    mpegvideo/mpeg    mpgvideo/mpeg    mpv2video/quicktime    movvideo/quicktime    qtvideo/x-la-asf    lsfvideo/x-la-asf    lsxvideo/x-ms-asf    asfvideo/x-ms-asf    asrvideo/x-ms-asf    asxvideo/x-msvideo    avivideo/x-sgi-movie    moviex-world/x-vrml    flrx-world/x-vrml    vrmlx-world/x-vrml    wrlx-world/x-vrml    wrzx-world/x-vrml    xafx-world/x-vrml    xof</code></pre></li></ul><h2 id="二、新增方法及历史管理"><a href="#二、新增方法及历史管理" class="headerlink" title="二、新增方法及历史管理"></a>二、新增方法及历史管理</h2><ul><li>通过<code>classList</code>对象对<code>class</code>类名增删改查   </li><li>通过<code>dataset</code>对象对<code>data-Attr</code>格式的数据增删改查  </li><li><code>parse</code>与<code>stringify</code>函数对数据类型解析和编码类型</li><li><code>decodeURL</code>与<code>encodeURL</code>函数对url数据进行解码和编码</li><li><code>atob</code>与<code>btoa</code>函数对<code>base64</code>数据进行解码和编码</li><li><code>history</code>操作数据布局   </li><li><code>history</code>实现历史管理功能  </li><li><code>history</code>对象下的<code>back</code>-<code>forward</code>-<code>go</code>   </li></ul><h2 id="三、Ajax数据交互及文件上传功能"><a href="#三、Ajax数据交互及文件上传功能" class="headerlink" title="三、Ajax数据交互及文件上传功能"></a>三、Ajax数据交互及文件上传功能</h2><ul><li><p>文件下载方式</p></li><li><p><code>ajax</code>和<code>php</code>数据交互  </p></li><li><p>真实服务器数据交互演示及跨域访问  </p></li><li><p><code>jsonp</code>跨域访问的核心本质   </p></li><li><p><code>ajax</code> 和 <code>原生node</code> 数据交互</p></li><li><p><code>ajax</code> 和 <code>express框架</code> 数据交互</p></li><li><p><code>ajax</code> 和 <code>koa2框架</code> 数据交互</p></li><li><p>通过表单控件及<code>FormData</code>对象上传文件到服务器 </p></li><li><p>通过H5拖拽及<code>FormData</code>对象上传文件到服务器 </p></li><li><p>通过<code>onprogress</code>事件及<code>loaded</code>与<code>total</code>属性真实显示上传进度</p></li><li><p>同源同域名下跨文档操作</p></li></ul><h2 id="四、H5本地存储localStorage-webWorker多线程-Server-Sent-Event服务器发送事件-离线存储cache应用"><a href="#四、H5本地存储localStorage-webWorker多线程-Server-Sent-Event服务器发送事件-离线存储cache应用" class="headerlink" title="四、H5本地存储localStorage-webWorker多线程-Server-Sent-Event服务器发送事件-离线存储cache应用"></a>四、H5本地存储localStorage-webWorker多线程-Server-Sent-Event服务器发送事件-离线存储cache应用</h2><ul><li><code>setItem</code>与<code>getItem</code>存储和获取数据</li><li><code>webWorker</code>多线程原理    </li><li>SSE 服务器消息推送</li><li>真实服务器演示 <code>cache离线存储设计</code></li></ul><pre><code>var source=new EventSource(&quot;demo_sse.php&quot;);source.onmessage=function(event)  {  document.getElementById(&quot;result&quot;).innerHTML+=event.data + &quot;&lt;br /&gt;&quot;;  };  &lt;?phpheader(&#39;Content-Type: text/event-stream&#39;);header(&#39;Cache-Control: no-cache&#39;);$time = date(&#39;r&#39;);echo &quot;data: The server time is: {$time}\n\n&quot;;flush();    //刷新缓冲区的内容,输出?&gt;</code></pre><h2 id="五、canvas-技术"><a href="#五、canvas-技术" class="headerlink" title="五、canvas 技术"></a>五、canvas 技术</h2><ul><li>canvas认识</li><li>4种矩形用法</li><li>样式属性</li><li>线条函数</li><li>路径问题</li><li>边界和端点样式</li><li>圆形函数用法</li><li>变换函数用法</li><li>保存和释放路径</li><li>图片绘制<ul><li>视频绘制</li><li>填充背景方式</li><li>线性渐变</li><li>径向渐变</li><li>曲线函数</li><li>贝赛尔曲线画法</li><li>绘制文字</li><li>时钟表盘数字算法</li><li>图形阴影</li><li>像素操作</li><li>处理图片像素</li><li>图像合成</li><li>canvas画面导出</li></ul></li></ul><h2 id="七、video和audio"><a href="#七、video和audio" class="headerlink" title="七、video和audio"></a>七、video和audio</h2><ul><li>视频格式和音频格式</li></ul><ul><li>标签属性<ul><li>src</li><li>autoplay</li><li>controls</li><li>width</li><li>height</li><li>loop</li><li>preload</li><li>poster</li></ul></li></ul><ul><li>方法<ul><li>play( )</li><li>pause( )</li></ul><ul><li>事件</li><li>onplay</li><li>onpause</li><li>ontimeupdate</li><li>onended</li><li>progress</li><li></li><li>属性</li><li>currentTime</li><li>duration</li><li>ended</li><li>volume</li><li>height</li><li>width</li><li>currentSrc</li><li>videoWidth</li><li>videoHeight</li></ul></li></ul><h2 id="八、地理位置信息与高德地图API"><a href="#八、地理位置信息与高德地图API" class="headerlink" title="八、地理位置信息与高德地图API"></a>八、地理位置信息与高德地图API</h2><ul><li>原生API经纬度获取</li><li>高德地图JS-API调用</li></ul><h2 id="九、移动端"><a href="#九、移动端" class="headerlink" title="九、移动端"></a>九、移动端</h2><ul><li>移动端事件<ul><li>搭建真机测试</li><li>触屏三事件<ul><li>touchstart</li><li>touchmove</li><li>touchend</li></ul></li><li>手指信息对象</li></ul></li><li>三种适配方案<ul><li>百分比</li><li>自适应</li><li>rem</li><li>less语法及编译</li></ul></li></ul><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> HTML5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> H5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas</title>
      <link href="/posts/7c26.html"/>
      <url>/posts/7c26.html</url>
      
        <content type="html"><![CDATA[<h1 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h1><blockquote><p>canvas 是HTML5新出的标签，可以用来做小游戏，特效，作图等，自己并没有作画能力，只能通过Javascript脚本来操控</p></blockquote><h2 id="Canvas标准"><a href="#Canvas标准" class="headerlink" title="Canvas标准"></a>Canvas标准</h2><p><a href="http://www.w3c.org/TR/2dcontext/" target="_blank" rel="noopener">http://www.w3c.org/TR/2dcontext/</a><br><a href="https://html.spec.whatwg.org/" target="_blank" rel="noopener">https://html.spec.whatwg.org/</a></p><h2 id="创建Canvas"><a href="#创建Canvas" class="headerlink" title="创建Canvas"></a>创建Canvas</h2><p>创建canvas几个主要的问题：</p><p>1.不能通过CSS设置画布的大小，否则会造成画布拉伸变形等问题，只能设置本身自带width、height属性,也可以在js里设置</p><p>2.兼容性：对一些不支持的浏览器，可以在标签内输入提示，不支持的浏览器会显示此提示、支持的浏览器会自动忽略掉</p><p>3.创建并设置好宽高后，通过js获取，还要设置其getContext，成功返回一个对象后即可作画，这里用js也可判断其是否支持canvas</p><p>语法格式：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1024<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>570<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>由于您的浏览器版本过低，此图片不能加载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".canvas"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d|3d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><a href="http://www.w3school.com.cn/tags/html_ref_canvas.asp" target="_blank" rel="noopener">手册参考网址</a></p><h2 id="线"><a href="#线" class="headerlink" title="线"></a>线</h2><p>画布的x、y起点默认在右上角的位置（0，0）， 分别对应的最大值是画布的宽和高</p><p>绘制线条的函数：</p><p>moveTo(x,y) ： 开始位置</p><p>lineTo(x,y)：结束位置</p><p>stroke ：准备好后，开始画线条</p><p>设置线条样式的函数：</p><p>lineWidth：设置线条粗细</p><p>strokeStyle：设置线条的颜色</p><p>lineCap：设置线条首尾处的形状  俗称帽子</p><p>lineJoin：设置连接处的样式</p><p>miterLimit：内角与外角的距离。默认值是10，此属性只有在lineJoin = “miter”并且有设置线条粗细情况下才有效，且斜接长度大于miterLimit ，线条连接处自动斜切（lineJoin =”bevel”)</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/miterlimit.gif" alt=""></p><p>另起一条路径的函数： </p><p>beginPath：起始一条路径，或重置当前路径</p><p>closePath：创建从当前点回到起始点的路径</p><p>语法格式：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1024<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>760<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>由于您的浏览器版本过低，此图片不能加载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token keyword">var</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".canvas"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d|3d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">700</span><span class="token punctuation">,</span><span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>lineCap <span class="token operator">=</span> <span class="token string">"round"</span> <span class="token comment" spellcheck="true">//butt(default) round圆头 square方头</span>    <span class="token comment" spellcheck="true">//lineCap 有时可以填补连接处的空缺</span>    ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"yellow"</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>===============================================================ctx.lineWidth = 15;DrawStart(ctx, 100, 20, 400, 400, -30);      ctx.lineJoin = "miter"; //可以设置的样式有：miter(default)、 bevel斜接、 round圆角      ctx.miterLimit = 7; //如果斜接长度超过 miterLimit 的值，边角会以 lineJoin 的 "bevel" 类型来显示。,这里等于7时,边角会以lineJoin的bevel显示，等于8时则会以miter显示    //斜接长度指的是在两条线交汇处内角和外角之间的距离。      ctx.stroke();      function DrawStart(context, R, r, x, y, rotate) {        //绘画对象 大圆的半径 小圆半径  x轴 y轴        ctx.beginPath();        for (var i = 0; i &lt; 5; i++) {          ctx.lineTo(            Math.cos(((18 + 72 * i - rotate) / 180) * Math.PI) * R + x,            -Math.sin(((18 + 72 * i - rotate) / 180) * Math.PI) * R + y          );          ctx.lineTo(            Math.cos(((54 + 72 * i - rotate) / 180) * Math.PI) * r + x,            -Math.sin(((54 + 72 * i - rotate) / 180) * Math.PI) * r + y          );        }        ctx.closePath();      }</code></pre><h2 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h2><p>填充函数：</p><p>fill ：填充当前路径 （注意：如果路径未关闭，那么 fill() 方法会从路径结束点到开始点之间添加一条线，以关闭该路径，然后填充该路径）</p><p>填充样式：</p><p>fillStyle：填充颜色</p><p>语法格式：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1024<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>760<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>由于您的浏览器版本过低，此图片不能加载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token keyword">var</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".canvas"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d|3d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">700</span><span class="token punctuation">,</span><span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"yellow"</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="案例：四个正方形组成的大方形"><a href="#案例：四个正方形组成的大方形" class="headerlink" title="案例：四个正方形组成的大方形"></a>案例：四个正方形组成的大方形</h2><pre class=" language-html"><code class="language-html">   var ctx = document.querySelector(".canvas").getContext("2d");let box = [        {p:[{x:0,y:0},{x:512,y:0},{x:512,y:380},{x:0,y:380},{x:0,y:0}],color:"red"},        {p:[{x:512,y:0},{x:1024,y:0},{x:1024,y:380},{x:512,y:380},{x:512,y:0}],color:"green"},        {p:[{x:0,y:380},{x:512,y:380},{x:512,y:760},{x:0,y:760},{x:0,y:380}],color:"blue"},        {p:[{x:512,y:380},{x:1024,y:380},{x:1024,y:760},{x:512,y:760},{x:512,y:380}],color:"yellow"},      ]      for(let i=0;i&lt;box.length;i++)      {        draw(box[i],ctx);      }      function draw(p,c)      {        c.beginPath();          c.moveTo(p.p[0].x,p.p[0].y);          for(let i=1;i&lt;p.p.length;i++)          {            c.lineTo(p.p[i].x,p.p[i].y);          }          c.lineWidth = 5;          c.strokeStyle = p.color;          c.fillStyle = p.color;        c.stroke();        c.fill();        c.closePath();      }</code></pre><p>注意点：</p><ol><li>closePath可以解决闭合图形的空隙问题，也有自动闭合的作用。</li><li>当边框或者填充被遮挡掉的时候，这时可以先填充在画边框，或者先画边框再画线</li><li>后绘制的图形会顶替掉前面的图形</li></ol><h2 id="圆"><a href="#圆" class="headerlink" title="圆"></a>圆</h2><p>画圆的函数：</p><p>arc(x,y,r,start,end,true|false)：画圆\弧</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5b21faf60001e79412800720.jpg" alt=""></p><p>arcTo(x1,y1,x2,y2,r)：绘制圆弧</p><p>语法格式：</p><pre class=" language-html"><code class="language-html"> var ctx = document.querySelector(".canvas").getContext("2d");      var i = 0;      setInterval(() => {        i++;        ctx.fillStyle = "yellow";        ctx.strokeStyle = "red";        ctx.beginPath();                               ctx.arc(512, 380, 100, 0, Math.PI * 2 - (Math.PI * 2 * i / 30), true);            //  x    y  半径 开始位置  结束位置                      是否逆时针旋转        ctx.lineWidth = 10;        ctx.stroke();        ctx.fill();      }, 1);//顺时针：Math.PI * 2 * i / 30//逆时针：Math.PI * 2 - (Math.PI * 2 * i / 30)//使用arcTo绘圆角矩形var ctx = document.querySelector("canvas").getContext("2d");      // ctx.translate(200,200)      // ctx.beginPath();      // ctx.moveTo(100,0);      // ctx.arcTo(400,0,400,800,100);      // ctx.lineTo(400,400);      // ctx.arcTo(400,500,350,500,100);      // ctx.lineTo(100,500);      // ctx.arcTo(0,500,0,450,100);      // ctx.lineTo(0,100);      // ctx.arcTo(0,0,100,0,100)      // ctx.closePath();      function RoundRect(ctx, width, height, r)       {        ctx.beginPath();        ctx.moveTo(r, 0);        ctx.arcTo(width, 0, width, height - r, r);        ctx.lineTo(width, height);        ctx.arcTo(width, height + r, width - 50, height + r, r);        ctx.lineTo(r, height + r);        ctx.arcTo(0, height + r, 0, height - 50, r);        ctx.lineTo(0, r);        ctx.arcTo(0, 0, r, 0, r);        ctx.closePath();      }      RoundRect(ctx, 200, 100, 10);      ctx.stroke();</code></pre><h2 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h2><p>矩形函数：</p><p>reac：绘制矩形附带填充和边框</p><p>fillRect：绘制只填充的矩形</p><p>strokeRect：绘制只带边框的矩形</p><p>语法格式：</p><pre class=" language-html"><code class="language-html">//  参数：  x ， y ， width ， height  var ctx = document.querySelector(".canvas").getContext("2d");      ctx.fillStyle = "red";      ctx.strokeStyle = "yellow";      ctx.lineWidth = 5;      var x = 0;      ctx.beginPath();      ctx.rect(100, 100, 300, 300);      ctx.stroke();      ctx.fill();      ctx.beginPath();      ctx.fillStyle = "rgba(0,255,155,0.5)";      ctx.strokeStyle = "yellow";      ctx.fillRect(150, 150, 300, 300);      ctx.strokeRect(100, 100, 400, 400);</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="案例：绘制五角星"><a href="#案例：绘制五角星" class="headerlink" title="案例：绘制五角星"></a>案例：绘制五角星</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>          Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//步骤：先求出角度在转弧度</span>                    <span class="token comment" spellcheck="true">//cos(18deg)*R   sin(18deg)*R</span>                    <span class="token comment" spellcheck="true">//角度转弧度公式：角度/180*r</span>                    <span class="token comment" spellcheck="true">//由于数学中的坐标系与canvas的坐标不同所以y轴要为负</span>          <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">200</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>          Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">54</span> <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">50</span> <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">,</span>          <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">54</span> <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">50</span> <span class="token operator">+</span> <span class="token number">200</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span>         <span class="token comment" spellcheck="true">//五角星封装函数</span>      <span class="token function">DrawStart</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span> <span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">DrawStart</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> R<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span>rotate<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//绘画对象 大圆的半径 小圆半径  x轴 y轴  旋转角度</span>        ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>            Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> i <span class="token operator">-</span>rotate<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> R <span class="token operator">+</span> x<span class="token punctuation">,</span>            <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> i <span class="token operator">-</span>rotate<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> R <span class="token operator">+</span> y          <span class="token punctuation">)</span><span class="token punctuation">;</span>          ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>            Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">54</span> <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> i <span class="token operator">-</span>rotate<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> r <span class="token operator">+</span> x<span class="token punctuation">,</span>            <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">54</span> <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> i <span class="token operator">-</span>rotate<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> r <span class="token operator">+</span> y          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>参考链接：<a href="">https://www.baidu.com/link?url=3j7UmP9XbkLh0ww6tMOChL_7CATbIoQ15GBatuaJdx2_yCn-jcdshTRF9-l6kMmbONf5cgLEviZEpV4QhjLf2q&amp;wd=&amp;eqid=e9fcd7b0000436fd000000065d2e7488</a></p><h3 id="随机不重复、不切边五角星"><a href="#随机不重复、不切边五角星" class="headerlink" title="随机不重复、不切边五角星"></a>随机不重复、不切边五角星</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas width=&quot;800&quot; height=&quot;800&quot; class=&quot;canvas&quot;&gt;&lt;/canvas&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      ctx.fillStyle = &quot;black&quot;;      ctx.fillRect(        0,        0,        document.querySelector(&quot;canvas&quot;).width,        document.querySelector(&quot;canvas&quot;).height      );      ctx.fillStyle = &quot;#fc1&quot;;      ctx.strokeStyle = &quot;#fb5&quot;;      ctx.lineWidth = 5;      ctx.lineJoin = &quot;round&quot;;      var ele = [];      start(ele);      end(ele);      function start(arr) {        for (var i = 0; i &lt; 200; i++) {          var flag = true,            ran = Math.random() * 10 + 10,            x =              Math.random() *                (document.querySelector(&quot;canvas&quot;).width - ran * 2) +              ran,            y =              Math.random() *                (document.querySelector(&quot;canvas&quot;).height - ran * 2) +              ran,            rotate = Math.random() * 360;          for (var j = 0; j &lt; ele.length; j++) {            var oldx = Math.pow(x - arr[j][1], 2);            var oldy = Math.pow(y - arr[j][2], 2);            var oldr = Math.pow(ran + arr[j][0], 2);            if (oldx + oldy &lt; oldr) {              flag = false;            }          }          flag ? arr.push([ran, x, y, rotate]) : i--;        }      }      function end(arr) {        for (var i = 0; i &lt; arr.length; i++) {          DrawStart(            ctx,            arr[i][0],            arr[i][0] / 2,            arr[i][1],            arr[i][2],            arr[i][3]          );          ctx.fill();          ctx.stroke();        }      }      function DrawStart(context, R, r, x, y, rotate) {        //绘画对象 大圆的半径 小圆半径  x轴 y轴        ctx.beginPath();        for (var i = 0; i &lt; 5; i++) {          ctx.lineTo(            Math.cos(((18 + 72 * i - rotate) / 180) * Math.PI) * R + x,            -Math.sin(((18 + 72 * i - rotate) / 180) * Math.PI) * R + y          );          ctx.lineTo(            Math.cos(((54 + 72 * i - rotate) / 180) * Math.PI) * r + x,            -Math.sin(((54 + 72 * i - rotate) / 180) * Math.PI) * r + y          );        }        ctx.closePath();      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="绘画状态保存与还原"><a href="#绘画状态保存与还原" class="headerlink" title="绘画状态保存与还原"></a>绘画状态保存与还原</h2><blockquote><p>状态的保存与还原可以使操作更加简便，快速，主要作用于将绘画的状态来回快速切换，状态保存，可以保存如：线条的样式、颜色、填充、图形变换等，特别是配合图形变换，两者可以互补长短</p></blockquote><p>状态保存和还原的对应函数：</p><p>save：保存当前的状态，以便restore还原</p><p>restore：还原到之前sava保存的状态</p><p>语法格式：</p><pre><code>//这里配合图形变换来演示//图形变换系列的函数，重复使用是叠加效果，而不是替换，所以使用图形变换+状态保存还原可以更快速简便//正常方式  var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      ctx.beginPath();      ctx.fillStyle = &quot;red&quot;;      ctx.translate(100, 100);      ctx.fillRect(0, 0, 400, 400);      ctx.translate(-100, -100);      ctx.fillStyle = &quot;red&quot;;      ctx.fillRect(400, 400, 400, 400);      ctx.closePath();      //图形变换函数连续使用会进行叠加效果，会影响到下面绘制的图形，为了不影响，必须再次使用变换函数来还原//这里运用了canvas的状态保存还原后，可以更方便使用变换函数var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      ctx.beginPath();      ctx.fillStyle = &quot;red&quot;;      ctx.save();      ctx.translate(100, 100);      ctx.fillRect(0, 0, 400, 400);      ctx.restore();      ctx.fillRect(400, 400, 400, 400);      ctx.closePath();</code></pre><h2 id="图形变换"><a href="#图形变换" class="headerlink" title="图形变换"></a>图形变换</h2><p>图形变换系列函数：</p><p>translate(x,y)：偏移、移动</p><p>rotate(?deg)：旋转</p><p>scale(sx,sy)：缩放</p><p>变换矩阵：</p><p>transform(a,b,c,d,e,f)：图形变换矩阵函数是一个把所有变换效果结于一身的函数，连续使用会造成链集和叠加效果</p><p>setTransform(a,b,c,d,e,f)：可以重置transform函数，使之前的失效</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5ca8747e0001734712800720.jpg" alt=""></p><p>语法格式：</p><pre><code>//改用图形变换函数 translate rotate scale 后的无重复五角星//scale 会有许多副作用如：边框将会变大、长宽比也好增大、x、y也会随之增大&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas width=&quot;800&quot; height=&quot;800&quot; class=&quot;canvas&quot;&gt;&lt;/canvas&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      ctx.fillStyle = &quot;black&quot;;      ctx.fillRect(        0,        0,        document.querySelector(&quot;canvas&quot;).width,        document.querySelector(&quot;canvas&quot;).height      );      ctx.fillStyle = &quot;#fc1&quot;;      ctx.strokeStyle = &quot;#fb5&quot;;      ctx.lineWidth = 5;      ctx.lineJoin = &quot;round&quot;;      var ele = [];      start(ele);      end(ele);      function start(arr) {        for (var i = 0; i &lt; 200; i++) {          var flag = true,            ran = Math.random() * 10 + 10,            x =              Math.random() *                (document.querySelector(&quot;canvas&quot;).width - ran * 2) +              ran,            y =              Math.random() *                (document.querySelector(&quot;canvas&quot;).height - ran * 2) +              ran,            rotate = Math.random() * 360;          for (var j = 0; j &lt; ele.length; j++) {            var oldx = Math.pow(x - arr[j][1], 2);            var oldy = Math.pow(y - arr[j][2], 2);            var oldr = Math.pow(ran + arr[j][0], 2);            if (oldx + oldy &lt; oldr) {              flag = false;            }          }          flag ? arr.push([ran, x, y, rotate]) : i--;        }      }      function end(arr) {        for (var i = 0; i &lt; arr.length; i++) {          ctx.save();          ctx.beginPath();          ctx.translate(arr[i][1], arr[i][2]);          ctx.rotate(arr[i][3]);          ctx.scale(0.5,0.5)          DrawStart(ctx, arr[i][0]);          ctx.fill();          ctx.stroke();          ctx.closePath();          ctx.restore();        }      }      function DrawStart(context, r) {        //绘画对象 大圆的半径 小圆半径  x轴 y轴        for (var i = 0; i &lt;= 5; i++) {          ctx.lineTo(            Math.cos(((18 + 72 * i) / 180) * Math.PI) * r,            -Math.sin(((18 + 72 * i) / 180) * Math.PI) * r          );          ctx.lineTo(            (Math.cos(((54 + 72 * i) / 180) * Math.PI) * r) / 2,            (-Math.sin(((54 + 72 * i) / 180) * Math.PI) * r) / 2          );        }      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;//transform var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      ctx.beginPath();      ctx.fillStyle = &quot;red&quot;;      ctx.save();      ctx.transform(1.5,0,0,1.5,200,100);                  a：水平缩放 b：水平倾斜 c:垂直倾斜 d:垂直缩放 e:水平位移 f：垂直位移      ctx.fillRect(0, 0, 400, 400);      ctx.restore();      ctx.fillRect(400, 400, 400, 400);      ctx.closePath();</code></pre><h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><p>渐变系列函数：</p><p>createLinearGradient（x,y,EndX,EndY）：创建渐变</p><p>addColorStop(0-1,color) ：添加颜色</p><p>createRadialGradient（x1，y1，r1，x2，y2，r2）：创建一个径向的渐变，整个径向渐变发生在俩个圆中间</p><p>语法格式：</p><pre><code>var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      document.querySelector(&quot;canvas&quot;).width = document.body.clientWidth;      document.querySelector(&quot;canvas&quot;).height = document.body.clientHeight;      //创建渐变对象      var grd = ctx.createLinearGradient(        0,   //x        0,    //y        0,    //endX        document.querySelector(&quot;canvas&quot;).height //endY        //这里的渐变方向是从上往下      );      //下面的是径向渐变，在定义的两个圆之间产生渐变      //第一个圆是外圆，内圆则是第二个      //var grd =             ctx.createRadialGradient(document.querySelector(&quot;canvas&quot;).width/2,document.querySelector(&quot;canvas&quot;).height/2,400,document.querySelector(&quot;canvas&quot;).width/2,document.querySelector(&quot;canvas&quot;).height/2,0)      //添加颜色，取值范围（0,1），必须有起点，终点      grd.addColorStop(0, &quot;black&quot;);      grd.addColorStop(1, &quot;#035&quot;);      //最后把渐变对象添加到要应用的样式填充上      ctx.fillStyle = grd;      ctx.fillRect(        0,        0,        document.querySelector(&quot;canvas&quot;).width,        document.querySelector(&quot;canvas&quot;).height      );</code></pre><h2 id="三角函数讲解"><a href="#三角函数讲解" class="headerlink" title="三角函数讲解"></a>三角函数讲解</h2><p>绘制圆形</p><p>1角度 = 1* Math.PI/ 180弧度</p><p>1弧度 = 1* 180 / Math.PI 角度</p><p>arc(x,y,r,0,360,false) </p><p>x,y  圆心坐标位置</p><p> r 圆半径 </p><p>0,360 </p><p>从0度到360度所对应的弧度 (弧度: 角度值*Math.PI/180)      true/false 逆时针/顺时针绘图</p><h2 id="添加图片、视频、canvas"><a href="#添加图片、视频、canvas" class="headerlink" title="添加图片、视频、canvas"></a>添加图片、视频、canvas</h2><p>相关函数：</p><p>createPattern(ele，repeat|repeat-x|repeat-y|no-repeat)：添加图片、视频、画布到指定的场景</p><p>语法格式：</p><pre><code>//添加图片 var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      var img = new Image();      img.src = &quot;../newIMg.png&quot;;      img.onload = () =&gt; {        var createImg = ctx.createPattern(img, &quot;repeat&quot;);        ctx.fillStyle = createImg;        ctx.fillRect(0, 0, 800, 800);      }; //添加图片时注意：必须图片加载完后在载入createPattern，否则载入失败 //添加画布 function createImgCanvas() {        var c = document.createElement(&quot;canvas&quot;);        var ctx = c.getContext(&quot;2d&quot;);        c.width = 400;        c.height = 400;        ctx.fillStyle = &quot;yellow&quot;;        ctx.transform(1, 0, 0, 1, c.width / 2, c.height / 2);        DrawStart(ctx, 200);        ctx.fill();        return c;      }      var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      document.querySelector(&quot;canvas&quot;).width = 1400;      document.querySelector(&quot;canvas&quot;).height = 1400;      ctx.fillStyle = ctx.createPattern(createImgCanvas(), &quot;repeat&quot;);      ctx.fillRect(0, 0, 1400, 1400);</code></pre><h2 id="案例：绘制圆角矩形"><a href="#案例：绘制圆角矩形" class="headerlink" title="案例：绘制圆角矩形"></a>案例：绘制圆角矩形</h2><pre><code>      /*          把圆分为4份，顺时针顺序绘制           Math.PI / 2 半圆分1为2          Math.PI 一个圆中的一半          Math.PI*3/2 || Math.PI*1.5  1个半圆加一个1分为2的半圆          Math.PI*2 完整的圆       */var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      ctx.beginPath();      ctx.arc(400 - 50, 400 - 50, 50, 0, Math.PI / 2);      ctx.lineTo(50, 400);      ctx.arc(50, 400 - 50, 50, Math.PI / 2, Math.PI);      ctx.lineTo(0, 50);      ctx.arc(50, 50, 50, Math.PI, (Math.PI * 3) / 2);      ctx.lineTo(400 - 50, 0);      ctx.arc(400 - 50, 50, 50, (Math.PI * 3) / 2, Math.PI * 2);      ctx.closePath();      ctx.stroke();  //封装函数  function PathRoundRect(ctx, width, height, r)       {        ctx.beginPath();        ctx.arc(width - r, height - r, r, 0, Math.PI / 2);        ctx.lineTo(r, height);        ctx.arc(r, height - r, r, Math.PI / 2, Math.PI);        ctx.lineTo(0, r);        ctx.arc(r, r, r, Math.PI, Math.PI * 1.5);        ctx.lineTo(width - r, 0);        ctx.arc(width - r, r, r, (Math.PI * 3) / 2, Math.PI * 2);        ctx.closePath();      }  //升级版  function PathRoundRect(ctx, width, height, r,optionColor,optionStyle)      {        if(r*2&gt;width||r*2&gt;height)return;        if(optionStyle)        {        optionStyle.stroke === true ? (optionColor.stroke ? (ctx.strokeStyle =optionColor.stroke ):null) : null;        optionStyle.fill === true ?(optionColor.fill ? (ctx.fillStyle =optionColor.fill):null) : null;        }        ctx.beginPath();        ctx.arc(width - r, height - r, r, 0, Math.PI / 2);        ctx.lineTo(r, height);        ctx.arc(r, height - r, r, Math.PI / 2, Math.PI);        ctx.lineTo(0, r);        ctx.arc(r, r, r, Math.PI, Math.PI * 1.5);        ctx.lineTo(width - r, 0);        ctx.arc(width - r, r, r, (Math.PI * 3) / 2, Math.PI * 2);        ctx.closePath();      }   //最终版    function RoundRect(ctx, width, height, r, optionColor, optionStyle) {        var flagfill,flagstroke;        if (r*2 &gt; width || r*2 &gt; height) return;        if (optionStyle) {          optionStyle.stroke === true            ? optionColor.stroke              ? (ctx.strokeStyle = optionColor.stroke)              : null            : null;          optionStyle.fill === true            ? optionColor.fill              ? (ctx.fillStyle = optionColor.fill)              : null            : null;          flagfill = optionColor.fill ?true:false;          flagstroke = optionColor.stroke ?true:false;        }        ctx.beginPath();        ctx.arc(width - r, height - r, r, 0, Math.PI / 2);        ctx.lineTo(r, height);        ctx.arc(r, height - r, r, Math.PI / 2, Math.PI);        ctx.lineTo(0, r);        ctx.arc(r, r, r, Math.PI, Math.PI * 1.5);        ctx.lineTo(width - r, 0);        ctx.arc(width - r, r, r, (Math.PI * 3) / 2, Math.PI * 2);        ctx.closePath();        flagstroke ? ctx.stroke() : null;        flagfill ? ctx.fill() : null;      }</code></pre><h2 id="案例：2048九宫格"><a href="#案例：2048九宫格" class="headerlink" title="案例：2048九宫格"></a>案例：2048九宫格</h2><pre><code> var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      ctx.translate(800/4,800/4)      RoundRect(        ctx,        480,        470,        10,        { fill: &quot;red&quot;, stroke: &quot;green&quot; },        { fill: true, stroke: true }      );      for (var i = 0; i &lt; 4; i++) {        ctx.save();        ctx.translate(10, i * 15);        for (var j = 0; j &lt; 4; j++) {          ctx.save();          ctx.translate(j * 120, i * 100 +15);          RoundRect(            ctx,            100,            100,            10,            { fill: &quot;green&quot;, stroke: &quot;green&quot; },            { fill: true, stroke: true }          );          ctx.restore();        }        ctx.restore();      }      function RoundRect(ctx, width, height, r, optionColor, optionStyle) {        var flagfill, flagstroke;        if (r &gt; width || r &gt; height) return;        if (optionStyle) {          optionStyle.stroke === true            ? optionColor.stroke              ? (ctx.strokeStyle = optionColor.stroke)              : null            : null;          optionStyle.fill === true            ? optionColor.fill              ? (ctx.fillStyle = optionColor.fill)              : null            : null;          flagfill = optionColor.fill ? true : false;          flagstroke = optionColor.stroke ? true : false;        }        ctx.beginPath();        ctx.arc(width - r, height - r, r, 0, Math.PI / 2);        ctx.lineTo(r, height);        ctx.arc(r, height - r, r, Math.PI / 2, Math.PI);        ctx.lineTo(0, r);        ctx.arc(r, r, r, Math.PI, Math.PI * 1.5);        ctx.lineTo(width - r, 0);        ctx.arc(width - r, r, r, (Math.PI * 3) / 2, Math.PI * 2);        ctx.closePath();        flagstroke ? ctx.stroke() : null;        flagfill ? ctx.fill() : null;      }</code></pre><h2 id="案例：绘制弯月"><a href="#案例：绘制弯月" class="headerlink" title="案例：绘制弯月"></a>案例：绘制弯月</h2><pre><code> pathMoon(ctx, 2, 300, 300, 200);      function pathMoon(ctx, d, x, y, r, deg, color) {        ctx.save();        ctx.translate(x, y);        ctx.scale(r, r);        ctx.rotate(deg || 0);        ctx.beginPath();        Moon(d, ctx);        ctx.fillStyle = color ? color : &quot;yellow&quot;;        ctx.fill();        ctx.closePath();        ctx.restore();        function Moon(d, ctx) {          ctx.arc(0, 0, 1, Math.PI * 0.5, Math.PI * 1.5, true);          ctx.moveTo(0, -1);          ctx.arcTo(d, 0, 0, 1, dis(0, -1, d, 0) / d);        }        function dis(x1, y1, x2, y2) {          return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));        }      }</code></pre><h2 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h2><p>贝塞尔曲线相关函数：</p><p>quadraticCurveTo(x1,y1,x2,y2)：二次贝塞尔曲线  一个控制点 1</p><p>bezierCurveTo(x1,y1,x2,y2,x3,y3)：三次贝塞尔曲线  两个控制点 1 2</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5d08c7450001a8de12800720.jpg" alt=""></p><pre><code>//起始点不由函数来定，可以用moveTo等画路径的函数来定//二次贝塞尔曲线        ctx.moveTo(0, 0);          ctx.quadraticCurveTo(800,400,400,800)          ctx.stroke()&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      html,      body {        width: 100%;        height: 100%;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas class=&quot;canvas&quot;&gt;&lt;/canvas&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      document.querySelector(&quot;canvas&quot;).width = document.body.clientWidth;      document.querySelector(&quot;canvas&quot;).height = document.body.clientHeight;        ctx.save();        var grd = ctx.createLinearGradient(0,0,0,document.querySelector(&quot;canvas&quot;).height);        grd.addColorStop(0,&quot;black&quot;);        grd.addColorStop(1,&quot;#035&quot;);        ctx.fillStyle = grd;        ctx.fillRect(0,0,document.querySelector(&quot;canvas&quot;).width,document.querySelector(&quot;canvas&quot;).height);        ctx.restore();      ctx.fillStyle = &quot;#fc1&quot;;      ctx.strokeStyle = &quot;#fb5&quot;;      ctx.lineWidth = 5;      ctx.lineJoin = &quot;round&quot;;      var ele = [];      start(ele,200);      end(ele);      pathMoon(ctx, 2, document.querySelector(&quot;canvas&quot;).width*0.85, document.querySelector(&quot;canvas&quot;).height/4,80,0,&quot;#fc1&quot;);      RectLoda(ctx);      function RectLoda(ctx)      {        ctx.save();        ctx.beginPath();        ctx.moveTo(0,document.querySelector(&quot;canvas&quot;).height*0.65);//三次贝塞尔曲线应用       ctx.bezierCurveTo(document.querySelector(&quot;canvas&quot;).width/2,650,document.querySelector(&quot;canvas&quot;).width/2,document.querySelector(&quot;canvas&quot;).height/3,document.querySelector(&quot;canvas&quot;).width,document.querySelector(&quot;canvas&quot;).height-200);        ctx.lineTo(document.querySelector(&quot;canvas&quot;).width,document.querySelector(&quot;canvas&quot;).height)        ctx.lineTo(0,document.querySelector(&quot;canvas&quot;).height)       var bgcolor = ctx.createLinearGradient(0,document.querySelector(&quot;canvas&quot;).height,0,0);        bgcolor.addColorStop(0,&quot;#030&quot;);        bgcolor.addColorStop(1,&quot;#580&quot;);        ctx.fillStyle = bgcolor;        ctx.fill();        ctx.closePath();        ctx.restore();      }      function pathMoon(ctx, d, x, y, r, deg, color) {        ctx.save();        ctx.translate(x, y);        ctx.scale(r, r);        ctx.rotate(deg || 0);        ctx.beginPath();        Moon(d, ctx);        ctx.fillStyle = color ? color : &quot;yellow&quot;;        ctx.fill();        ctx.closePath();        ctx.restore();        function Moon(d, ctx) {          ctx.arc(0, 0, 1, Math.PI * 0.5, Math.PI * 1.5, true);          ctx.moveTo(0, -1);          ctx.arcTo(d, 0, 0, 1, dis(0, -1, d, 0) / d);        }        function dis(x1, y1, x2, y2) {          return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));        }      }      function start(arr,num) {        for (var i = 0; i &lt; num; i++) {          var flag = true,            ran = Math.random() * 10 + 5,            x =              Math.random() *                (document.querySelector(&quot;canvas&quot;).width - ran * 2) +              ran,            y =              (Math.random() *                (document.querySelector(&quot;canvas&quot;).height - ran * 2) +                ran) *              0.65,            rotate = Math.random() * 360;          for (var j = 0; j &lt; ele.length; j++) {            var oldx = Math.pow(x - arr[j][1], 2);            var oldy = Math.pow(y - arr[j][2], 2);            var oldr = Math.pow(ran + arr[j][0], 2);            if (oldx + oldy &lt; oldr) {              flag = false;            }            if(x&gt;document.querySelector(&quot;canvas&quot;).width*0.85&amp;&amp;x&lt;document.querySelector(&quot;canvas&quot;).width*0.85+80*1.15)            {              flag = false;            }          }          flag ? arr.push([ran, x, y, rotate]) : i--;        }      }      function end(arr) {        for (var i = 0; i &lt; arr.length; i++) {          ctx.save();          ctx.beginPath();          ctx.translate(arr[i][1], arr[i][2]);          ctx.rotate(arr[i][3]);          ctx.scale(0.7, 0.7);          DrawStart(ctx, arr[i][0]);          ctx.fill();          ctx.stroke();          ctx.closePath();          ctx.restore();        }      }      function DrawStart(ctx, r) {        //绘画对象 大圆的半径 小圆半径  x轴 y轴        for (var i = 0; i &lt;= 5; i++) {          ctx.lineTo(            Math.cos(((18 + 72 * i) / 180) * Math.PI) * r,            -Math.sin(((18 + 72 * i) / 180) * Math.PI) * r          );          ctx.lineTo(            (Math.cos(((54 + 72 * i) / 180) * Math.PI) * r) / 2,            (-Math.sin(((54 + 72 * i) / 180) * Math.PI) * r) / 2          );        }      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>字体绘制相关函数：</p><p>font：设置字体样式属性  五个参数依次是font-style(italic oblique)、font-variant(small-caps)、font-weight(bold lighter bolder)、font-size、font-family</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5d08d16c0001026b12800720.jpg" alt=""></p><p>fillText(string,x,y,length)：绘制带填充字体</p><p>strokeText(string,x,y,length)：绘制带边框的字体</p><p>textAlign：设置字体水平对齐 参数有：right    center   left</p><p>textBaseline：设置字体垂直对齐 参数有：top   middle bottom  alphabetic(defalut)  ideographic  hanging</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5d08fdb00001fe6512800720.jpg" alt=""></p><p>measureText(String).width：获取文本宽度（会根据font设置的字体、字号来决定）</p><p>语法格式：</p><pre><code> var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);    var grd = ctx.createLinearGradient(0,0,800,0);    grd.addColorStop(0,&quot;red&quot;);    grd.addColorStop(0.5,&quot;yellow&quot;);    grd.addColorStop(1,&quot;green&quot;);    ctx.fillStyle = grd;    ctx.font = &quot;bold 40px 微软雅黑 &quot;;    ctx.fillText(&quot;How are you!&quot;,100,100,300);    //字体可以填充渐变色、图形纹理、另一个画布  ===================================================================  //只带边框的字体   var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);    var grd = ctx.createLinearGradient(0,0,800,0);    grd.addColorStop(0,&quot;red&quot;);    grd.addColorStop(0.5,&quot;yellow&quot;);    grd.addColorStop(1,&quot;green&quot;);    ctx.lineWidth =2;    ctx.strokeStyle = grd;    ctx.font = &quot;bold 40px 微软雅黑 &quot;;    ctx.strokeText(&quot;How are you!&quot;,100,100,300);    ===============================================   //带纹理的字体    var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      // var grd = ctx.createLinearGradient(0,0,800,0);      // grd.addColorStop(0,&quot;red&quot;);      // grd.addColorStop(0.5,&quot;yellow&quot;);      // grd.addColorStop(1,&quot;green&quot;);      var img = new Image();      img.src = &quot;../newIMg.png&quot;;      img.onload = function() {        var pattern = ctx.createPattern(img, &quot;repeat&quot;);        ctx.fillStyle = pattern;        ctx.strokeStyle = &quot;red&quot;;        ctx.lineWidth =1;        ctx.font = &quot;bold 40px 微软雅黑 &quot;;        ctx.strokeText(&quot;How are you!&quot;, 100, 100, 300);        ctx.fillText(&quot;How are you!&quot;, 100, 100, 300);      };</code></pre><p>水平对齐效果：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/59f31bf70001286f12800720.jpg" alt=""></p><p>垂直对齐效果：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/59992ffd0001f1dd12800720.jpg" alt=""></p><h2 id="案例：水平垂直居中"><a href="#案例：水平垂直居中" class="headerlink" title="案例：水平垂直居中"></a>案例：水平垂直居中</h2><pre><code> var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      ctx.fillStyle = &quot;red&quot;;      ctx.strokeStyle = &quot;red&quot;;      ctx.moveTo(400, 0);      ctx.lineTo(400, 800);      ctx.moveTo(0, 400);      ctx.lineTo(800, 400);      ctx.stroke();      ctx.textAlign = &quot;center&quot;;      ctx.textBaseline = &quot;middle&quot;;      ctx.font = &quot;bold 100px 微软雅黑 &quot;;      ctx.strokeText(&quot;How are you!&quot;, 400, 400);</code></pre><h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><p>阴影相关属性：</p><p>shadowColor：设置阴影颜色</p><p>shadowOffsetX：设置阴影X偏移</p><p>shadowOffsetY：设置阴影Y偏移</p><p>shadowBlur：设置阴影模糊扩散程度</p><p>语法格式：</p><pre><code>  var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      ctx.shadowColor = &quot;black&quot;;     ctx.fillStyle = &quot;red&quot;      var num = 0;      var flag = true;      setInterval(function() {        ctx.shadowOffsetX = -20+num;      ctx.shadowOffsetY = -20+num;        num == 100 ? (flag = false) : num == 0 ? (flag = true) : null;        flag ? num++ : num--;        ctx.shadowBlur = num;        ctx.clearRect(0, 0, 800, 800);        ctx.fillRect(100, 100, 400, 400);      }, 50);</code></pre><h2 id="透明"><a href="#透明" class="headerlink" title="透明"></a>透明</h2><p>透明相关函数：</p><p>在canvas中要实现透明，可以使用rgba颜色，也可以使用以下方法</p><p>globalAlpha：设置透明度   范围（1-0） 全局透明</p><p>语法格式：</p><pre><code>  var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      var color = [&quot;red&quot;,&quot;green&quot;,&quot;yellow&quot;,&quot;blue&quot;,&quot;black&quot;]     for(var i=0;i&lt;200;i++)     {       var randomX = Math.random()*800;       var randomY = Math.random()*800;       var randomR = Math.random()*30;      var R = Math.floor(Math.random()*255),G = Math.floor(Math.random()*255),B = Math.floor(Math.random()*255);       ctx.save();       ctx.beginPath();       ctx.globalAlpha = 0.7;       ctx.fillStyle = `rgb(${R},${G},${B})`;       ctx.arc(randomX,randomY,randomR,0,Math.PI*2);       ctx.fill();       ctx.closePath();       ctx.restore();     }</code></pre><h2 id="遮盖顺序"><a href="#遮盖顺序" class="headerlink" title="遮盖顺序"></a>遮盖顺序</h2><blockquote><p>xx.globalCompositeOperation = “source-over” (默认，后绘制的图形会压在先绘制的图形上) / “destination-over”(先绘制的图形压在后绘制的图形上)</p></blockquote><p>相关属性：</p><p>globalCompositeOperation ：改变元素显示效果与遮盖顺序</p><p>各个参数的实现效果可以参考菜鸟，或有canvas手册的网址，或以下链接</p><p><a href="">https://blog.csdn.net/fe_dev/article/details/81985367</a></p><p>此链接，有水滴扩散、刮刮卡案例参考</p><p>参数：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/59f24de30001e3ab12800720.jpg" alt=""></p><p>语法格式：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      html,      body {        width: 100%;        height: 100%;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas class=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      var color = [&quot;red&quot;,&quot;green&quot;,&quot;yellow&quot;,&quot;blue&quot;,&quot;black&quot;]      var Balls = [];     for(var i=0;i&lt;200;i++)     {      var randomR = Math.random()*30+10;       var randomX = Math.random()*(800-randomR*2)+randomR;       var randomY = Math.random()*(800-randomR*2)+randomR;      var R = Math.floor(Math.random()*255),G = Math.floor(Math.random()*255),B = Math.floor(Math.random()*255);        let balls ={          x:randomX,          y:randomY,          r:randomR,          color:`rgb(${R},${G},${B})`,          vx:(Math.random()*5+5)*(Math.pow(-1,Math.floor(Math.random()*100))),          vy:(Math.random()*5+5)*(Math.pow(-1,Math.floor(Math.random()*100))),        }      Balls.push(balls);     }     setInterval(()=&gt;{       draw(ctx)     },50)     function draw(ctx)     {       ctx.clearRect(0,0,800,800)       for(let i=0;i&lt;Balls.length;i++)       {       ctx.save();       ctx.beginPath();      ctx.globalCompositeOperation = &quot;xor&quot;;       ctx.fillStyle = Balls[i].color;       ctx.arc(Balls[i].x,Balls[i].y,Balls[i].r,0,Math.PI*2);       ctx.fill();       ctx.closePath();       ctx.restore();       Balls[i].x+=Balls[i].vx;       Balls[i].y+=Balls[i].vy;       if(Balls[i].x-Balls[i].r&lt;=0)       {         Balls[i].vx = -Balls[i].vx;          Balls[i].x = Balls[i].r;       }       if(Balls[i].x+Balls[i].r &gt;= 800)       {         Balls[i].vx = -Balls[i].vx;         Balls[i].x = 800-Balls[i].r;       }       if(Balls[i].y-Balls[i].r&lt;=0)       {         Balls[i].vy = -Balls[i].vy;         Balls[i].y = Balls[i].r;       }       if(Balls[i].y+Balls[i].r&gt;=800)       {         Balls[i].vy = -Balls[i].vy;         Balls[i].y = 800-Balls[i].r;       }       }     }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h2><p>相关函数：</p><p>clip：相对于上个填充路径做剪切效果</p><p>语法格式：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      html,      body {        width: 100%;        height: 100%;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas class=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      var r = 150;      ctx.fillStyle = &quot;black&quot;;      ctx.fillRect(0, 0, 800, 800);      ctx.canvas.onmousemove = e =&gt; {        ctx.clearRect(0, 0, 800, 800);        ctx.beginPath();        ctx.fillStyle = &quot;black&quot;;        ctx.fillRect(0, 0, 800, 800);        ctx.closePath();        ctx.save();        ctx.beginPath();        ctx.fillStyle = &quot;rgba(255,255,255,1)&quot;;        var x = e.pageX - r &lt;= 0 ? r : e.pageX;        var y = e.pageY - r &lt;= 0 ? r : e.pageY;        x = e.pageX + r &gt; 800 ? 800 - r : x;        y = e.pageY + r &gt; 800 ? 800 - r : y;        ctx.arc(x, y, r, 0, Math.PI * 2);        ctx.fill();        ctx.clip();        ctx.closePath();        ctx.beginPath();        ctx.fillStyle = &quot;red&quot;;        ctx.font = &quot;200px bold 微软雅黑&quot;;        ctx.textAlign = &quot;center&quot;;        ctx.textBaseline = &quot;middle&quot;;        ctx.fillText(&quot;Canvas&quot;, 400, 400);        ctx.closePath();        ctx.restore();        document.onkeyup = ev =&gt; {          ev.keyCode === 38 ? (r += 20) : null;          ev.keyCode === 40 ? (r -= 20) : null;          if (r &gt;= 390) r = 390;          ctx.canvas.onmousemove(e);          return false;        };      };      ctx.canvas.onmouseout = () =&gt; {        ctx.fillStyle = &quot;black&quot;;        ctx.fillRect(0, 0, 800, 800);        document.onkeyup = null;      };    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="实现剪纸效果"><a href="#实现剪纸效果" class="headerlink" title="实现剪纸效果"></a>实现剪纸效果</h2><blockquote><p>剪纸效果参考非零环绕原侧，自动识别里、外、面，一个面不同时出现顺时针和逆时针就填充，如果同时出现顺时针和逆时针就不填充，这也就说明了图形的绘制方向，会影响其是否填充</p></blockquote><p>语法格式：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      html,      body {        width: 100%;        height: 100%;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas class=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      ctx.beginPath();      ctx.rect(200, 200, 400, 200);      drawRect(ctx, 220, 220, 100, 100);      ctx.arc(400, 270, 50, Math.PI * 2, 0, true);      Triangle(ctx, 510, 220, 460, 320, 560, 320);      ctx.closePath();      ctx.fillStyle = &quot;red&quot;;      ctx.shadowColor = &quot;black&quot;;      ctx.shadowOffsetX = 10;      ctx.shadowOffsetY = 10;      ctx.fill();      function drawRect(ctx, x, y, w, h) {        ctx.moveTo(x, y);        ctx.lineTo(x, y + h);        ctx.lineTo(x + w, y + h);        ctx.lineTo(x + w, y);        ctx.lineTo(x, y);      }      function Triangle(ctx, x1, y1, x2, y2, x3, y3) {        ctx.moveTo(x1, y1);        ctx.lineTo(x2, y2);        ctx.lineTo(x3, y3);        ctx.lineTo(x1, y1);      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><p>canvas交互相关函数：</p><p>isPointInPath(x,y)：检测指定的坐标是否在绘制元素内，<strong>只能判断最后一个绘制的封闭路径</strong></p><p>语法格式：</p><pre><code>//点击填充颜色&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      * {        padding: 0;        margin: 0;      }      html,      body {        width: 100%;        height: 100%;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas class=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      var Balls = [];      for (var i = 0; i &lt; 10; i++) {        ctx.beginPath();        Balls.push({          x: Math.random() * 800,          y: Math.random() * 800,          r: Math.random() * 100        });      }      Draw(ctx);      function Draw(ctx) {        for (let i = 0; i &lt; Balls.length; i++) {          ctx.beginPath();          ctx.arc(Balls[i].x, Balls[i].y, Balls[i].r, 0, Math.PI * 2);          ctx.stroke();        }        ctx.canvas.addEventListener(&quot;click&quot;, function(event) {          for (let i = 0; i &lt; Balls.length; i++) {            ctx.beginPath();            ctx.arc(Balls[i].x, Balls[i].y, Balls[i].r, 0, Math.PI * 2);            if (ctx.isPointInPath(event.pageX, event.pageY)) {              ctx.fillStyle = &quot;yellow&quot;;              ctx.fill();            }          }        });      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;//鼠标滑入填充颜色，滑出清空颜色&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      * {        padding: 0;        margin: 0;      }      html,      body {        width: 100%;        height: 100%;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas class=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      var Balls = [];      for (var i = 0; i &lt; 10; i++) {        ctx.beginPath();        Balls.push({          x: Math.random() * 800,          y: Math.random() * 800,          r: Math.random() * 100        });      }      Draw(ctx);      function Draw(ctx) {        for (let i = 0; i &lt; Balls.length; i++) {          ctx.beginPath();          ctx.arc(Balls[i].x, Balls[i].y, Balls[i].r, 0, Math.PI * 2);          ctx.stroke();        }        ctx.canvas.addEventListener(&quot;mousemove&quot;, function(event) {          ctx.clearRect(0, 0, 800, 800);          for (let i = 0; i &lt; Balls.length; i++) {            ctx.beginPath();            ctx.arc(Balls[i].x, Balls[i].y, Balls[i].r, 0, Math.PI * 2);            if (ctx.isPointInPath(event.pageX, event.pageY)) {              ctx.fillStyle =                &quot;rgb(&quot; +                Math.random() * 255 +                &quot;,&quot; +                Math.random() * 255 +                &quot;,&quot; +                Math.random() * 255 +                &quot;)&quot;;              ctx.fill();            } else ctx.stroke();          }        });      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="案例：小球滚动（面向对象-控制面板）"><a href="#案例：小球滚动（面向对象-控制面板）" class="headerlink" title="案例：小球滚动（面向对象+控制面板）"></a>案例：小球滚动（面向对象+控制面板）</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      html,      body {        width: 100%;        height: 100%;      }      .canvasBox {        width: 800px;        height: 800px;        position: relative;      }      .canvasBox &gt; .SetupPanel {        width: 300px;        height: 200px;        background: #99b4e487;        border-radius: 30px;        position: absolute;        left: 0;        top: 0;        color: white;      }      .canvasBox &gt; .SetupPanel &gt; h1 {        text-align: center;        line-height: 25px;      }      .canvasBox &gt; .SetupPanel &gt; a {        float: left;        color: #478aff87;        background: #e5eeff;        border-radius: 5px;        padding: 10px 0;        margin: 3px 0;        text-decoration: none;        text-align: center;        line-height: 15px;        width: 100%;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;div class=&quot;canvasBox&quot;&gt;      &lt;canvas class=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;      &lt;div class=&quot;SetupPanel&quot;&gt;        &lt;h1&gt;控制面板&lt;/h1&gt;        &lt;a href=&quot;javascript:void(0)&quot;&gt;点击停止&lt;/a&gt;        &lt;a href=&quot;javascript:void(0)&quot;&gt;点击切换背景颜色&lt;/a&gt;        &lt;a href=&quot;javascript:void(0)&quot;&gt;点击切换覆盖模式&lt;/a&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      class Animate {        constructor(canvas) {          this.canvas = document.querySelector(canvas);          this.ctx = this.canvas.getContext(&quot;2d&quot;);          this.initAttr();          this.initDraw();          this.initEvent();        }        initAttr() {          this.color = [&quot;red&quot;, &quot;green&quot;, &quot;yellow&quot;, &quot;blue&quot;, &quot;black&quot;];          this.bgcolor = null;          this.Balls = [];          this.flag = true;          this.module = [&quot;xor&quot;, &quot;lighter&quot;, null];          this.option = null;          this.time = null;        }        initEvent() {          document.querySelectorAll(            &quot;.canvasBox&gt;.SetupPanel&gt;a&quot;          )[0].onclick = () =&gt; {            if (this.flag) {              clearInterval(this.time);              this.flag = false;              document.querySelectorAll(                &quot;.canvasBox&gt;.SetupPanel&gt;a&quot;              )[0].innerHTML = &quot;点击开始&quot;;              document.querySelectorAll(                &quot;.canvasBox&gt;.SetupPanel&gt;a&quot;              )[0].style.background = &quot;red&quot;;            } else {              this.time = setInterval(() =&gt; {                this.draw(this.bgcolor);              }, 50);              this.flag = true;              document.querySelectorAll(                &quot;.canvasBox&gt;.SetupPanel&gt;a&quot;              )[0].innerHTML = &quot;点击停止&quot;;              document.querySelectorAll(                &quot;.canvasBox&gt;.SetupPanel&gt;a&quot;              )[0].style.background = &quot;&quot;;            }          };          document.querySelectorAll(            &quot;.canvasBox&gt;.SetupPanel&gt;a&quot;          )[1].onclick = () =&gt; {            this.bgcolor = this.color[              parseInt(Math.random() * this.color.length - 1)            ];          };          document.querySelectorAll(            &quot;.canvasBox&gt;.SetupPanel&gt;a&quot;          )[2].onclick = () =&gt; {            this.option = this.module[              Math.ceil(Math.random() * this.module.length - 1)            ];          };        }        initDraw() {          for (let i = 0; i &lt; 200; i++) {            let randomR = Math.random() * 30 + 10;            let randomX = Math.random() * (800 - randomR * 2) + randomR;            let randomY = Math.random() * (800 - randomR * 2) + randomR;            let R = Math.floor(Math.random() * 255),              G = Math.floor(Math.random() * 255),              B = Math.floor(Math.random() * 255);            let balls = {              x: randomX,              y: randomY,              r: randomR,              color: `rgb(${R},${G},${B})`,              vx:                (Math.random() * 5 + 5) *                Math.pow(-1, Math.floor(Math.random() * 100)),              vy:                (Math.random() * 5 + 5) *                Math.pow(-1, Math.floor(Math.random() * 100))            };            this.Balls.push(balls);          }        }        draw(bgcolor) {          this.ctx.clearRect(0, 0, 800, 800);          this.bgDraw(bgcolor);          for (let i = 0; i &lt; this.Balls.length; i++) {            this.ctx.save();            this.ctx.beginPath();            this.ctx.globalCompositeOperation = this.option;            this.ctx.fillStyle = this.Balls[i].color;            this.ctx.arc(              this.Balls[i].x,              this.Balls[i].y,              this.Balls[i].r,              0,              Math.PI * 2            );            this.ctx.fill();            this.ctx.closePath();            this.ctx.restore();            this.Balls[i].x += this.Balls[i].vx;            this.Balls[i].y += this.Balls[i].vy;            if (this.Balls[i].x - this.Balls[i].r &lt;= 0) {              this.Balls[i].vx = -this.Balls[i].vx;              this.Balls[i].x = this.Balls[i].r;            }            if (this.Balls[i].x + this.Balls[i].r &gt;= 800) {              this.Balls[i].vx = -this.Balls[i].vx;              this.Balls[i].x = 800 - this.Balls[i].r;            }            if (this.Balls[i].y - this.Balls[i].r &lt;= 0) {              this.Balls[i].vy = -this.Balls[i].vy;              this.Balls[i].y = this.Balls[i].r;            }            if (this.Balls[i].y + this.Balls[i].r &gt;= 800) {              this.Balls[i].vy = -this.Balls[i].vy;              this.Balls[i].y = 800 - this.Balls[i].r;            }          }        }        bgDraw(bgcolor) {          this.ctx.beginPath();          this.ctx.fillStyle = bgcolor;          this.ctx.fillRect(0, 0, 800, 800);          this.ctx.closePath();        }      }      //初始化对象      let animate = new Animate(&quot;canvas&quot;);      var ctx = animate.ctx;      //开始执行动画      animate.time = setInterval(() =&gt; {        animate.draw(animate.bgcolor);      }, 50);    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="清除"><a href="#清除" class="headerlink" title="清除"></a>清除</h2><blockquote><p>清除也称重绘，在动画应用当中是不可分割的，动画是一帧一帧的播放，中间少不了清除的步骤，否则将达不到动画的播放帧数标准</p></blockquote><p>清除画布相关函数：</p><p>clearRect(startX,startY,endX,endY)：清除参数指定范围内绘制的元素</p><p>语法格式：</p><pre><code>ctx.clearRect(0,0,canvas.width,canvas.height);</code></pre><h2 id="扩充Canvas-2d方法"><a href="#扩充Canvas-2d方法" class="headerlink" title="扩充Canvas 2d方法"></a>扩充Canvas 2d方法</h2><blockquote><p>在有些时候，我们自定义的函数，不能像canvas自带的函数一样，不用传入绘制上下午对象，而我们自定义的必须把绘制对象传入函数里才可以使用，那么有没有方法可以解决呢，在canvas实例对象的原型上添加方法即可</p></blockquote><p>语法格式：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      html,      body {        width: 100%;        height: 100%;      }      .canvasBox {        width: 800px;        height: 800px;        position: relative;      }      .canvasBox &gt; .SetupPanel {        width: 300px;        height: 200px;        background: #99b4e487;        border-radius: 30px;        position: absolute;        left: 0;        top: 0;        color: white;      }      .canvasBox &gt; .SetupPanel &gt; h1 {        text-align: center;        line-height: 25px;      }      .canvasBox &gt; .SetupPanel &gt; a {        float: left;        color: #478aff87;        background: #e5eeff;        border-radius: 5px;        padding: 10px 0;        margin: 3px 0;        text-decoration: none;        text-align: center;        line-height: 15px;        width: 100%;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;div class=&quot;canvasBox&quot;&gt;      &lt;canvas class=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;    &lt;/div&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      let ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      ctx.__proto__.fillStar = function(r)        //ctx.__proto__ === CanvasRenderingContext2D.prototype      {          this.beginPath();        for(let i=0;i&lt;=5;i++)        {          this.lineTo(            Math.cos((18+i*72)/180*Math.PI)*r+this.lastMoveTo.x,            -Math.sin((18+i*72)/180*Math.PI)*r+this.lastMoveTo.y          );          this.lineTo(            Math.cos((54+i*72)/180*Math.PI)*r/2+this.lastMoveTo.x,            -Math.sin((54+i*72)/180*Math.PI)*r/2+this.lastMoveTo.y          );        }          this.closePath();          this.fill();      }      ctx.lastMoveTo = {};      CanvasRenderingContext2D.prototype.oldMoveTo = CanvasRenderingContext2D.prototype.moveTo;      CanvasRenderingContext2D.prototype.moveTo = function(x,y)      {        this.oldMoveTo(x,y);        this.lastMoveTo.x = x;        this.lastMoveTo.y = y;      }      ctx.moveTo(400,400)      ctx.fillStar(100);    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h2><blockquote><p>图像不同于图形，图像是位图是由无数个彩色像素点组成，图形是点线面结合而成，两者的处理方式也不相同，所干涉的区域也不相同</p></blockquote><p>图形处理相关函数：</p><p>drawImage(img,sx,sy,sw,sh,dx,dy,dw,dh)  ：导入指定图片到canvas当中。 九个参数  首个是图片资源，s开头的是原图像的参数，d开头的是指在canvas绘制的参数</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5c7d480800018e1a12800720.jpg" alt=""></p><p>语法格式：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas      class=&quot;canvas&quot;      width=&quot;800&quot;      height=&quot;800&quot;      style=&quot;border:1px solid blue&quot;    &gt;&lt;/canvas&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      var img = new Image();      img.src = &quot;../PHP操作MySQL.png&quot;;      img.onload = () =&gt; {        ctx.drawImage(img, 740, 450, 260, 70, 0, 0, 800, 800);      };    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="案例：图像放大"><a href="#案例：图像放大" class="headerlink" title="案例：图像放大"></a>案例：图像放大</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      body,      html {        background: black;      }input[type=range] {    -webkit-appearance: none;    width: 300px;    border-radius: 10px; /*这个属性设置使填充进度条时的图形为圆角*/    margin-top: 10px;}input[type=range]::-webkit-slider-thumb {    -webkit-appearance: none;} input[type=range]::-webkit-slider-runnable-track {    height: 10px;    border-radius: 10px; /*将轨道设为圆角的*/    box-shadow: 0 1px 1px #def3f8, inset 0 .125em .125em #0d1112; /*轨道内置阴影效果*/}input[type=range]::-webkit-slider-thumb {    -webkit-appearance: none;    height: 25px;    width: 25px;    margin-top: -5px; /*使滑块超出轨道部分的偏移量相等*/    background: #ffffff;     border-radius: 50%; /*外观设置为圆形*/    border: solid 0.125em rgba(205, 224, 230, 0.5); /*设置边框*/    box-shadow: 0 .125em .125em #3b4547; /*添加底部阴影*/}    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas      class=&quot;canvas&quot;      style=&quot;border:1px solid blue;margin: 0 auto;display: block&quot;    &gt;&lt;/canvas&gt;    &lt;input      type=&quot;range&quot;      style=&quot;display:block;width:100%;&quot;      max=&quot;3.0&quot;      min=&quot;0.5&quot;      step=&quot;0.1&quot;      value=&quot;1&quot;      class=&quot;scale&quot;    /&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      var img = new Image();      var scale = document.querySelector(&quot;.scale&quot;);      img.src = &quot;../1.jpg&quot;;      img.onload = () =&gt; {        ctx.canvas.width = img.width;        ctx.canvas.height = img.height;        drawImageByScale(ctx, scale.value, img.width, img.height);        // scale.onchange = function() {        //   ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);        //   drawImageByScale(ctx, scale.value, img.width, img.height);        // };        scale.onmousemove = function() {          ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);          drawImageByScale(ctx, scale.value, img.width, img.height);        };      };      function drawImageByScale(ctx, scale, w, h) {        var imageWidth = w * scale;        var imageHeight = h * scale;        let x = ctx.canvas.width / 2 - imageWidth / 2,          y = ctx.canvas.height / 2 - imageHeight / 2;        ctx.drawImage(img, x, y, imageWidth, imageHeight);      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;//水印版&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      body,      html {        background: black;      }      .bottom {        width: 100%;        position: fixed;        bottom: 30px;      }      input[type=&quot;range&quot;] {        -webkit-appearance: none;        width: 300px;        border-radius: 10px; /*这个属性设置使填充进度条时的图形为圆角*/        margin-top: 10px;        position: relative;      }      input[type=&quot;range&quot;]::-webkit-slider-thumb {        -webkit-appearance: none;      }      input[type=&quot;range&quot;]::-webkit-slider-runnable-track {        height: 10px;        border-radius: 10px; /*将轨道设为圆角的*/        box-shadow: 0 1px 1px #def3f8, inset 0 0.125em 0.125em #0d1112; /*轨道内置阴影效果*/      }      input[type=&quot;range&quot;]::-webkit-slider-thumb {        -webkit-appearance: none;        height: 25px;        width: 25px;        margin-top: -5px; /*使滑块超出轨道部分的偏移量相等*/        background: #ffffff;        border-radius: 50%; /*外观设置为圆形*/        border: solid 0.125em rgba(205, 224, 230, 0.5); /*设置边框*/        box-shadow: 0 0.125em 0.125em #3b4547; /*添加底部阴影*/      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas      class=&quot;canvas&quot;      style=&quot;border:1px solid blue;margin: 0 auto;display: block&quot;    &gt;&lt;/canvas&gt;    &lt;div class=&quot;bottom&quot;&gt;      &lt;input        type=&quot;range&quot;        style=&quot;display:block;width:100%;&quot;        max=&quot;3.0&quot;        min=&quot;0.5&quot;        step=&quot;0.1&quot;        value=&quot;1&quot;        class=&quot;scale&quot;      /&gt;    &lt;/div&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      var img = new Image();      var scale = document.querySelector(&quot;.scale&quot;);      img.src = &quot;./img.jpg&quot;;      var shuiying = document.createElement(&quot;canvas&quot;).getContext(&quot;2d&quot;);      shuiying.canvas.width = 400;      shuiying.canvas.height = 100;      shuiying.font = &quot;bold 50px 微软雅黑&quot;;      shuiying.fillStyle = &quot;white&quot;;      shuiying.textAlign = &quot;center&quot;;      shuiying.textBaseline = &quot;middle&quot;;      shuiying.fillText(&quot;xuyuxin&quot;, 200, 50, 400);      img.onload = () =&gt; {        ctx.canvas.width = img.width;        ctx.canvas.height = img.height;        drawImageByScale(ctx, scale.value, img.width, img.height,shuiying);        // scale.onchange = function() {        //   ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);        //   drawImageByScale(ctx, scale.value, img.width, img.height);        // };        scale.onmousemove = function() {          ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);          drawImageByScale(ctx, scale.value, img.width, img.height, shuiying);        };      };      function drawImageByScale(ctx, scale, w, h, c) {        var imageWidth = w * scale;        var imageHeight = h * scale;        let x = ctx.canvas.width / 2 - imageWidth / 2,          y = ctx.canvas.height / 2 - imageHeight / 2;        ctx.drawImage(img, x, y, imageWidth, imageHeight);        if(scale&gt;=1)        {        ctxdrawImage(c.canvas, -40, ctx.canvas.height - 100);        }        else        {        ctx.drawImage(c.canvas, x, imageHeight-50);        }      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="案例：放大镜"><a href="#案例：放大镜" class="headerlink" title="案例：放大镜"></a>案例：放大镜</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      body,      html {        background: black;      }      .bottom {        width: 100%;        position: fixed;        bottom: 30px;      }      input[type=&quot;range&quot;] {        -webkit-appearance: none;        width: 300px;        border-radius: 10px; /*这个属性设置使填充进度条时的图形为圆角*/        margin-top: 10px;        position: relative;      }      input[type=&quot;range&quot;]::-webkit-slider-thumb {        -webkit-appearance: none;      }      input[type=&quot;range&quot;]::-webkit-slider-runnable-track {        height: 10px;        border-radius: 10px; /*将轨道设为圆角的*/        box-shadow: 0 1px 1px #def3f8, inset 0 0.125em 0.125em #0d1112; /*轨道内置阴影效果*/      }      input[type=&quot;range&quot;]::-webkit-slider-thumb {        -webkit-appearance: none;        height: 25px;        width: 25px;        margin-top: -5px; /*使滑块超出轨道部分的偏移量相等*/        background: #ffffff;        border-radius: 50%; /*外观设置为圆形*/        border: solid 0.125em rgba(205, 224, 230, 0.5); /*设置边框*/        box-shadow: 0 0.125em 0.125em #3b4547; /*添加底部阴影*/      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas      class=&quot;canvas&quot;      style=&quot;border:1px solid blue;margin: 0 auto;display: block&quot;    &gt;&lt;/canvas&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      var offsetCanvas = document.createElement(&quot;canvas&quot;).getContext(&quot;2d&quot;);      var img = new Image();      var scale;      img.src = &quot;./img-lg.jpg&quot;;      img.onload = () =&gt; {        ctx.canvas.width = 1152;        ctx.canvas.height = 768;        offsetCanvas.canvas.width = img.width;        offsetCanvas.canvas.height = img.height;        scale = offsetCanvas.canvas.width / ctx.canvas.width;        ctx.drawImage(img, 0, 0, ctx.canvas.width, ctx.canvas.height);        offsetCanvas.drawImage(img, 0, 0);      };      ctx.canvas.onmousedown = function(e) {        var x = e.clientX - this.getBoundingClientRect().left,            y = e.clientY - this.getBoundingClientRect().top;          Draw(ctx, true, x, y);        this.onmousemove = e =&gt; {          var x = e.clientX - this.getBoundingClientRect().left,            y = e.clientY - this.getBoundingClientRect().top;          Draw(ctx, true, x, y);        };        this.onmouseup = () =&gt; {          ctx.canvas.onmousemove = null;          Draw(ctx, false);        };        this.onmouseout = () =&gt; {          ctx.canvas.onmousemove = null;          Draw(ctx, false);        };      };      function Draw(ctx, flag, x, y) {        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);        ctx.drawImage(img, 0, 0, ctx.canvas.width, ctx.canvas.height);        if (flag) {          drawImageRect(ctx, x, y);        }      }      function drawImageRect(ctx, x, y) {        var imageLgX = x * scale,          imageLgY = y * scale;        var r = 200;        var sx = imageLgX - r,          sy = imageLgY - r;        var dx = x - r,          dy = y - r;        ctx.save();        ctx.beginPath();        ctx.arc(x,y,r,0,Math.PI*2);        ctx.stroke();        ctx.clip()        ctx.drawImage(offsetCanvas.canvas, sx, sy, r * 2, r * 2, dx, dy, r * 2, r * 2);        ctx.closePath();        ctx.restore();      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="像素处理"><a href="#像素处理" class="headerlink" title="像素处理"></a>像素处理</h2><p>相关函数：</p><p>getImageData(x,y,w,h)：获取指定图像像素数据   返回一个对象，里面有 data像素数据  </p><p>putImageData(img,dx,dy,dirtx,dirty,dirtw,dirth)：输出处理后的图像到指定位置</p><p>createImageData(w,h)：创建一个空的图像</p><p>像素处理算法：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5c06264f0001f9fe12800720.jpg" alt=""></p><p>语法格式：</p><pre><code>//像素自动变紫&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      body,      html {        /* background: black; */        height: 2000px;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas      class=&quot;canvas&quot;      style=&quot;border:1px solid blue;float:left&quot;      width=&quot;500&quot;      height=&quot;500&quot;    &gt;&lt;/canvas&gt;    &lt;canvas      class=&quot;canvas&quot;      style=&quot;border:1px solid blue;float:right&quot;      width=&quot;500&quot;      height=&quot;500&quot;    &gt;&lt;/canvas&gt;    &lt;div class=&quot;btnbox&quot; style=&quot;display: block;&quot;&gt;      &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;fillter()&quot;&gt;fillter&lt;/a&gt;    &lt;/div&gt;    &lt;script&gt;      var ctx1 = document.querySelectorAll(&quot;.canvas&quot;)[0].getContext(&quot;2d&quot;);      var ctx2 = document.querySelectorAll(&quot;.canvas&quot;)[1].getContext(&quot;2d&quot;);var n =0;      var imageData;      var data;      var img = new Image();      img.src = &quot;./img.jpg&quot;;      img.onload = function() {        ctx1.drawImage(img, 0, 0, 500, 500);      };      function fillter() {        imageData = ctx1.getImageData(0, 0, 500, 500);        data = imageData.data;        for (let i = 0; i &lt; ctx2.canvas.width * ctx2.canvas.height; i++) {          data[4 * i + 0] += n;          // data[4 * i + 1] += n;          data[4 * i + 2] += n;          // data[4 * i + 3] = Math.ceil(Math.random()*255);        }        ctx2.putImageData(imageData, 0, 0, 0, 0, 500, 500);      }      setInterval(function(){        n++;        if(n===255)        {          n=Math.ceil(Math.random()*255)        }        fillter(n);      },1);    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="案例：像素滤镜"><a href="#案例：像素滤镜" class="headerlink" title="案例：像素滤镜"></a>案例：像素滤镜</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      body,      html {        /* background: black; */        height: 2000px;      }      .btnbox &gt; a {        float: left;        margin: 10px 20px;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas class=&quot;canvas&quot; style=&quot;float:left&quot; width=&quot;500&quot; height=&quot;500&quot;&gt;&lt;/canvas&gt;    &lt;canvas      class=&quot;canvas&quot;      style=&quot;float:right&quot;      width=&quot;500&quot;      height=&quot;500&quot;    &gt;&lt;/canvas&gt;    &lt;div class=&quot;btnbox&quot; style=&quot;display: block;&quot;&gt;      &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;grey()&quot;&gt;灰度 Grey Effect&lt;/a&gt;      &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;black()&quot;&gt;黑白 black&amp;white Effect&lt;/a&gt;      &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;revers()&quot;&gt;反色 revers Effect&lt;/a&gt;      &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;Blur()&quot;&gt;模糊 blur Effect&lt;/a&gt;      &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;mosaice()&quot;&gt;马赛克 mosaice Effect&lt;/a&gt;    &lt;/div&gt;    &lt;script&gt;      var ctx1 = document.querySelectorAll(&quot;.canvas&quot;)[0].getContext(&quot;2d&quot;);      var ctx2 = document.querySelectorAll(&quot;.canvas&quot;)[1].getContext(&quot;2d&quot;);      var imageData;      var data;      var img = new Image();      img.src = &quot;../1.jpg&quot;;      img.onload = function() {        ctx1.drawImage(img, 0, 0, 500, 500);      };      function mosaice() {        var imgData = ctx1.getImageData(0, 0, 500, 500);        var data = imgData.data;        var tmpimgData = ctx1.getImageData(0, 0, 500, 500);        var tmpData = tmpimgData.data;        var size = 16,          totalnum = Math.pow(size, 2);        for (var i = 0; i &lt; ctx2.canvas.height; i += size) {          for (var j = 0; j &lt; ctx2.canvas.width; j += size) {            var totalr = 0,              totalg = 0,              totalb = 0;            for (var dx = 0; dx &lt; size; dx++) {              for (var dy = 0; dy &lt; size; dy++) {                let x = i + dx,                  y = j + dy;                let p = x * ctx2.canvas.width + y;                totalr += tmpData[p * 4 + 0];                totalg += tmpData[p * 4 + 1];                totalb += tmpData[p * 4 + 2];              }            }            var p = i * ctx2.canvas.width + j;            var resr = totalr / totalnum;            var resg = totalg / totalnum;            var resb = totalb / totalnum;            for (var dx = 0; dx &lt; size; dx++) {              for (var dy = 0; dy &lt; size; dy++) {                var x = dx + i,                  y = dy + j;                var p = x * ctx2.canvas.width + y;                data[4 * p + 0] = resr;                data[4 * p + 1] = resg;                data[4 * p + 2] = resb;              }            }          }        }        ctx2.putImageData(imgData, 0, 0, 0, 0, 500, 500);      }      function revers() {        imageData = ctx1.getImageData(0, 0, 500, 500);        data = imageData.data;        for (let i = 0; i &lt; ctx2.canvas.width * ctx2.canvas.height; i++) {          let r = 255 - data[4 * i + 0],            g = 255 - data[4 * i + 1],            b = 255 - data[4 * i + 2];          data[4 * i + 0] = r;          data[4 * i + 1] = g;          data[4 * i + 2] = b;        }        ctx2.putImageData(imageData, 0, 0, 0, 0, 500, 500);      }      function Blur() {        var imgData = ctx1.getImageData(0, 0, 500, 500);        var data = imgData.data;        var tmpimgData = ctx1.getImageData(0, 0, 500, 500);        var tmpData = tmpimgData.data;        var blurR = 2,          totalnum = Math.pow(2 * blurR + 1, 2);        for (var i = blurR; i &lt; ctx2.canvas.height - blurR; i++) {          for (var j = blurR; j &lt; ctx2.canvas.width - blurR; j++) {            var totalr = 0,              totalg = 0,              totalb = 0;            for (var dx = -blurR; dx &lt;= blurR; dx++) {              for (var dy = -blurR; dy &lt;= blurR; dy++) {                let x = i + dx,                  y = j + dy;                let p = x * ctx2.canvas.width + y;                totalr += tmpData[p * 4 + 0];                totalg += tmpData[p * 4 + 1];                totalb += tmpData[p * 4 + 2];              }            }            var p = i * ctx2.canvas.width + j;            data[p * 4 + 0] = totalr / totalnum;            data[p * 4 + 1] = totalg / totalnum;            data[p * 4 + 2] = totalb / totalnum;          }        }        ctx2.putImageData(imgData, 0, 0, 0, 0, 500, 500);      }      function grey() {        imageData = ctx1.getImageData(0, 0, 500, 500);        data = imageData.data;        for (let i = 0; i &lt; ctx2.canvas.width * ctx2.canvas.height; i++) {          let r = data[4 * i + 0],            g = data[4 * i + 1],            b = data[4 * i + 2];          let grey = r * 0.3 + g * 0.59 + b * 0.11;          data[4 * i + 0] = grey;          data[4 * i + 1] = grey;          data[4 * i + 2] = grey;        }        ctx2.putImageData(imageData, 0, 0, 0, 0, 500, 500);      }      function black() {        imageData = ctx1.getImageData(0, 0, 500, 500);        data = imageData.data;        for (let i = 0; i &lt; ctx2.canvas.width * ctx2.canvas.height; i++) {          let r = data[4 * i + 0],            g = data[4 * i + 1],            b = data[4 * i + 2];          let grey = r * 0.3 + g * 0.59 + b * 0.11;          if (grey &gt; 255 / 2) {            v = 255;          } else {            v = 0;          }          data[4 * i + 0] = v;          data[4 * i + 1] = v;          data[4 * i + 2] = v;        }        ctx2.putImageData(imageData, 0, 0, 0, 0, 500, 500);      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="案例：颜色板"><a href="#案例：颜色板" class="headerlink" title="案例：颜色板"></a>案例：颜色板</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      body,      html {        /* background: black; */        height: 2000px;      }      .btnbox &gt; a {        float: left;        margin: 10px 20px;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas class=&quot;canvas&quot; style=&quot;float:left&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;    &lt;div class=&quot;btnbox&quot; style=&quot;display: block;&quot;&gt;&lt;/div&gt;    &lt;script&gt;      var ctx = document.querySelectorAll(&quot;.canvas&quot;)[0].getContext(&quot;2d&quot;);      var img = ctx.createImageData(800, 800);      var data = img.data;      for (var i = 0; i &lt; ctx.canvas.height; i++) {        for (var j = 0; j &lt; ctx.canvas.width; j++) {          var p = i * ctx.canvas.width + j;          data[4 * p + 0] = parseInt(            Math.pow(Math.cos(Math.atan2(j - 400, i - 400) / 2), 2) * 255          );          data[4 * p + 1] = parseInt(            Math.pow(              Math.cos(                Math.atan2(j - 400, i - 400) / 2 - (2 * Math.acos(-1)) / 3              ),              2            ) * 255          );          data[4 * p + 2] = parseInt(            Math.pow(              Math.cos(                Math.atan2(j - 400, i - 400) / 2 + (2 * Math.acos(-1)) / 3              ),              2            ) * 255          );          data[4 * p + 3] = 255;        }      }      ctx.putImageData(img, 0, 0, 0, 0, 800, 800);    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中Buffer数据详解</title>
      <link href="/posts/bd7.html"/>
      <url>/posts/bd7.html</url>
      
        <content type="html"><![CDATA[<h1 id="元数据处理"><a href="#元数据处理" class="headerlink" title="元数据处理"></a>元数据处理</h1><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a><strong>序言</strong></h2><p>随着WebSocket、WebAudio、Ajax2等广泛应用，前端方面只要是处理大数据或者想提高数据处理性能，那一定是少不了 ArrayBuffer对象</p><p>同时在浏览器当中处理二进制数据的需求也在不断的增加，有时需要字节数组、8位、16位、32位整数型数组，所以对于JS中处理二进制迟早学习比较好</p><p>现今世界上几乎所有的计算机体系结构都是以字节（byte）为二进制数据的基本单位，所以二进制常常以字节数组的形式存在于程序当中</p><p>众所周知，JS是弱类型语言i，并且JS设计之初似乎根本没想过要处理二进制的东西，对于字节的概念可以说是非常非常的模糊。如果要表达字节数组，那么似乎只能用一个普通数组来表示</p><p>那么H5的诞生及标准的发布，对技术的革新起了非常大的作用，深入地研究H5，会渐渐发现，很多时候都会对二进制数据进行处理，结合JS的ArrayBuffer和 Typed Array去获取及处理音频数据、XHR2上传或下载二进制内容等等</p><h2 id="arrayBuffer"><a href="#arrayBuffer" class="headerlink" title="arrayBuffer"></a>arrayBuffer</h2><p><code>ArrayBuffer</code>表示二进制数据的原始缓冲区，该缓冲区用于存储各种类型化数组的数据。是最基础的原始数据容器，无法直接读取或写入， 需要通过其他方式来读写。 但可根据需要将其传递到类型化数组或 DataView 对象来解释原始缓冲区。</p><p>也就是说他是一个二进制数据的原始缓冲区，虽然 JavaScript 是弱类型语言，但是他本身是对数据的类型和大小都有限制的，我们<code>需要通过某种数据结构将缓冲区的内容有序的读取出来或写进去</code></p><pre class=" language-css"><code class="language-css">例如：Int<span class="token number">8</span>Array             <span class="token number">8</span>位有符号整数Uint<span class="token number">8</span>Array            <span class="token number">8</span>位无符号整数Uint<span class="token number">8</span>ClampedArray      同上，像素操作Int<span class="token number">16</span>Array            Uint<span class="token number">16</span>ArrayInt<span class="token number">32</span>ArrayUint<span class="token number">32</span>ArrayFloat<span class="token number">32</span>ArrayFloat<span class="token number">64</span>Array以上是Typed Array类型化数组，类型化数组类型表示可编制索引和操纵的 ArrayBuffer 对象 的各种视图。 所有数组类型的长度均固定。而DataView视图对象对数据的操作更加细致</code></pre><p><code>ArrayBuffer</code>是一个固定长度的字节序列，通过<code>new ArrayBuffer(length)</code>来得到一片空间，内部实现与数组应该是不一样（内存分配和布局与Array不一样），<code>ArrayBuffer</code>是连续内存，因此对于高密度的访问（如音频数据）操作而言它比JS中的Array速度会快很多</p><p><code>ArrayBuffer</code>是不能直接被访问的，因此需要借助Typed Array</p><p>Typed Array的背后是一个<code>ArrayBuffer</code>，也就是说，事实上的数据是存在<code>ArrayBuffer</code>里面的，而Typed Array只是给你提供了一个某种类型的读写接口</p><p>总结一句话:    Typed Array不直接存放任何数据，所有对Typed Array进行读写的操作，最终都会落实到它背后所持有的<code>ArrayBuffer</code>的身上。 <code>ArrayBuffer</code>才是真正的元始数据字节，而Typed Array只是一个操作窗口/操作视图（View）</p><h2 id="获取二进制数据"><a href="#获取二进制数据" class="headerlink" title="获取二进制数据"></a>获取二进制数据</h2><p>常见的在网页里获取二进制数据有三种:</p><blockquote><p>-[x] XMLHttpRequest2<br>-[x] File<br>-[x] Blob</p></blockquote><p>​    <strong>通过XMLHttpRequest 2</strong></p><p>​    <code>XHR2</code> 的接口跟 <code>XHR</code> 几乎是一样的，当制定<code>xhr.responseType = &#39;arraybuffer&#39;</code>以后，在成功获取数据的回调里就可以通过<code>xhr.response</code>来得到请求结果的<code>ArrayBuffer</code>了，然后就可以按照你的意愿来构造各种Typed Array进行访问。</p><p><code>responseType</code>还可以有<code>blob</code>取值，可以用<code>xhr.response</code>获得<a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="noopener">Blob</a>对象。</p><p>​    <strong>通过File和Blob</strong></p><p>​    在H5的表单File控件中，通过files对象来获取一个<code>FileList</code> ，此列表对象中的每一个都是files对象</p><p>​    也可以通过H5的拖拽drop事件捕获到files对象或blob对象</p><p>​    <code>File</code>继承了<code>Blob</code>，并提供了<code>name</code>  ， <code>lastModifiedDate</code>， <code>size</code> ，<code>type</code> 等基础元数据</p><p>​    <code>Blob</code> 与<code>ArrayBuffer</code>的区别是除了 原始字节 以外它还提供了mime type作为元数据</p><p>​    它们都可以借助 FileReader将<code>Blob</code>读取为更为实用的数据类型去使用</p><pre class=" language-css"><code class="language-css"><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">readAsBinaryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>readAsData<span class="token url">URL()</span><span class="token function">readAsText</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="各种类型"><a href="#各种类型" class="headerlink" title="各种类型"></a>各种类型</h2><p>上节课中，我们讲过在火狐下拖拽元素需要用setData函数设置键值对，同时用getData函数可以获取key的value值，那么IE定义了 text和url 这两种有效的数据类型，可以获取本网页上文本和图片路径</p><blockquote><p>e.dataTransfer.getData(‘url’)    获取 url</p></blockquote><blockquote><p>e.dataTransfer.getData(‘Text’)        获取文本</p></blockquote><p>H5对此也支持，并扩展了各种 <code>MIME</code> 类型，这两种类型会被映射为 ‘text/plain’和’text/uri-list’</p><p>所以可以兼容一下:</p><pre class=" language-css"><code class="language-css">兼容var dataTransfer = e<span class="token number">.</span>dataTransfer获取 URLvar url = dataTransfer<span class="token number">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span> || dataTransfer<span class="token number">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'text/uri-list'</span><span class="token punctuation">)</span>获取 文本var url = dataTransfer<span class="token number">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'Text'</span><span class="token punctuation">)</span> || dataTransfer<span class="token number">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'text/plain'</span><span class="token punctuation">)</span></code></pre><pre class=" language-css"><code class="language-css">MIME 类型MIME <span class="token punctuation">(</span>Multipurpose Internet Mail Extensions<span class="token punctuation">)</span> 是描述消息内容类型的因特网标准。MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。不同的应用程序支持不同的 MIME 类型。MIME 类型大约有<span class="token number">191</span>种类型，是的没错，<span class="token number">191</span>种^<span class="token number">.</span>^</code></pre><pre class=" language-css"><code class="language-css">Base<span class="token number">64</span> 类型Base<span class="token number">64</span>是网络上最常见的用于传输<span class="token number">8</span>Bit字节码的编码方式之一，Base<span class="token number">64</span>就是一种基于<span class="token number">64</span>个可打印字符来表示二进制数据的方法Base<span class="token number">64</span>编码是从二进制到字符的过程中，可用于在HTTP环境下传递较长的标识信息</code></pre><p><strong>FileReader文件对象</strong></p><pre class=" language-css"><code class="language-css">FileReader API 用于读取文件，即把文件内容读入内存，是一种异步文件读取机制，它的参数是 File 对象或 Blob 对象。对于不同类型的文件，FileReader 提供不同的方法读取文件。</code></pre><pre class=" language-css"><code class="language-css">创建读取文件的对象var reader = new <span class="token function">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    readAsData<span class="token url">URL(Blob|File)</span> 读取文件并将文件以数据URI的形式保存在result属性中，返回一个基于 Base<span class="token number">64</span> 编码的 data-uri 对象reader<span class="token number">.</span>readAsData<span class="token url">URL(files[0])</span><span class="token function">readAsText</span><span class="token punctuation">(</span>Blob|File, opt_encoding<span class="token punctuation">)</span>返回文本字符串。默认情况下，文本编码格式是 UTF-<span class="token number">8</span>，可以通过可选的格式参数，指定其他编码格式的文本以纯文本形式读取文件，将读取到的文本保存在result属性中，第二个参数用于指定编码类型，可选的reader<span class="token number">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span> files[<span class="token number">0</span>],encoding <span class="token punctuation">)</span><span class="token function">readAsBinaryString</span><span class="token punctuation">(</span>Blob|File<span class="token punctuation">)</span>    IE可能不支持返回二进制字符串，该字符串每个字节包含一个 <span class="token number">0</span> 到 <span class="token number">255</span> 之间的整数。（已废弃）读取文件并将一个字符保存在result属性中，字符串的每个字符表示一字节reader<span class="token number">.</span><span class="token function">readAsBinaryString</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>Blob|File<span class="token punctuation">)</span>    IE可能不支持返回一个 ArrayBuffer 对象读取文件并将一个包含文件内容的ArrayBuffer保存在result属性中reader<span class="token number">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span></code></pre><h2 id="具体用法"><a href="#具体用法" class="headerlink" title="具体用法"></a>具体用法</h2><p><strong>FileList</strong> 对象 </p><p>​        当用户通过 <strong><em>file 控件</em></strong> 选取文件后，这个控件的 this.files 属性值就是 FileList 对象。是个<strong><em>类数组</em></strong>，带上multiple 属性用户可选取多个文件，否则只能选择一个元素。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">'file'</span> multiple id<span class="token operator">=</span><span class="token string">'oInput'</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    oInput<span class="token punctuation">.</span>onchange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>​        拖拽也可以获取  FileList 对象</p><pre class=" language-js"><code class="language-js">oInput<span class="token punctuation">.</span>ondrop <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> files <span class="token operator">=</span> e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>​        <em>在表单选择文件或者拖拽文件中，用户通过事件触发，只能被动地读取FileList 文件列表</em></p><p><strong>Blob</strong> 对象 </p><p>​        file对象的父类型是Blob对象， Blob对象代表了一段二进制数据，提供了一系列操作接口</p><p>​        生成 Blob 对象有两种方法：</p><blockquote><ul><li><input checked="" disabled="" type="checkbox"> 使用 Blob 构造函数</li><li><input checked="" disabled="" type="checkbox"> 另一种是对现有的 Blob 对象使用 slice 方法切出一部分</li></ul></blockquote><pre class=" language-js"><code class="language-js">Blob 构造函数，接受两个参数。第一个参数是一个包含实际数据的数组第二个参数是数据的类型这两个参数都不是必需的<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">]</span><span class="token keyword">var</span> Blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"type"</span> <span class="token punctuation">:</span> <span class="token string">"text/xml"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Blob<span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js">Blob 对象的 slice 方法，将二进制数据按照字节分块，返回一个新的 Blob 对象<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">]</span><span class="token keyword">var</span> Blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"type"</span> <span class="token punctuation">:</span> <span class="token string">"text/xml"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> newBlob <span class="token operator">=</span> Blob<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用在分片文件 ，后台接收把这些片段检验并组合一个文件</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newBlob<span class="token punctuation">)</span>Blob 对象有两个只读属性：size：二进制数据的大小，单位为字节。（文件上传时可以在前端判断文件大小是否合适）type：二进制数据的 MIME 类型，全部为小写，如果类型未知，则该值为空字符串。（文件上传时可以在前端判断文件类型是否合适）gbk编码：    数字字母 一字节 1KB<span class="token operator">=</span> <span class="token number">1024</span>字节 一中文汉字是 <span class="token number">2</span>字节UTF<span class="token number">-8</span>编码： 数字字母 一字节 1KB<span class="token operator">=</span> <span class="token number">1024</span>字节 一个中文汉字是 <span class="token number">3</span>字节</code></pre><p>​    <strong>Silce</strong> <em>读取部分内容</em></p><p>​        有时候我们读取一部分而不是全部内容，Filereader对象支持一个slice( )方法，在火狐中用mozSlice( )，在chrome中webkitSilde( )</p><pre class=" language-css"><code class="language-css">    > <span class="token function">silce</span><span class="token punctuation">(</span> start,end <span class="token punctuation">)</span>    >    > start 开始索引，默认为<span class="token number">0</span>    >    > end    截取结束索引（不包括end）    > contentType    新Blob的MIME类型，默认为空字符串</code></pre><p>​        这个方法返回一个Blob实例，Blog是File类型的父类型，Blog类型有一个size属性和一个type属性，它也支持slice方法，以便进一步切割数据，通过FileReader也可以从Blob中读取数据</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">blogSlice</span><span class="token punctuation">(</span> blob<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> blog<span class="token punctuation">.</span>slice <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> blob<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> blob<span class="token punctuation">.</span>webkitSlice <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> blob<span class="token punctuation">.</span><span class="token function">webkitSlice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> blob<span class="token punctuation">.</span>mozSlice <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> blob<span class="token punctuation">.</span><span class="token function">mozSlice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span>             <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    blob类型读取FileReader的20B内容 </p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token function">blogSlice</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span>reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span> blob <span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span> blob <span class="token punctuation">)</span><span class="token punctuation">{</span>       reader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        box<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'no data'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>​    只读取文件的一部分可以节省时间，非常适合只关注数据中某个特定部分（如文件文件）的情况</p><p>​    <strong>对象URL</strong>    </p><p>​        对象URL也被称为 blob URL，指的是引用保存在File或Blob中数据的URL，使用对象URL的好处是没必要把内容读取到js中，而直接使用文件内容，能生成一个链接，例如 Img的src = URL</p><p>​        创建对象URL，用 window.URL.createObjectURL( blob )方法，并传入flle或Blob对象，对二进制数据生成一个 临时的URL，这个 URL 可以放置于任何通常可以放置 URL 的地方，比如 img 标签的 src 属性，出于一些特殊的需要，也可以使URL失效，调用 URL.revokeObjectURL( url ) 方法，使 URL 失效</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createObject</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span> window<span class="token punctuation">.</span>URL <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> window<span class="token punctuation">.</span>webkitURL <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> window<span class="token punctuation">.</span>webkitURL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">null</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    createObject函数的返回值是一个字符串，指向一块<strong><em>内存地址</em></strong>。因为这个字符串是URL，所 以在DOM中也能使用，例如下用法 </p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span> url <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token regex">/image/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>         box<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;img src="'</span><span class="token operator">+</span>url<span class="token operator">+</span><span class="token string">'" />'</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'no img'</span> <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'no data'</span> <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>​    直接把对象URL放在img标签中，就省去了把数据先读取js中，另一方面img标签则会找到相应的内存地址，直接读取数据并将图像显示到页面中</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Buffer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebAudio API</title>
      <link href="/posts/3a3a.html"/>
      <url>/posts/3a3a.html</url>
      
        <content type="html"><![CDATA[<h1 id="webAudio-API"><a href="#webAudio-API" class="headerlink" title="webAudio  API"></a>webAudio  API</h1><blockquote><p>webAudio API接口可以用来实现音乐可视化、音频剪辑、修声、语音、去声等等强大的操作</p></blockquote><p>webAudioAPI接口关系图：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5d50eef100016c9212800720.jpg" alt=""></p><h2 id="AudioContext"><a href="#AudioContext" class="headerlink" title="AudioContext"></a>AudioContext</h2><blockquote><p>AudioContext是所有音频操作的前提，一个类似Canvas的ctx的上下文对象</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5d50eb23000143f212800720.jpg" alt=""></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>AudioContext <span class="token operator">||</span>  window<span class="token punctuation">.</span>webkitAudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>mozAudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>msAudioContext<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//由于API兼容性问题，需要在创建时加上后缀</span></code></pre><h2 id="AudioBufferSourceNode"><a href="#AudioBufferSourceNode" class="headerlink" title="AudioBufferSourceNode"></a>AudioBufferSourceNode</h2><blockquote><h3 id="创建音频源-方法（1）"><a href="#创建音频源-方法（1）" class="headerlink" title="创建音频源    方法（1）"></a>创建音频源    方法（1）</h3><p>这种方式是通过请求方式播放音乐</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5d50eea80001ad1a12800720.jpg" alt=""></p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>AudioContext <span class="token operator">||</span>  window<span class="token punctuation">.</span>webkitAudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>mozAudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>msAudioContext<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'./Kalimba.mp3'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过 fetch请求本地文件，返回样式设置为arraybuffer</span>        <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">{</span>            responseType<span class="token punctuation">:</span><span class="token string">'arraybuffer'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//将返回的数据转成arrayBuffer数据，并返回</span>          <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使用ac.decodeAudioData(arrayBuffer, succ(buffer), err)方法音频解码，获取成功后调用第一个回调并返回buffer解码数据，失败则调用最后个回调</span>            ac<span class="token punctuation">.</span><span class="token function">decodeAudioData</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//创建bufferSource</span>                <span class="token keyword">let</span> BufferSource <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">createBufferSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将返回的数据给它</span>                BufferSource<span class="token punctuation">.</span>buffer <span class="token operator">=</span> buffer<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//直接连接音频聚集地</span>                BufferSource<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>ac<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//开始播放</span>                BufferSource<span class="token punctuation">[</span>BufferSource<span class="token punctuation">.</span>start <span class="token operator">?</span> <span class="token string">'start'</span> <span class="token punctuation">:</span> <span class="token string">'noteOn'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="MediaElementAudioSourceNode"><a href="#MediaElementAudioSourceNode" class="headerlink" title="MediaElementAudioSourceNode"></a>MediaElementAudioSourceNode</h3><blockquote><p><strong>创建音频源  方法（2）</strong></p><p>这种方式是通过 DOM元素 播放音乐</p></blockquote><pre class=" language-js"><code class="language-js">    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"播放"</span> onclick<span class="token operator">=</span><span class="token string">'music.play()'</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">//点击播放音乐   </span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"停止"</span> onclick<span class="token operator">=</span><span class="token string">"music.pause()"</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//点击停止音乐</span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">var</span> ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>AudioContext <span class="token operator">||</span>  window<span class="token punctuation">.</span>webkitAudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>mozAudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>msAudioContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建音乐DOM元素</span>        <span class="token keyword">let</span> music <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span><span class="token string">'./Kalimba.mp3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过 DOM元素创建音频源</span>        <span class="token keyword">let</span> source <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">createMediaElementSource</span><span class="token punctuation">(</span>music<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//直接连接音频聚集地</span>        source<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>ac<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="使用input-type-file-创建-（可以本地获取）"><a href="#使用input-type-file-创建-（可以本地获取）" class="headerlink" title="使用input[type=file]创建 （可以本地获取）"></a>使用input[type=file]创建 （可以本地获取）</h3><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> audioCtx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">window<span class="token punctuation">.</span>AudioContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> audioInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"uploader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//HTML语句：&lt;input type="file" id="uploader" /></span>      audioInput<span class="token punctuation">.</span>onchange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//文件长度不为0则真的选中了文件，因为用户点击取消也会触发onchange事件。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>audioInput<span class="token punctuation">.</span>files<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          files <span class="token operator">=</span> audioInput<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//得到用户选取的文件 //文件选定之后，马上用FileReader进行读入</span>          fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          fr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> fileResult <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件读入完成，进行解码</span>            audioCtx<span class="token punctuation">.</span><span class="token function">decodeAudioData</span><span class="token punctuation">(</span>              fileResult<span class="token punctuation">,</span>              <span class="token keyword">function</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> source <span class="token operator">=</span> audioCtx<span class="token punctuation">.</span><span class="token function">createBufferSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                source<span class="token punctuation">.</span>buffer <span class="token operator">=</span> buffer<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将解码出来的数据放入source中 //转到播放和分析环节</span>                source<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>audioCtx<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>                source<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"!Fail to decode the file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解码出错</span>              <span class="token punctuation">}</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>          fr<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"!Fail to read the file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件读入出错</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>          fr<span class="token punctuation">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//同样的，ArrayBuffer方式读取</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="GainNode"><a href="#GainNode" class="headerlink" title="GainNode"></a>GainNode</h2><blockquote><p>gain是在音乐播放之前处理声音大小的中间件</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5d50efb100011b9612800718.jpg" alt=""></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/gain.PNG" alt=""></p><p>这里使用DOM元素方式来演示 ， 请求方式的设置也和它一样</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"播放"</span> onclick<span class="token operator">=</span><span class="token string">'music.play()'</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">//点击播放音乐   </span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"停止"</span> onclick<span class="token operator">=</span><span class="token string">"music.pause()"</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//点击停止音乐</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"range"</span> max<span class="token operator">=</span><span class="token string">"100"</span> min<span class="token operator">=</span><span class="token string">"0"</span> value<span class="token operator">=</span><span class="token string">"60"</span> oninput<span class="token operator">=</span><span class="token string">"setGain(this)"</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//控制音乐播放声音</span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">var</span> ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>AudioContext <span class="token operator">||</span>  window<span class="token punctuation">.</span>webkitAudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>mozAudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>msAudioContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建音乐DOM元素</span>        <span class="token keyword">let</span> music <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span><span class="token string">'./Kalimba.mp3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过 DOM元素创建音频源</span>        <span class="token keyword">let</span> source <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">createMediaElementSource</span><span class="token punctuation">(</span>music<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Gain连接destination</span>        <span class="token keyword">let</span> gain <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">createGain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gain<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>ac<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//必须连接Gain ， 不再是连接destination了，否则音频没有经过gain处理，效果不会生效</span>        source<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>gain<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置gain.gain.value 的值，跟随input的value改变，实现改变声音大小</span>        <span class="token keyword">function</span> <span class="token function">setGain</span><span class="token punctuation">(</span>that<span class="token punctuation">)</span>        <span class="token punctuation">{</span>               gain<span class="token punctuation">.</span>gain<span class="token punctuation">.</span>value <span class="token operator">=</span> that<span class="token punctuation">.</span>value<span class="token operator">/</span>that<span class="token punctuation">.</span>max<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="analyserNode"><a href="#analyserNode" class="headerlink" title="analyserNode"></a>analyserNode</h2><blockquote><p>这个节点可以实现音频的可视化，是一个可视化中必不可少的重要步骤</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5d50eff8000127e612800718.jpg" alt=""></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建Analyser</span><span class="token keyword">var</span> analyser <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">createAnalyser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置fftSize大小</span>analyser<span class="token punctuation">.</span>fftSize <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//链接destination Gain节点，随之Gain节点到终点去</span>analyser<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>gain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建Uint8Array数据，并运用frequencyBinCount 来获取fft的一半</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>analyser<span class="token punctuation">.</span>frequencyBinCount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//然后使用getByFrequencyData来获取范围频域</span>analyser<span class="token punctuation">.</span><span class="token function">getByteFrequencyData</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后配合Canvas和requestAnimationFrame(callback)动画函数来实现可视化;</span></code></pre><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>      <span class="token keyword">var</span> width <span class="token operator">=</span> ctx<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span>        height <span class="token operator">=</span> ctx<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>height<span class="token punctuation">;</span>      window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>        width <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>        <span class="token keyword">let</span> line <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">createLinearGradient</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>        line<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        line<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        line<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> line<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> line <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">createLinearGradient</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>      line<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      line<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      line<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> line<span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> w <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span>            w <span class="token operator">*</span> i<span class="token punctuation">,</span>            height <span class="token operator">-</span> <span class="token punctuation">(</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">*</span> height<span class="token punctuation">,</span>            <span class="token punctuation">(</span>width <span class="token operator">/</span> Data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.5</span><span class="token punctuation">,</span>            Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">var</span> ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>AudioContext <span class="token operator">||</span>        window<span class="token punctuation">.</span>webkitAudioContext <span class="token operator">||</span>        window<span class="token punctuation">.</span>mozAudioContext <span class="token operator">||</span>        window<span class="token punctuation">.</span>msAudioContext<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建gain 来控制声音大小</span>      <span class="token keyword">let</span> gain <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">createGain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//链接音频终点</span>      gain<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>ac<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建analyser 来实现可视化</span>      <span class="token keyword">let</span> analyser <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">createAnalyser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      analyser<span class="token punctuation">.</span>fftSize <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//链接gain</span>      analyser<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>gain<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取音乐数据</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"./music/Kalimba.mp3"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        responseType<span class="token punctuation">:</span> <span class="token string">"arraybuffer"</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          ac<span class="token punctuation">.</span><span class="token function">decodeAudioData</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> buffer <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> bufferSource <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">createBufferSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferSource<span class="token punctuation">.</span>buffer <span class="token operator">=</span> buffer<span class="token punctuation">;</span>            bufferSource<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>analyser<span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferSource<span class="token punctuation">[</span>bufferSource<span class="token punctuation">.</span>start <span class="token operator">?</span> <span class="token string">"start"</span> <span class="token punctuation">:</span> <span class="token string">"noteOn"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建数据</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>analyser<span class="token punctuation">.</span>frequencyBinCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解决各浏览器的兼容性问题</span>        requestAnimationFrame <span class="token operator">=</span>          window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span>          window<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span>          window<span class="token punctuation">.</span>mozRequestAnimationFrame<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建动画函数</span>        <span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//获取频域</span>          analyser<span class="token punctuation">.</span><span class="token function">getByteFrequencyData</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">draw</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//循环</span>          <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//启动动画函数</span>        <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">setGain</span><span class="token punctuation">(</span>that<span class="token punctuation">)</span> <span class="token punctuation">{</span>        gain<span class="token punctuation">.</span>gain<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">+</span>that<span class="token punctuation">.</span>value <span class="token operator">/</span> <span class="token operator">+</span>that<span class="token punctuation">.</span>max<span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐可视化 </tag>
            
            <tag> webAudio API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/posts/921d.html"/>
      <url>/posts/921d.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Ajax？"><a href="#什么是Ajax？" class="headerlink" title="什么是Ajax？"></a>什么是Ajax？</h1><blockquote><p>Ajax是一种可以与服务器交换数据并更新部分页面内容，同时可以在不让整个网页重新加载的情况下更新网页的一种技术</p></blockquote><h2 id="Ajax请求过程："><a href="#Ajax请求过程：" class="headerlink" title="Ajax请求过程："></a><strong>Ajax请求过程：</strong></h2><h5 id="1：创建一个异步对象"><a href="#1：创建一个异步对象" class="headerlink" title="1：创建一个异步对象"></a>1：创建一个异步对象</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2：设置请求方式和请求地址"><a href="#2：设置请求方式和请求地址" class="headerlink" title="2：设置请求方式和请求地址"></a>2：设置请求方式和请求地址</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*    参数顺序，描述    （1）method：请求的类型；GET 或 POST    （2）url：文件在服务器上的位置    （3）async：true（异步）或 false（同步） （一般为true，因ajax的精髓就是异步）*/</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET||POST"</span><span class="token punctuation">,</span><span class="token string">"url 如（./ajax.php）"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注意点：url中不能出现中文，只能数字、字母、ASCII码、下划线</span><span class="token comment" spellcheck="true">//  GET方式的 url格式：./ajax.php?t=123&amp;321......</span><span class="token comment" spellcheck="true">//如果出现中文也可以用encodeURIComponent方法转换</span><span class="token comment" spellcheck="true">//  POST方式的url不能在后面接字符串传递参数</span>xmlHttp<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//setRequestHeader 必须放在设置请求与发送请求之间</span><span class="token comment" spellcheck="true">//下一步在发送请求send中传递参数即可</span>xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"name=xuyuxin&amp;age=18"</span><span class="token punctuation">)</span></code></pre><h5 id="3：发送请求"><a href="#3：发送请求" class="headerlink" title="3：发送请求"></a>3：发送请求</h5><pre class=" language-javascript"><code class="language-javascript"> xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4-监听状态变化"><a href="#4-监听状态变化" class="headerlink" title="4.监听状态变化"></a>4.监听状态变化</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//监听事件： onreadystatechange 每当请求状态发生变化，就会触发此函数</span>xmlHttp<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ev2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    readyState 状态变化有以下5种    0：请求未初始化    1：服务器连接已建立    2：请求已接收    3：请求处理中    4：请求已完成，且响应已就绪*/</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//请求已完成，并不代表请求成功，因此还需判断是否请求成功</span>        <span class="token comment" spellcheck="true">//status是专门判断请求是否成功的状态码</span>        <span class="token comment" spellcheck="true">// 状态码大于或等于200并且不能超过300以上，300以上除了304以外全都是请求失败</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xmlHttp<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span> <span class="token operator">||</span> xmlHttp<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="http://baike.baidu.com/link?url=LarF3FUBzX-IU1BMZbwbxaC8oJPUSGOj3seQRNVSVbZ2F9A6BiE-Je0sxFwsQK8dFJkKH6VP_ghpK66p8C2Zvkdl9nABXBR8mIqZGJj_D59q6NJQwmw3GqjIx2bzAsEG" target="_blank" rel="noopener">http请求成功或失败状态码资料查询</a></p><h2 id="IE低版本浏览器兼容问题"><a href="#IE低版本浏览器兼容问题" class="headerlink" title="IE低版本浏览器兼容问题"></a>IE低版本浏览器兼容问题</h2><blockquote><p>由于在IE6-IE5以下不支持XMLHttpRequest这个属性，因此会产生错误，在低级浏览器中可以使用ActiveXObject来实现同样的效果</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>在IE低版本中ajax还有缓存的问题，解决这个问题，要url地址不断改变，不能为常量，即可解决</p></blockquote><pre class=" language-javascript"><code class="language-javascript">xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"ajax.php?"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span></code></pre><h2 id="解决兼容性通用方法"><a href="#解决兼容性通用方法" class="headerlink" title="解决兼容性通用方法"></a>解决兼容性通用方法</h2><blockquote><p>由于在Ajax中浏览器支持的属性不同，单一方案不能支持全部浏览器，有两种解决方案，因此可以把这两种方案合成一种，以便使用</p></blockquote><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRuquest<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>           <span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>    <span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> window<span class="token punctuation">.</span>XMLHttpRequest <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">new</span>                     <span class="token class-name">ActiveXOject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="封装Ajax"><a href="#封装Ajax" class="headerlink" title="封装Ajax"></a>封装Ajax</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {请求的类型}option.type * @param {发送请求的地址} option.url * @param {发送请求的数据}option.data * @param {超时时间} option.timeout * @param {请求成功后执行的函数*} option.sucess * @param {请求失败后执行的函数*} option.error */</span><span class="token keyword">function</span> <span class="token function">createAjax</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//0.把传入对象处理成字符串，服务器才可接收</span>  <span class="token keyword">var</span> toStringObj <span class="token operator">=</span> <span class="token function">objToString</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//1.创建ajax对象，并判断游览器支持那个属性</span>  <span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> window<span class="token punctuation">.</span>XMLHttpRequest    <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> timer<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token punctuation">.</span>type<span class="token punctuation">.</span>toloworCase <span class="token operator">===</span> <span class="token string">"get"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//2.设置请求方式和地址</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> option<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> toStringObj<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.发送请求</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.监听请求状态</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// POST请求方式</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>type<span class="token punctuation">,</span> option<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>      <span class="token string">"Content-type"</span><span class="token punctuation">,</span>      <span class="token string">"application/x-www-form-urlencoded"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>toStringObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  xmlHttp<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//请求完成，并不代表请求成功</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//判断请求是否成功</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xmlHttp<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span>        xmlHttp<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        option<span class="token punctuation">.</span><span class="token function">sucess</span><span class="token punctuation">(</span>xmlHttp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        option<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>xmlHttp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//判断外界是否传入超时时间</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>    timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//超时时间到后执行停止此次发送请求，默认为失败</span>      xmlHttp<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> option<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//把obj转为字符串</span><span class="token keyword">function</span> <span class="token function">objToString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//encodeURLComponent函数对，对象名和属性进行转换，以防出现url中不能出现的字符而出错</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用方式</span>    <span class="token function">createAjax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    data<span class="token punctuation">:</span><span class="token punctuation">{</span>                       name<span class="token punctuation">:</span> that<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    type<span class="token punctuation">:</span><span class="token string">"POST"</span><span class="token punctuation">,</span>                    timeout<span class="token punctuation">:</span><span class="token number">3000</span><span class="token punctuation">,</span>                    url<span class="token punctuation">:</span><span class="token string">"./ajaxLesson2.php"</span><span class="token punctuation">,</span>                    sucess<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">{</span>                         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    error<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>；</code></pre><h2 id="获取服务器响应数据方式"><a href="#获取服务器响应数据方式" class="headerlink" title="获取服务器响应数据方式"></a>获取服务器响应数据方式</h2><blockquote><ol><li>responseText 可以获取服务器以字符串形式返回的数据</li><li>responseXML 可以获取服务器以XML形式返回的数据</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//调用方式</span><span class="token comment" spellcheck="true">// ajax对象.要获取的方式</span>xmlHttp<span class="token punctuation">.</span>responseText</code></pre><h2 id="通过XML传输数据"><a href="#通过XML传输数据" class="headerlink" title="通过XML传输数据"></a>通过XML传输数据</h2><h4 id="XML数据基本格式"><a href="#XML数据基本格式" class="headerlink" title="XML数据基本格式"></a>XML数据基本格式</h4><p>​        1.开头前缀指定版本和编码（必要）</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span></code></pre><p>​        2.根目录（必要 和html标签一样要闭合）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><p>​        3.之后标签名不受限制，完整版</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nz</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>甜美女装<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>des</span><span class="token punctuation">></span></span>人见人爱,花间花开,甜美系列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>des</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span><span class="token punctuation">></span></span>images/1.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nz</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bb</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>奢华驴包<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>des</span><span class="token punctuation">></span></span>送女友,送情人,送学妹,一送一个准系列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>des</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span><span class="token punctuation">></span></span>images/2.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bb</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tx</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>键盘拖鞋<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>des</span><span class="token punctuation">></span></span>程序员专属拖鞋, 屌丝气息浓郁, 你值得拥有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>des</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span><span class="token punctuation">></span></span>images/3.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tx</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><h4 id="PHP基本XML配置格式"><a href="#PHP基本XML配置格式" class="headerlink" title="PHP基本XML配置格式"></a>PHP基本XML配置格式</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">//向客户端发送原始的 HTTP 报头。</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"content-type:text/xml;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//file_get_contents() 函数是用于将文件的内容读入到一个字符串中的首选方法。如果操作系统支持，还会使用    内存映射技术来增强性能。</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"xml文件地址如（./ajax.xml）"</span><span class="token punctuation">)</span>    <span class="token delimiter">?></span></code></pre><h4 id="Ajax获取XML数据格式"><a href="#Ajax获取XML数据格式" class="headerlink" title="Ajax获取XML数据格式"></a>Ajax获取XML数据格式</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//获取XML传输而来的数据要使用 responseXML方式获取</span><span class="token keyword">var</span> Data <span class="token operator">=</span> xml<span class="token punctuation">.</span>responseXML<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回的是一个document文档对象</span><span class="token comment" spellcheck="true">//接着使用javascript获取遍历DOM元素</span> <span class="token keyword">var</span> titleinfo <span class="token operator">=</span> Data<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">'>title'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> des <span class="token operator">=</span> Data<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">'>des'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> image <span class="token operator">=</span> Data<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">'>image'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后就可以对DOM里面存储的数据进行操作了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>des<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="通过JSON传输数据"><a href="#通过JSON传输数据" class="headerlink" title="通过JSON传输数据"></a>通过JSON传输数据</h2><blockquote><p><a href="https://baike.baidu.com/item/JSON/2462549?fr=aladdin" target="_blank" rel="noopener">JSON资料</a></p></blockquote><h4 id="JSON数据基本格式"><a href="#JSON数据基本格式" class="headerlink" title="JSON数据基本格式"></a>JSON数据基本格式</h4><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"nz"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"甜美女装"</span><span class="token punctuation">,</span>        <span class="token property">"des"</span><span class="token operator">:</span><span class="token string">"人见人爱,花间花开,甜美系列"</span><span class="token punctuation">,</span>        <span class="token property">"image"</span><span class="token operator">:</span><span class="token string">"./images/1.jpg"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"bb"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"奢华驴包"</span><span class="token punctuation">,</span>        <span class="token property">"des"</span><span class="token operator">:</span><span class="token string">"送女友,送情人,送学妹,一送一个准系列"</span><span class="token punctuation">,</span>        <span class="token property">"image"</span><span class="token operator">:</span><span class="token string">"./images/2.jpg"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"tx"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"键盘拖鞋"</span><span class="token punctuation">,</span>        <span class="token property">"des"</span><span class="token operator">:</span><span class="token string">"程序员专属拖鞋, 屌丝气息浓郁, 你值得拥有"</span><span class="token punctuation">,</span>        <span class="token property">"image"</span><span class="token operator">:</span><span class="token string">"./images/3.jpg"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>//在 JS 语言中，一切都是对象。因此，任何支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。但是对象和数组是比较特殊且常用的两种类型：//JSON 键/值对//JSON 键值对是用来保存 JS 对象的一种方式，和 JS 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 <span class="token string">""</span> 包裹，使用冒号 <span class="token operator">:</span> 分隔，然后紧接着值："<span class="token punctuation">{</span><span class="token property">"firstName"</span><span class="token operator">:</span> <span class="token string">"Json"</span><span class="token punctuation">}</span><span class="token string">"这很容易理解，等价于这条 JavaScript 语句：{firstName : "</span>Json"<span class="token punctuation">}</span>//JSON 与 JS 对象的关系//很多人搞不清楚 JSON 和 Js 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：//JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。//如<span class="token operator">:</span>var obj = <span class="token punctuation">{</span>a<span class="token operator">:</span> 'Hello'<span class="token punctuation">,</span> b<span class="token operator">:</span> 'World'<span class="token punctuation">}</span><span class="token punctuation">;</span> //这是一个对象，注意键名也是可以使用引号包裹的var json = '<span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token property">"b"</span><span class="token operator">:</span> <span class="token string">"World"</span><span class="token punctuation">}</span>'<span class="token punctuation">;</span> //这是一个 JSON 字符串，本质是一个字符串</code></pre><h4 id="JSON和JS对象互转"><a href="#JSON和JS对象互转" class="headerlink" title="JSON和JS对象互转"></a>JSON和JS对象互转</h4><pre class=" language-json"><code class="language-json">//要实现从JSON对象转换为JS字符串，使用 JSON.parse(<span class="token punctuation">)</span> 方法：var obj = JSON.parse('<span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token property">"b"</span><span class="token operator">:</span> <span class="token string">"World"</span><span class="token punctuation">}</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span> //结果是 <span class="token punctuation">{</span>a<span class="token operator">:</span> 'Hello'<span class="token punctuation">,</span> b<span class="token operator">:</span> 'World'<span class="token punctuation">}</span>//要实现从JS对象转换为JSON字符串，使用 JSON.stringify(<span class="token punctuation">)</span> 方法：var json = JSON.stringify(<span class="token punctuation">{</span>a<span class="token operator">:</span> 'Hello'<span class="token punctuation">,</span> b<span class="token operator">:</span> 'World'<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //结果是 '<span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token property">"b"</span><span class="token operator">:</span> <span class="token string">"World"</span><span class="token punctuation">}</span>'//当从服务器返回的数据不是标准json字符串时是无法使用parse的，那么可以试试用eval(<span class="token punctuation">)</span>强制转化和为js对象</code></pre><h4 id="非标准json转js对象"><a href="#非标准json转js对象" class="headerlink" title="非标准json转js对象"></a>非标准json转js对象</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//当从服务器返回的数据不是标准json字符串时是无法使用parse的，那么可以试试用eval()强制转化和为js对象</span><span class="token comment" spellcheck="true">//注意点： 转js对象必须加 "("+data+")"</span><span class="token keyword">var</span> Data <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token operator">+</span>data<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span></code></pre><h4 id="JSON兼容性问题"><a href="#JSON兼容性问题" class="headerlink" title="JSON兼容性问题"></a>JSON兼容性问题</h4><blockquote><p> 在低版本的IE中, 不可以使用原生的JSON.parse方法, 但是可以使用json2.js这个框架来兼容</p><p><a href="https://github.com/douglascrockford/JSON-js" target="_blank" rel="noopener">json2.js下载地址：</a></p></blockquote><h4 id="PHP基本JSON格式"><a href="#PHP基本JSON格式" class="headerlink" title="PHP基本JSON格式"></a>PHP基本JSON格式</h4><pre class=" language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">" JSON文件地址 如(./json.txt)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><blockquote><p>ajax的请求过程：ajax发送请求–浏览器–服务器</p><p>响应过程则是请求过程的颠倒</p><p>当ajax发送请求到浏览器，浏览器发送到服务器，处理并响应后，原路返回到浏览器，此时会验证其请求来源的域名跟发送请求时是否一样，是则过，否则会被浏览器截止并提示错误，这正是跨域所造成的，想要解决此问题，并不能从前端入手，应该从后端，只有在后端响应并返回后告诉浏览器是自己人即可。</p><p>那怎么告诉浏览器是自己人呢？ 只要设置其响应头部信息+（<strong>Access-Control-Allow-Origin</strong>：域名）告诉浏览器即可,允许多个、单个、全部 （*）。</p></blockquote><h3 id="PHP-方式"><a href="#PHP-方式" class="headerlink" title="PHP 方式"></a>PHP 方式</h3><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/*    1、允许单个域名访问*/</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin:(域名)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    2、允许多个域名访问*/</span>    <span class="token variable">$origin</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_ORIGIN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_ORIGIN'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$option</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token string">'域名1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">'域名2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$origin</span><span class="token punctuation">,</span><span class="token variable">$option</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin:$origin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    3、允许全部域名访问*/</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin:*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="node方式"><a href="#node方式" class="headerlink" title="node方式"></a>node方式</h3><pre><code>/*    1、允许单个域名访问*/    http.createServer(req,res)    {        res.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;（域名）&quot;);    }/*    2、允许多个域名访问*/        let option = [        (域名1),        (域名2),        ...    ];    http.createServer(req,res)    {      let {origin} =  req.headers;      let ori = option[&quot;origin&quot;] ? option[&quot;origin&quot;] ： null；      res.setHeader(&quot;Access-Control-Allow-Origin&quot;,ori);    }/*    3、允许全部域名访问*/    http.createServer(req,res)    {        res.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;*&quot;);    }</code></pre><h2 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h2><blockquote><p>FormData是ajax2.0新添加的功能，其作用是让表单也能异步发送</p></blockquote><h3 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//必须要new 一个FormData对象 参数是要应用的表单元素 </span><span class="token comment" spellcheck="true">//禁止表单默认行为</span><span class="token comment" spellcheck="true">//其请求方式、请求地址跟随表单元素</span><span class="token comment" spellcheck="true">//最后发送formdata对象即可</span><span class="token comment" spellcheck="true">//原生方式</span>         <span class="token keyword">let</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onsubmit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> formdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>method<span class="token punctuation">,</span>form<span class="token punctuation">.</span>action<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>formdata<span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span>          <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//jQuery方式 </span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"submit"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> formdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              url<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>action<span class="token punctuation">,</span>              type<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">,</span>              data<span class="token punctuation">:</span>formdata<span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//由于jq在发送请求时，会把请求数据自动处理为适合发送的数据格式，但是formdata对象本事就不用处理，系统识别会自动处理数据，如果被jq格式化后，数据就会出错，所以要关闭其数据格式化，以及发送的头部信息。</span>              processData<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>                  contentType<span class="token punctuation">:</span><span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果不使用表单提交，可以使用以下另门方式</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span> dir<span class="token operator">=</span><span class="token string">"ltr"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"div1"</span><span class="token operator">></span>      用户：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"user"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>      密码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> id<span class="token operator">=</span><span class="token string">"pass"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>      文件：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> id<span class="token operator">=</span><span class="token string">"f1"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>      <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"btn1"</span> type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"提交"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">let</span> oBtn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  oBtn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#pass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'f1'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#f1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token keyword">let</span> xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:8080/'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>formdata<span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><blockquote><p>fetch是官方用来解决原生js的ajax的繁杂步骤问题的一门新语法，大大简化了ajax操作，原理基于ajax</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// get txt</span> window<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> oBtn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      oBtn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.请求</span>        <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'data/1.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.解析</span>        <span class="token keyword">let</span> str<span class="token operator">=</span><span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//get json</span> window<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> oBtn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      oBtn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.请求</span>        <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'data/1.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.解析</span>        <span class="token keyword">let</span> json<span class="token operator">=</span><span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//get blod</span>window<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> oImg<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'img1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> oBtn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      oBtn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.请求</span>        <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'data/1.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.解析</span>        <span class="token keyword">let</span> data<span class="token operator">=</span><span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> url<span class="token operator">=</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        oImg<span class="token punctuation">.</span>src<span class="token operator">=</span>url<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> CORS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
