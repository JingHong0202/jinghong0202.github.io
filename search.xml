<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Chrome Devtools</title>
      <link href="/posts/c9c3.html"/>
      <url>/posts/c9c3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Chrome-Devtools-使用技巧"><a href="#Chrome-Devtools-使用技巧" class="headerlink" title="Chrome Devtools 使用技巧"></a>Chrome Devtools 使用技巧</h1><h2 id="1-网页可编辑"><a href="#1-网页可编辑" class="headerlink" title="1.网页可编辑"></a>1.网页可编辑</h2><p>(1)document.designMode = ‘on’<br>(2)打开任何网站，在网址栏输入:可手机端<br>javascdy.setAttribute(‘contentEditable’,’true’);</p><h2 id="2-chrome-网页全屏、元素截图"><a href="#2-chrome-网页全屏、元素截图" class="headerlink" title="2.chrome 网页全屏、元素截图"></a>2.chrome 网页全屏、元素截图</h2><p>（1）移动端 点击右上角三个点 里面的full即可全屏截图<br>（2）pc端 打开devtools ctrl+shift+p 打开命令行 输入full即可<br>（3） 截图单个元素  选择一个元素，MAC下按cmd+shift+p、windows下按ctrl+shift+p来打开命令菜单，然后输入Capture node screenshot</p><h2 id="3-条件断点"><a href="#3-条件断点" class="headerlink" title="3.条件断点"></a>3.条件断点</h2><p>（1）在断点的地方右键，选择“Edit breakpoint”就可以写上你想出现调试的条件表达式<br>（2）在sources面板 现在要断点的代码 ctrl+shift+e 在控制台运行当前选中的代码片段</p><h2 id="4-将修改后的CSS保存到文件"><a href="#4-将修改后的CSS保存到文件" class="headerlink" title="4.将修改后的CSS保存到文件"></a>4.将修改后的CSS保存到文件</h2><p>（1）点击你编辑的CSS文件的名称，进入到Sources面板，你会发现你的修改已经在里面了。然后你可以对你实时的编辑进行保存。<br>这个修改不适用于添加的新选择器，也不适用于element.style属性，仅仅适用于原有选择器。</p><h2 id="5-轻松获取某个审查元素的引用"><a href="#5-轻松获取某个审查元素的引用" class="headerlink" title="5.轻松获取某个审查元素的引用"></a>5.轻松获取某个审查元素的引用</h2><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/359230521-5daf0156210a6_articlex.gif" alt=""><br>（1）打开控制台，在 Elements 界面下，对着某个 dom 标签点击右键，选择 Store as global variable。</p><h2 id="6-创建并钉住一个动态表达式"><a href="#6-创建并钉住一个动态表达式" class="headerlink" title="6.创建并钉住一个动态表达式"></a>6.创建并钉住一个动态表达式</h2><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/3286822154-5daf0152c665f_articlex.gif" alt=""></p><h2 id="7-禁用缓存和保存日志"><a href="#7-禁用缓存和保存日志" class="headerlink" title="7.禁用缓存和保存日志"></a>7.禁用缓存和保存日志</h2><p>（1）缓存有时候会造成很多难以排查的 bug，为了排除这个因素，你可以勾选Network 界面下的 Disable cache 选项（它只在 DevTools 窗口打开时生效）。</p><h2 id="8-Chrome-Workspace"><a href="#8-Chrome-Workspace" class="headerlink" title="8.Chrome Workspace"></a>8.Chrome Workspace</h2><p>（1） 在sources面板中, 通过 Workspace，你可以把本地服务器的资源映射为硬盘上的文件，实现调试 JS 和 CSS 的同时自动保存文件，比如 Elements 面板中的样式变更会自动保存到文件中。</p>]]></content>
      
      
      <categories>
          
          <category> Front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome Devtools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5新特性</title>
      <link href="/posts/17f6.html"/>
      <url>/posts/17f6.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、H5拖拽"><a href="#一、H5拖拽" class="headerlink" title="一、H5拖拽"></a>一、H5拖拽</h2><p>JS里拖拽三事件， onmousedown onmousemove onmouseup 是实现交互性效果，根据鼠标的移动位置让标签元素联动</p><p>而H5拖拽也可以实现但更简单，实际例子： 百度图片识别，qq邮箱文件提交，百度网盘文件上传，并可以获取到文件的 名称，大小，修改时间</p><p>标签元素默认是不可以拖拽的，<code>draggable=&quot;true&quot;</code>才能够被拖拽</p><ul><li><code>js</code>和<code>h5</code>拖拽的对比    </li><li><code>drag</code>七事件的理解   <ul><li>只是简单的拖拽而没有数据交换是没有什么用的</li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 拖拽元素</span>        drag<span class="token punctuation">.</span>ondragstart <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 拖拽的一瞬间</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        drag<span class="token punctuation">.</span>ondrag <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 连续触发</span>            document<span class="token punctuation">.</span>title <span class="token operator">=</span> n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        drag<span class="token punctuation">.</span>ondragend <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 目标元素</span>        box<span class="token punctuation">.</span>ondragenter <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 监听拖拽元素进入到目标元素区域内</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'skyblue'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        box<span class="token punctuation">.</span>ondragover <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 在目标元素身上 连续触发</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        box<span class="token punctuation">.</span>ondragleave <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 在目标元素身上离开</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        box<span class="token punctuation">.</span>ondrop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 将拖动的元素放置在目标元素上时触发</span>        <span class="token punctuation">}</span></code></pre><ul><li><code>drag</code>兼容处理方式   </li><li>捕获<code>dataTransfer</code>对象里的数据</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> li <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>li<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    item<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'draggable'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token punctuation">.</span>ondragstart <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(e.dataTransfer.setData())</span>        e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>    e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>    e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span>    e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lastModified<span class="token punctuation">,</span>    e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lastModifiedDate<span class="token punctuation">.</span><span class="token function">toLocaleDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lastModifiedDate<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lastModifiedDate<span class="token punctuation">.</span><span class="token function">toDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p><code>Blog</code>对象与<code>URL</code>对象读取数据</p><p> Blob对象代表了一段二进制数据，提供了一系列操作接口  </p><pre><code>file对象的父类型是Blob对象</code></pre><p>​对象URL也被称为 blob URL，指的是引用保存在File或Blob中数据的URL，使用对象URL的好处是没必要把内容读取到js中，而直接使用文件内容，能生成一个链接，例如 Img的src = URL</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 拖拽图片预览</span>            <span class="token keyword">let</span> oFile <span class="token operator">=</span> e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>oFile<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第一参数一定是个数组 第二个mime类型</span>            <span class="token keyword">let</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            img<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>            img<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>            img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>            img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span></code></pre></li><li><p><code>FileReader</code>读取数据   </p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 拖拽图片预览</span>            <span class="token keyword">let</span> oFile <span class="token operator">=</span> e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建文件读取对象</span>            <span class="token keyword">let</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>oFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 分析oFile 文件对象</span>            reader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 返回data: base64数据  A-Z a-z 0~9 + / = 64位字符</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                img<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>                img<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>                img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">;</span>                img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span></code></pre></li></ul><ul><li><p>mime类型</p><pre><code>application/envoy    evyapplication/fractals    fifapplication/futuresplash    splapplication/hta    htaapplication/internet-property-stream    acxapplication/mac-binhex40    hqxapplication/msword    docapplication/msword    dotapplication/octet-stream    *application/octet-stream    binapplication/octet-stream    classapplication/octet-stream    dmsapplication/octet-stream    exeapplication/octet-stream    lhaapplication/octet-stream    lzhapplication/oda    odaapplication/olescript    axsapplication/pdf    pdfapplication/pics-rules    prfapplication/pkcs10    p10application/pkix-crl    crlapplication/postscript    aiapplication/postscript    epsapplication/postscript    psapplication/rtf    rtfapplication/set-payment-initiation    setpayapplication/set-registration-initiation    setregapplication/vnd.ms-excel    xlaapplication/vnd.ms-excel    xlcapplication/vnd.ms-excel    xlmapplication/vnd.ms-excel    xlsapplication/vnd.ms-excel    xltapplication/vnd.ms-excel    xlwapplication/vnd.ms-outlook    msgapplication/vnd.ms-pkicertstore    sstapplication/vnd.ms-pkiseccat    catapplication/vnd.ms-pkistl    stlapplication/vnd.ms-powerpoint    potapplication/vnd.ms-powerpoint    ppsapplication/vnd.ms-powerpoint    pptapplication/vnd.ms-project    mppapplication/vnd.ms-works    wcmapplication/vnd.ms-works    wdbapplication/vnd.ms-works    wksapplication/vnd.ms-works    wpsapplication/winhlp    hlpapplication/x-bcpio    bcpioapplication/x-cdf    cdfapplication/x-compress    zapplication/x-compressed    tgzapplication/x-cpio    cpioapplication/x-csh    cshapplication/x-director    dcrapplication/x-director    dirapplication/x-director    dxrapplication/x-dvi    dviapplication/x-gtar    gtarapplication/x-gzip    gzapplication/x-hdf    hdfapplication/x-internet-signup    insapplication/x-internet-signup    ispapplication/x-iphone    iiiapplication/x-javascript    jsapplication/x-latex    latexapplication/x-msaccess    mdbapplication/x-mscardfile    crdapplication/x-msclip    clpapplication/x-msdownload    dllapplication/x-msmediaview    m13application/x-msmediaview    m14application/x-msmediaview    mvbapplication/x-msmetafile    wmfapplication/x-msmoney    mnyapplication/x-mspublisher    pubapplication/x-msschedule    scdapplication/x-msterminal    trmapplication/x-mswrite    wriapplication/x-netcdf    cdfapplication/x-netcdf    ncapplication/x-perfmon    pmaapplication/x-perfmon    pmcapplication/x-perfmon    pmlapplication/x-perfmon    pmrapplication/x-perfmon    pmwapplication/x-pkcs12    p12application/x-pkcs12    pfxapplication/x-pkcs7-certificates    p7bapplication/x-pkcs7-certificates    spcapplication/x-pkcs7-certreqresp    p7rapplication/x-pkcs7-mime    p7capplication/x-pkcs7-mime    p7mapplication/x-pkcs7-signature    p7sapplication/x-sh    shapplication/x-shar    sharapplication/x-shockwave-flash    swfapplication/x-stuffit    sitapplication/x-sv4cpio    sv4cpioapplication/x-sv4crc    sv4crcapplication/x-tar    tarapplication/x-tcl    tclapplication/x-tex    texapplication/x-texinfo    texiapplication/x-texinfo    texinfoapplication/x-troff    roffapplication/x-troff    tapplication/x-troff    trapplication/x-troff-man    manapplication/x-troff-me    meapplication/x-troff-ms    msapplication/x-ustar    ustarapplication/x-wais-source    srcapplication/x-x509-ca-cert    cerapplication/x-x509-ca-cert    crtapplication/x-x509-ca-cert    derapplication/ynd.ms-pkipko    pkoapplication/zip    zipaudio/basic    auaudio/basic    sndaudio/mid    midaudio/mid    rmiaudio/mpeg    mp3audio/x-aiff    aifaudio/x-aiff    aifcaudio/x-aiff    aiffaudio/x-mpegurl    m3uaudio/x-pn-realaudio    raaudio/x-pn-realaudio    ramaudio/x-wav    wavimage/bmp    bmpimage/cis-cod    codimage/gif    gifimage/ief    iefimage/jpeg    jpeimage/jpeg    jpegimage/jpeg    jpgimage/pipeg    jfifimage/svg+xml    svgimage/tiff    tifimage/tiff    tiffimage/x-cmu-raster    rasimage/x-cmx    cmximage/x-icon    icoimage/x-portable-anymap    pnmimage/x-portable-bitmap    pbmimage/x-portable-graymap    pgmimage/x-portable-pixmap    ppmimage/x-rgb    rgbimage/x-xbitmap    xbmimage/x-xpixmap    xpmimage/x-xwindowdump    xwdmessage/rfc822    mhtmessage/rfc822    mhtmlmessage/rfc822    nwstext/css    csstext/h323    323text/html    htmtext/html    htmltext/html    stmtext/iuls    ulstext/plain    bastext/plain    ctext/plain    htext/plain    txttext/richtext    rtxtext/scriptlet    scttext/tab-separated-values    tsvtext/webviewhtml    htttext/x-component    htctext/x-setext    etxtext/x-vcard    vcfvideo/mpeg    mp2video/mpeg    mpavideo/mpeg    mpevideo/mpeg    mpegvideo/mpeg    mpgvideo/mpeg    mpv2video/quicktime    movvideo/quicktime    qtvideo/x-la-asf    lsfvideo/x-la-asf    lsxvideo/x-ms-asf    asfvideo/x-ms-asf    asrvideo/x-ms-asf    asxvideo/x-msvideo    avivideo/x-sgi-movie    moviex-world/x-vrml    flrx-world/x-vrml    vrmlx-world/x-vrml    wrlx-world/x-vrml    wrzx-world/x-vrml    xafx-world/x-vrml    xof</code></pre></li></ul><h2 id="二、新增方法及历史管理"><a href="#二、新增方法及历史管理" class="headerlink" title="二、新增方法及历史管理"></a>二、新增方法及历史管理</h2><ul><li>通过<code>classList</code>对象对<code>class</code>类名增删改查   </li><li>通过<code>dataset</code>对象对<code>data-Attr</code>格式的数据增删改查  </li><li><code>parse</code>与<code>stringify</code>函数对数据类型解析和编码类型</li><li><code>decodeURL</code>与<code>encodeURL</code>函数对url数据进行解码和编码</li><li><code>atob</code>与<code>btoa</code>函数对<code>base64</code>数据进行解码和编码</li><li><code>history</code>操作数据布局   </li><li><code>history</code>实现历史管理功能  </li><li><code>history</code>对象下的<code>back</code>-<code>forward</code>-<code>go</code>   </li></ul><h2 id="三、Ajax数据交互及文件上传功能"><a href="#三、Ajax数据交互及文件上传功能" class="headerlink" title="三、Ajax数据交互及文件上传功能"></a>三、Ajax数据交互及文件上传功能</h2><ul><li><p>文件下载方式</p></li><li><p><code>ajax</code>和<code>php</code>数据交互  </p></li><li><p>真实服务器数据交互演示及跨域访问  </p></li><li><p><code>jsonp</code>跨域访问的核心本质   </p></li><li><p><code>ajax</code> 和 <code>原生node</code> 数据交互</p></li><li><p><code>ajax</code> 和 <code>express框架</code> 数据交互</p></li><li><p><code>ajax</code> 和 <code>koa2框架</code> 数据交互</p></li><li><p>通过表单控件及<code>FormData</code>对象上传文件到服务器 </p></li><li><p>通过H5拖拽及<code>FormData</code>对象上传文件到服务器 </p></li><li><p>通过<code>onprogress</code>事件及<code>loaded</code>与<code>total</code>属性真实显示上传进度</p></li><li><p>同源同域名下跨文档操作</p></li></ul><h2 id="四、H5本地存储localStorage-webWorker多线程-Server-Sent-Event服务器发送事件-离线存储cache应用"><a href="#四、H5本地存储localStorage-webWorker多线程-Server-Sent-Event服务器发送事件-离线存储cache应用" class="headerlink" title="四、H5本地存储localStorage-webWorker多线程-Server-Sent-Event服务器发送事件-离线存储cache应用"></a>四、H5本地存储localStorage-webWorker多线程-Server-Sent-Event服务器发送事件-离线存储cache应用</h2><ul><li><code>setItem</code>与<code>getItem</code>存储和获取数据</li><li><code>webWorker</code>多线程原理    </li><li>SSE 服务器消息推送</li><li>真实服务器演示 <code>cache离线存储设计</code></li></ul><pre><code>var source=new EventSource(&quot;demo_sse.php&quot;);source.onmessage=function(event)  {  document.getElementById(&quot;result&quot;).innerHTML+=event.data + &quot;&lt;br /&gt;&quot;;  };  &lt;?phpheader(&#39;Content-Type: text/event-stream&#39;);header(&#39;Cache-Control: no-cache&#39;);$time = date(&#39;r&#39;);echo &quot;data: The server time is: {$time}\n\n&quot;;flush();    //刷新缓冲区的内容,输出?&gt;</code></pre><h2 id="五、canvas-技术"><a href="#五、canvas-技术" class="headerlink" title="五、canvas 技术"></a>五、canvas 技术</h2><ul><li>canvas认识</li><li>4种矩形用法</li><li>样式属性</li><li>线条函数</li><li>路径问题</li><li>边界和端点样式</li><li>圆形函数用法</li><li>变换函数用法</li><li>保存和释放路径</li><li>图片绘制<ul><li>视频绘制</li><li>填充背景方式</li><li>线性渐变</li><li>径向渐变</li><li>曲线函数</li><li>贝赛尔曲线画法</li><li>绘制文字</li><li>时钟表盘数字算法</li><li>图形阴影</li><li>像素操作</li><li>处理图片像素</li><li>图像合成</li><li>canvas画面导出</li></ul></li></ul><h2 id="七、video和audio"><a href="#七、video和audio" class="headerlink" title="七、video和audio"></a>七、video和audio</h2><ul><li>视频格式和音频格式</li></ul><ul><li>标签属性<ul><li>src</li><li>autoplay</li><li>controls</li><li>width</li><li>height</li><li>loop</li><li>preload</li><li>poster</li></ul></li></ul><ul><li>方法<ul><li>play( )</li><li>pause( )</li></ul><ul><li>事件</li><li>onplay</li><li>onpause</li><li>ontimeupdate</li><li>onended</li><li>progress</li><li></li><li>属性</li><li>currentTime</li><li>duration</li><li>ended</li><li>volume</li><li>height</li><li>width</li><li>currentSrc</li><li>videoWidth</li><li>videoHeight</li></ul></li></ul><h2 id="八、地理位置信息与高德地图API"><a href="#八、地理位置信息与高德地图API" class="headerlink" title="八、地理位置信息与高德地图API"></a>八、地理位置信息与高德地图API</h2><ul><li>原生API经纬度获取</li><li>高德地图JS-API调用</li></ul><h2 id="九、移动端"><a href="#九、移动端" class="headerlink" title="九、移动端"></a>九、移动端</h2><ul><li>移动端事件<ul><li>搭建真机测试</li><li>触屏三事件<ul><li>touchstart</li><li>touchmove</li><li>touchend</li></ul></li><li>手指信息对象</li></ul></li><li>三种适配方案<ul><li>百分比</li><li>自适应</li><li>rem</li><li>less语法及编译</li></ul></li></ul><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> Front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> H5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/posts/33ad.html"/>
      <url>/posts/33ad.html</url>
      
        <content type="html"><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a><strong>ES6</strong></h1><h2 id="变量声明扩展"><a href="#变量声明扩展" class="headerlink" title="变量声明扩展"></a>变量声明扩展</h2><h3 id="变量声明的特性比较"><a href="#变量声明的特性比较" class="headerlink" title="变量声明的特性比较"></a>变量声明的特性比较</h3><hr><table><thead><tr><th align="center">语法格式</th><th align="center">声明类型</th><th align="center">是否可重复声明</th><th align="center">是否声明提升</th><th align="center">特性</th></tr></thead><tbody><tr><td align="center">var</td><td align="center">变量</td><td align="center">YES</td><td align="center">YES</td><td align="center">无块级作用域、限制性太弱</td></tr><tr><td align="center">let</td><td align="center">变量</td><td align="center">NO</td><td align="center">NO</td><td align="center">有块级作用域、不可重复、无声明提升、限制性强</td></tr><tr><td align="center">const</td><td align="center">常量</td><td align="center">NO</td><td align="center">NO</td><td align="center">不可修改、有块级作用域、限制性强</td></tr></tbody></table><hr><h3 id="块级作用域："><a href="#块级作用域：" class="headerlink" title="块级作用域："></a>块级作用域：</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> a3 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在括号内使用即可正常使用、由内向外、不可从外向内</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//20</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//20</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//或</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在以上带{}语法中用let、const声明时都具有块级作用域</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ERROR</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ERROR</span></code></pre><h3 id="暂时性死区："><a href="#暂时性死区：" class="headerlink" title="暂时性死区："></a>暂时性死区：</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//由于let和const 无变量提升，在声明前调用将会出错 var 会出现undefined，不会报错</span><span class="token comment" spellcheck="true">//未被let、const声明的变量、执行操作反而没事，而使用了这两者未在规定的范围内使用将会直接出错。</span><span class="token keyword">var</span> STR <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>STR<span class="token punctuation">)</span>            <span class="token keyword">let</span> STR<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//去掉这句，即可正常执行</span>        <span class="token punctuation">}</span></code></pre><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>语法格式：</p><ol><li>左右两边类型相同、一样。</li><li>右边必须是个可使用的东西或者是容器，不一定要相同的格数</li><li>若相同可简写，注意区分</li><li>右边可设置默认值</li><li>可嵌套 如：数组、对象</li></ol><hr><p>用法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//解构不一定要相同</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"string"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//若相同可简写，注意区分</span><span class="token punctuation">{</span>m<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>m<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于</span><span class="token punctuation">{</span>m<span class="token punctuation">:</span>m<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>m<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可默认值</span><span class="token punctuation">{</span>j<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">}</span><span class="token operator">=</span><span class="token punctuation">{</span>c<span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出 {j:200,b:299,c:300};</span><span class="token comment" spellcheck="true">//在一些传参发面时可以使用以下这种方法</span><span class="token punctuation">{</span>type<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">,</span>dataType<span class="token operator">=</span><span class="token string">'json'</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//没传参 默认使用对应的参数</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>type<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">,</span>dataType<span class="token operator">=</span><span class="token string">'json'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没传对象时使用默认的对象</span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><hr><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ol><li>可以固定this的指向</li><li>语法格式比较与ES5时有一定的改变和缩简</li><li>在特定情况可以极大缩简</li></ol><hr><p>语法格式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> f1 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//特定情况:指当参数和执行语句只有一条时即可</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token operator">></span>a<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">let</span> f2 <span class="token operator">=</span> a<span class="token operator">=</span><span class="token operator">></span>a<span class="token punctuation">;</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><h2 id="扩展运算符-参数展开"><a href="#扩展运算符-参数展开" class="headerlink" title="扩展运算符(参数展开)"></a>扩展运算符(参数展开)</h2><ol><li>用于函数参数、数组、对象、对多个变量操作时</li><li>参数使用时必须放在最后</li><li>可以连接数组</li><li>当连接合成时，名相同的，将被最后个替换合并</li><li>作用：当不知道有多少个参数时，可以使用像数组一样，的传入参数</li></ol><p>语法格式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ...变量名</span><span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> a2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> a1A2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>a1<span class="token punctuation">,</span><span class="token operator">...</span>a2<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数组连接</span><span class="token keyword">let</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>        a2<span class="token punctuation">:</span><span class="token number">3</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span>        c<span class="token punctuation">:</span><span class="token number">3</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> os <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>a1<span class="token punctuation">,</span>        <span class="token operator">...</span>o1    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//对象合并 相同的属性将被最后的替换合并</span></code></pre><h2 id="系统自带对象方法扩展"><a href="#系统自带对象方法扩展" class="headerlink" title="系统自带对象方法扩展"></a>系统自带对象方法扩展</h2><h3 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h3><ul><li><p>map</p></li><li><p>forEach</p></li><li><p>filter</p></li><li><p>reduce</p></li></ul><h3 id="map语法格式："><a href="#map语法格式：" class="headerlink" title="map语法格式："></a><strong>map语法格式：</strong></h3><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">//参数 Array.map((item，index)=>{}) 当前值，索引</span>  <span class="token comment" spellcheck="true">//return 新数组</span>  <span class="token comment" spellcheck="true">// 作用：1对1执行代码快 简称映射</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">return</span> item <span class="token operator">>=</span> <span class="token number">5</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[false,false,false,false,true]</span></code></pre><p>  <strong>forEach语法格式：</strong></p><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">//参数 Array.forEach((item,index,array)=>{}) 当前值，索引，当前数组</span>  <span class="token comment" spellcheck="true">//retrun 无</span>  <span class="token comment" spellcheck="true">//作用：跟ES5的foreach一样都是遍历数组</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="filter语法格式："><a href="#filter语法格式：" class="headerlink" title="filter语法格式："></a><strong>filter语法格式：</strong></h3><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">//参数Array.filter((item)=>{}) 当前值 </span>  <span class="token comment" spellcheck="true">//retrun 过滤后的数组</span>  <span class="token comment" spellcheck="true">//作用：过滤</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//过滤条件</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[4,5]</span></code></pre><h3 id="roduce语法格式："><a href="#roduce语法格式：" class="headerlink" title="roduce语法格式："></a>roduce语法格式：</h3><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">//参数Array.roduce((tmp,item,index)=>{}) 临时值（中间值）,当前值 ,索引</span>  <span class="token comment" spellcheck="true">//retrun 处理后只有一个变量的数组</span>  <span class="token comment" spellcheck="true">//作用：多对1 可以用来求平均值、某项数据</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">roduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>       <span class="token keyword">return</span> index <span class="token operator">===</span> arr<span class="token punctuation">.</span>length<span class="token number">-1</span> <span class="token operator">?</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span>item<span class="token punctuation">)</span><span class="token operator">/</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">:</span> tmp<span class="token operator">+</span><span class="token operator">=</span>item<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><ul><li>字符串模板</li><li>startsWith</li><li>endsWith</li></ul><p>字符串模板使用方式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//字符串模板`${a}和${b}` 按此格式里面的变量会被识别</span></code></pre><p>startsWith和endsWith 语法格式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//参数 String.starts\ends With(str) 字符串</span><span class="token comment" spellcheck="true">// return boolean</span><span class="token comment" spellcheck="true">//作用：字符串检索 starts 开头 ends结尾 可以多个字符</span>str <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"https://"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><h2 id="新增数据类型"><a href="#新增数据类型" class="headerlink" title="新增数据类型"></a>新增数据类型</h2><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>作用：作为对象（唯一不重复）属性名、唯一的值…….等</p><p>声明语法格式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Symbol由Symbol函数生成，不需要new 参数：是一个描述 ，生成一模一样Symbol，其返回值不相等 可以转字符串、布尔，不能转数值</span><span class="token comment" spellcheck="true">//其作用可以用来生成独一无二的属性名、函数名等</span><span class="token comment" spellcheck="true">//注意：再用Symbol生成对象属性名时 属性名格式不能用 . 而是用[content]，访问Symbol的属性名必须用[];</span><span class="token keyword">let</span> attr <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"Arak"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> fun <span class="token operator">=</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token string">"attr"</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">1000</span>    <span class="token punctuation">[</span><span class="token string">"fun"</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>；obj<span class="token punctuation">[</span><span class="token string">'attr'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 1000</span>obj<span class="token punctuation">.</span>attr<span class="token comment" spellcheck="true">//undefined</span><span class="token comment" spellcheck="true">//获取方式还可以用以下方法</span><span class="token comment" spellcheck="true">//获取对象属性的两种方法</span><span class="token comment" spellcheck="true">//Object.getOwnPropertySymbols()方法</span><span class="token comment" spellcheck="true">//返回只包含Symbol类型的属性名的数组</span><span class="token comment" spellcheck="true">//Object.getOwnPropertyNames()方法</span><span class="token comment" spellcheck="true">//返回只包含字符串类型的属性名的数组</span><span class="token comment" spellcheck="true">//Symbol.for()和Symbol.keyFor()方法</span><span class="token comment" spellcheck="true">//Symbol.for()类似于单例模式，首先在全局中搜索有没有以该参数为名称的Symbol值，如果有则返回该Symbol值，否则新建并返回一个以该参数为名称的Symbol值</span><span class="token keyword">var</span> symbol1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> symbol2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbol1 <span class="token operator">===</span> symbol2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出：true</span><span class="token comment" spellcheck="true">//Symbol.keyFor()返回一个已创建的Symbol类型值的key，实质是检测该Symbol是否已创建。</span><span class="token keyword">var</span> symbol1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>symbol1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出："Alice"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>symbol2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：undefined</span></code></pre><h2 id="兼容性解决"><a href="#兼容性解决" class="headerlink" title="兼容性解决"></a>兼容性解决</h2><p>由于ES6在一些低版本的浏览器上无法运行，需转成ES5之前的版本兼容，以下有几种方案可以自动转换</p><h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><p>使用方法：</p><p>1.导入方式</p><pre><code>需下载babel的browser.min.js包  在官网下载即可导入页面，然后在需转换的script标签上 加 type=&quot;text/babel&quot; 即可自动转换</code></pre><p>2.编译方式（推荐）</p><pre><code>安装node.js  进入cmd到要编译的目录 cd符号进入  输入 npm init-y 调出node配置文件          输入 npm i @babel/core @babel/cli @babel/preset-env 安装babel  package.json =&gt; scripts中添加脚本 &quot;test&quot;:&quot;babel js -d dest&quot;                                    名 要编译的文件目录  存放文件的目录  添加.babelrc文件——声明preset 格式为：{   &quot;preset&quot;:[&quot;@babel/preset-env&quot;]  }  执行命令：nmp run test（package中scripts名设置的什么就是什么）</code></pre><h2 id="ES6对象"><a href="#ES6对象" class="headerlink" title="ES6对象"></a>ES6对象</h2><p>面向对象<br>机器语言 -&gt; 汇编 -&gt; 低级语言(面向过程) -&gt; 高级语言(面向对象) -&gt; 模块 -&gt; 框架 -&gt; API</p><p>面向对象：<br>1.封装性<br>2.继承性<br>3.多态性</p><hr><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>ES6类的添加可以覆盖之前构造函数传统的方式，更便捷，更系统</p><p>注意的是：以前<strong>proto</strong>只能访问不能修改，ES6后可修改指向也可访问</p><p>关于类的关键字和方法</p><ul><li>class 类</li><li>constructor  构造函数</li><li>extends  继承</li><li>super（）  替代之前借用构造函数来初始化继承的函数</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>   <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>age<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="闭包理解"><a href="#闭包理解" class="headerlink" title="闭包理解"></a>闭包理解</h2><p>首先，我们所声明的变量，都是在运行完程序后自动执行垃圾回收，如果某个变量正在使用未释放，那么这个变量的生命周期将会延长，也就达成了闭包的条件，这里的例子用了（垃圾回收）来更好的理解闭包。</p><h3 id="GC-垃圾回收"><a href="#GC-垃圾回收" class="headerlink" title="GC: 垃圾回收"></a>GC: 垃圾回收</h3><h6 id="闭包："><a href="#闭包：" class="headerlink" title="闭包："></a>闭包：</h6><ul><li>1.底层：栈</li><li>2.高层：<strong>函数当作对象处理</strong></li></ul><p>闭包—— 只要还在用就不会被回收</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>局部变量i在执行完成后就删除了，但是function函数里在使用i，所以i不会被回收，循环多少次产生多少i</p><h2 id="异步与同步"><a href="#异步与同步" class="headerlink" title="异步与同步"></a>异步与同步</h2><p>异步——多个操作可以一起进行，互不干扰<br>同步——操作一个个进行</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise 是异步编程的一种解决方案，其实是一个构造函数，自己身上有all、reject、resolve这几个方法，原型上有then、catch等方法。</p><p>Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p><p><a href="参考链接">https://blog.csdn.net/qq_34645412/article/details/81170576</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">rePromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reslove<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//resolve是对promise成功时候的回调 reject则是失败</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回Promise对象</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**reject的用法以上是对promise的resolve用法进行了解释，相当于resolve是对promise成功时候的回调，它把promise的状态修改为fullfiled，那么，reject就是失败的时候的回调，他把promise的状态修改为rejected，这样我们在then中就能捕捉到，然后执行“失败”情况的回调。rePromise()**/</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//then同样有对成功失败时的反应</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>reject<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>   <span class="token comment" spellcheck="true">//异步方法 </span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//all接受一组数组，里面一般装异步函数代码快，</span><span class="token comment" spellcheck="true">//随机数案例 满足条件则继续向下执行，失败则停止或执行失败专有的线路</span><span class="token comment" spellcheck="true">//只有all里面的所有方法执行成功后，才会继续执行then参数中的resolve，一当里面一个方法错误，那将会执行参数中的reject</span><span class="token keyword">function</span> <span class="token function">promiseClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">var</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成1-10的随机数</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'随机数生成的值：'</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'数字太于10了即将执行失败回调'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span>           <span class="token keyword">return</span> p       <span class="token punctuation">}</span>    <span class="token function">promiseClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolved成功回调'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功回调接受的值：'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token keyword">function</span><span class="token punctuation">(</span>reason<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rejected失败回调'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败执行回调抛出失败原因：'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>随机数案例结果图：</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/20180725094633828.png" alt=""></p><h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><p>async 异步</p><p>await 同步</p><p>两者结合即可以同步的方式执行异步操作</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//这种情况一般用在需要上一步返回的数据来继续执行下面的操作</span><span class="token comment" spellcheck="true">//语法格式：</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token comment" spellcheck="true">//await只能在有async装饰下才能使用</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token string">"loding"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*自动将常规函数转换成Promise，返回值也是一个Promise对象只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数异步函数内部可以使用await*/</span></code></pre><h2 id="第6章-ES6语法及JS语言的其他特性"><a href="#第6章-ES6语法及JS语言的其他特性" class="headerlink" title="第6章 ES6语法及JS语言的其他特性"></a>第6章 ES6语法及JS语言的其他特性</h2><h3 id="6-0-ECMAScript的变迁"><a href="#6-0-ECMAScript的变迁" class="headerlink" title="6.0 ECMAScript的变迁"></a>6.0 ECMAScript的变迁</h3><p>ECMAScript 1.0（1997年）</p><p>ECMAScript 2.0（1998年）</p><p>ECMAScript 3.0（1999年12月）</p><p>ECMAScript 4.0 (太激进,夭折了)</p><p>ECMAScript 5.0 (2009) </p><p>ECMAScript 6.0 (2015) </p><p>3.0版是一个巨大的成功，在业界得到广泛支持，成为通行标准，奠定了JavaScript语言的基本语法，以后的版本完全继承。<br>直到今天，初学者一开始学习JavaScript，其实就是在学3.0版的语法。<br>5.0版和3.0版区别不大。</p><p>随着JS的崛起,应用于移动开发,后端开发,游戏开发等,业界对JS的语言的要求越来越高.<br>此时再看4.0时提出的设想,已经不显得激进了.于是,6.0版本终于通过了.</p><p>此标准严格的叫法应是<code>ECMAScript2015</code>,当然叫<code>ES6</code>也没啥,没人和你抬杠.</p><p>ESMAScript 与 JavaScript 两者的关系, 就如同 <em>快捷宾馆营业标准</em> 和 <em>如家酒店</em> 一样.</p><p><strong>浏览器支持情况</strong></p><p><a href="http://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener">http://kangax.github.io/compat-table/es6/</a></p><h3 id="6-1-变量的声明"><a href="#6-1-变量的声明" class="headerlink" title="6.1 变量的声明"></a>6.1 变量的声明</h3><h4 id="6-1-1-let-块级证明"><a href="#6-1-1-let-块级证明" class="headerlink" title="6.1.1 let 块级证明"></a>6.1.1 let 块级证明</h4><p>ES6 新增了<code>let</code>命令，用来声明变量。</p><p>它的用法类似于<code>var</code>，但是所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p><p>看下例:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 相同的效果</span></code></pre><p>再看下例:</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//ReferenceError: c is not defined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// world</span></code></pre><p>可以看出: <code>let</code>命令在定义的<code>{}</code>内生效,某些语言也有类似特点，我们将其称为”块级作用域”.</p><p>这样,<code>let</code>定义的变量,只在块内生效,不影响其他区域,所以我们说Ta更 “清洁”.</p><p>在某些场合下,用<code>let</code>特别适合,比如<code>for()</code>循环</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 设置i仅为循环数组,但循环后,残留一个变量i.</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span> <span class="token punctuation">,</span> <span class="token string">'b'</span> <span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><p>换成<code>let</code>再试一下,是不是更清洁?</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// i变量只在for()内有效,不污染其他区域</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span> <span class="token punctuation">,</span> <span class="token string">'b'</span> <span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: i is not defined</span></code></pre><p>不污染全局的window属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>d<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span>window<span class="token punctuation">.</span>c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//hello</span></code></pre><p>注:同域下,var ,let 声明同一变量名,error</p><blockquote><p>let 申明的变量不存在变量提升 </p><p>let 申明的变量不允许重复声明</p><p>let 申明的变量存在块级作用域</p></blockquote><h4 id="6-1-2-const-常量"><a href="#6-1-2-const-常量" class="headerlink" title="6.1.2 const 常量"></a>6.1.2 const 常量</h4><p>常量并不稀奇 (话外音：都21世纪了，你咋现在才有?)<br>PHP,Java,C,C++ …多数语言都有常量.</p><p><code>const</code> 声明一个只读的常量。一旦声明，常量的值就不能改变。</p><p>常量,即不可改变其值的量.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 一旦声明值不可修改</span>PI <span class="token operator">=</span> <span class="token number">3.15</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TypeError: Assignment to constant variable.</span><span class="token comment" spellcheck="true">// 不可重复声明</span><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.15</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Identifier 'PI' has already been declare</span><span class="token comment" spellcheck="true">// 因为声明后值不能修改，所以声明必须赋值</span><span class="token keyword">const</span> c <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Missing initializer in const declaration</span></code></pre><p>注:常量名和变量名,都区分大小写</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> STU <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'lucy'</span> <span class="token punctuation">,</span> age <span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>STU<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'lucy', age: 22 }</span>STU<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'lily'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>STU<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'lily', age: 22 }</span></code></pre><p>注：常量不可改变的是其引用地址；</p><h3 id="6-2-模板字符"><a href="#6-2-模板字符" class="headerlink" title="6.2 模板字符"></a>6.2 模板字符</h3><p>ES6用反引号 <strong>( ` )</strong>  包住字符串,可以让字符串多行书写,也可以自由的嵌入变量.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'world'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'李四'</span><span class="token punctuation">}</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hello</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> , </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token number">9</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> , </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token string">'ok'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,这是个换行`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// hello李四 world , 16 , ok,</span><span class="token comment" spellcheck="true">// 这是个换行</span></code></pre><h3 id="6-3-变量的解构赋值"><a href="#6-3-变量的解构赋值" class="headerlink" title="6.3 变量的解构赋值"></a>6.3 变量的解构赋值</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p><p>字符串解构赋值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>a <span class="token comment" spellcheck="true">// "h"</span>b <span class="token comment" spellcheck="true">// "e"</span>c <span class="token comment" spellcheck="true">// "l"</span>d <span class="token comment" spellcheck="true">// "l"</span>e <span class="token comment" spellcheck="true">// "o"</span></code></pre><h4 id="6-3-1-数组的解构赋值"><a href="#6-3-1-数组的解构赋值" class="headerlink" title="6.3.1 数组的解构赋值"></a>6.3.1 数组的解构赋值</h4><p>以前，为变量赋值，只能直接指定值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ES6允许写成下面这样。</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。</p><p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>foo<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>bar<span class="token punctuation">]</span><span class="token punctuation">,</span> baz<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>foo <span class="token comment" spellcheck="true">// 1</span>bar <span class="token comment" spellcheck="true">// 2</span>baz <span class="token comment" spellcheck="true">// 3</span><span class="token keyword">let</span> <span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> third<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token string">"baz"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>third <span class="token comment" spellcheck="true">// "baz"</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token comment" spellcheck="true">// 1</span>y <span class="token comment" spellcheck="true">// 3</span><span class="token keyword">let</span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>head <span class="token comment" spellcheck="true">// 1</span>tail <span class="token comment" spellcheck="true">// [2, 3, 4]</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">...</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token comment" spellcheck="true">// "a"</span>y <span class="token comment" spellcheck="true">// undefined</span>z <span class="token comment" spellcheck="true">// []</span></code></pre><h4 id="6-3-2-对象的解构赋值"><a href="#6-3-2-对象的解构赋值" class="headerlink" title="6.3.2 对象的解构赋值"></a>6.3.2 对象的解构赋值</h4><p>解构不仅可以用于数组，还可以用于对象。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token string">"bbb"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>foo <span class="token comment" spellcheck="true">// "aaa"</span>bar <span class="token comment" spellcheck="true">// "bbb"</span></code></pre><p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">{</span> bar<span class="token punctuation">,</span> foo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token string">"bbb"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>foo <span class="token comment" spellcheck="true">// "aaa"</span>bar <span class="token comment" spellcheck="true">// "bbb"</span><span class="token keyword">let</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token string">"bbb"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>name <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于<code>undefined</code>。</p><h3 id="6-4-对象的扩展"><a href="#6-4-对象的扩展" class="headerlink" title="6.4 对象的扩展"></a>6.4 对象的扩展</h3><h4 id="6-4-1-属性的简洁表示法"><a href="#6-4-1-属性的简洁表示法" class="headerlink" title="6.4.1 属性的简洁表示法"></a>6.4.1 属性的简洁表示法</h4><p>ES6 允许直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span><span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span><span class="token punctuation">;</span>baz <span class="token comment" spellcheck="true">// {foo: "bar"}</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token punctuation">:</span> foo<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>上面代码表明，ES6 允许在对象之中，直接写变量。这时，属性名为变量名, 属性值为变量的值。</p><h4 id="6-4-2-方法的简洁表示法"><a href="#6-4-2-方法的简洁表示法" class="headerlink" title="6.4.2 方法的简洁表示法"></a>6.4.2 方法的简洁表示法</h4><p>除了属性简写，方法也可以简写。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> fun <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>    fun<span class="token punctuation">:</span>fun<span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>    fun<span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span>    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span></code></pre><p>CommonJS 模块输出一组数据及方法，就非常合适使用简洁写法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">setItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> getItem<span class="token punctuation">,</span> setItem<span class="token punctuation">,</span> clear <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    getItem<span class="token punctuation">:</span> getItem<span class="token punctuation">,</span>    setItem<span class="token punctuation">:</span> setItem<span class="token punctuation">,</span>    clear<span class="token punctuation">:</span> clear<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="6-5-Promise-异步控制对象"><a href="#6-5-Promise-异步控制对象" class="headerlink" title="6.5 Promise 异步控制对象"></a>6.5 Promise 异步控制对象</h3><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises</a></p></blockquote><h4 id="6-5-1为什么要使用-Promise"><a href="#6-5-1为什么要使用-Promise" class="headerlink" title="6.5.1为什么要使用 Promise"></a>6.5.1为什么要使用 Promise</h4><p><strong>以读取文件内容为例：</strong></p><p>无法保证顺序的代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// return console.log('读取失败')</span>    <span class="token comment" spellcheck="true">// 抛出异常</span>    <span class="token comment" spellcheck="true">//    1. 阻止程序的执行</span>    <span class="token comment" spellcheck="true">//    2. 把错误消息打印到控制台</span>    <span class="token keyword">throw</span> err  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/b.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// return console.log('读取失败')</span>    <span class="token comment" spellcheck="true">// 抛出异常</span>    <span class="token comment" spellcheck="true">//    1. 阻止程序的执行</span>    <span class="token comment" spellcheck="true">//    2. 把错误消息打印到控制台</span>    <span class="token keyword">throw</span> err  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/c.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// return console.log('读取失败')</span>    <span class="token comment" spellcheck="true">// 抛出异常</span>    <span class="token comment" spellcheck="true">//    1. 阻止程序的执行</span>    <span class="token comment" spellcheck="true">//    2. 把错误消息打印到控制台</span>    <span class="token keyword">throw</span> err  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>通过回调嵌套的方式来保证顺序：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// return console.log('读取失败')</span>    <span class="token comment" spellcheck="true">// 抛出异常</span>    <span class="token comment" spellcheck="true">//    1. 阻止程序的执行</span>    <span class="token comment" spellcheck="true">//    2. 把错误消息打印到控制台</span>    <span class="token keyword">throw</span> err  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/b.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// return console.log('读取失败')</span>      <span class="token comment" spellcheck="true">// 抛出异常</span>      <span class="token comment" spellcheck="true">//    1. 阻止程序的执行</span>      <span class="token comment" spellcheck="true">//    2. 把错误消息打印到控制台</span>      <span class="token keyword">throw</span> err    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/c.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// return console.log('读取失败')</span>        <span class="token comment" spellcheck="true">// 抛出异常</span>        <span class="token comment" spellcheck="true">//    1. 阻止程序的执行</span>        <span class="token comment" spellcheck="true">//    2. 把错误消息打印到控制台</span>        <span class="token keyword">throw</span> err      <span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>多层使用回调函数，就会进入 “<strong>回调地狱</strong>“</p><p>为了解决以上编码方式带来的问题（回调地狱嵌套），所以在 EcmaScript 6 中新增了一个 API：<code>Promise</code>。</p><h4 id="6-5-2-Promise-的使用"><a href="#6-5-2-Promise-的使用" class="headerlink" title="6.5.2 Promise 的使用"></a>6.5.2 Promise 的使用</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 在 EcmaScript 6 中新增了一个 API Promise</span><span class="token comment" spellcheck="true">// Promise 是一个构造函数</span><span class="token comment" spellcheck="true">// 创建 Promise 容器</span><span class="token comment" spellcheck="true">// 1. 给别人一个承诺 I promise you.</span><span class="token comment" spellcheck="true">//    Promise 容器一旦创建，就开始执行里面的代码</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// console.log(2)</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/aa.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 失败了，承诺容器中的任务失败了</span>      <span class="token comment" spellcheck="true">// console.log(err)</span>      <span class="token comment" spellcheck="true">// 把容器的 Pending 状态变为 Rejected</span>      <span class="token comment" spellcheck="true">// 调用 reject 就相当于调用了 then 方法的第二个参数函数</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// console.log(3)</span>      <span class="token comment" spellcheck="true">// 承诺容器中的任务成功了</span>      <span class="token comment" spellcheck="true">// console.log(data)</span>      <span class="token comment" spellcheck="true">// 把容器的 Pending 状态改为成功 Resolved</span>      <span class="token comment" spellcheck="true">// 也就是说这里调用的 resolve 方法实际上就是 then 方法传递的那个 function</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// console.log(4)</span><span class="token comment" spellcheck="true">// p1 就是那个承若</span><span class="token comment" spellcheck="true">// 当 p1 成功了 然后(then) 做指定的操作</span><span class="token comment" spellcheck="true">// then 方法接收的 function 就是容器中的 resolve 函数</span>p1  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取文件失败了'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>封装 Promise 版本的 <code>readFile</code>:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">pReadFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">pReadFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">pReadFile</span><span class="token punctuation">(</span><span class="token string">'./data/b.txt'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">pReadFile</span><span class="token punctuation">(</span><span class="token string">'./data/c.txt'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="6-6-箭头函数"><a href="#6-6-箭头函数" class="headerlink" title="6.6 箭头函数"></a>6.6 箭头函数</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions</a></p><p>ES6 允许使用“箭头”（<code>=&gt;</code>）定义函数。</p><p><strong>箭头函数表达式</strong>的语法比 <em>函数表达式</em> 更短，并且没有自己的 this，arguments。这些函数表达式更适用于那些本来需要匿名函数的地方，并且它们不能用作构造函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fun1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>str1 <span class="token operator">+</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ↓ </span><span class="token keyword">var</span> fun2 <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>str1 <span class="token operator">+</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ↓ </span><span class="token keyword">var</span> fun3 <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 9</span></code></pre><blockquote><p>如果参数只有一个，可以将()省略    // arr.map(c=&gt;c+1);<br>如果没有参数，则一定能要写上()     // ()=&gt; console.log(‘a’)<br>如果多于一个参数，每个参数之间用逗号分隔   (x, y) =&gt; { … }<br>如果方法体只有一句代码，可以省略{} 和分号，如果有返回可以省略return<br>如果方法体多于一句代码，则不能省略{} ,每句代码使用 分号分隔</p></blockquote><p><strong>注意：</strong></p><blockquote><p>a. 箭头函数没有自己的this，函数体内部写的this，指向的是外层代码块的this<br>b. 箭头函数内部的this是定义时所在的对象，而不是使用时所在的对象并且不会改变<br>c. 箭头箭头函数不能用作构造函数<br>d. 箭头函数内部不存在arguments，箭头函数体中使用的arguments其实指向的是外层函数的arguments</p></blockquote><p>箭头就是让你当做一个普通函数来使用,别整花里胡哨;</p>]]></content>
      
      
      <categories>
          
          <category> Front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LocalStorage</title>
      <link href="/posts/de13.html"/>
      <url>/posts/de13.html</url>
      
        <content type="html"><![CDATA[<h1 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h1><p>localStorage，在HTML5中，新加入了一个localStorage特性，这个特性主要是用来作为本地存储来使用的，解决了cookie存储空间不足的问题(cookie中每条cookie的存储空间为4k)，localStorage中一般浏览器支持的是5M大小，这个在不同的浏览器中localStorage会有所不同。</p><p>(1).储存数据</p><pre><code>localStorage.setItem(&#39;accessToken&#39;, &#39;Bearer &#39; + response.data.result.accessToken)</code></pre><p>(2).取出数据</p><pre><code>localStorage.getItem(&#39;accessToken&#39;)</code></pre><p>(3).删除储存数据</p><pre><code> localStorage.removeItem(&#39;accessToken&#39;)</code></pre><p>(4).更改数据</p><pre><code>localStorage.setItem(&#39;accessToken&#39;, &#39;更改后&#39; + response.data.result.accessToken)</code></pre><p>使用时有两点需要注意过的地方：</p><p>localStorage在浏览器的隐私模式下面是不可读取的。<br>localStorage本质上是对字符串的读取，有json格式时需要JSON.stringify()转化为字符串。<br>localStorage不能被爬虫抓取到</p>]]></content>
      
      
      <categories>
          
          <category> Front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web Storage </tag>
            
            <tag> JavaScript </tag>
            
            <tag> LocalStorage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IndexedDB</title>
      <link href="/posts/2cbc.html"/>
      <url>/posts/2cbc.html</url>
      
        <content type="html"><![CDATA[<h1 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h1><p>参考链接：<a href="http://www.ruanyifeng.com/blog/2018/07/indexeddb.html" target="_blank" rel="noopener">阮一峰</a>   <a href="https://wangdoc.com/javascript/bom/indexeddb.html#indexeddb-%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener">网道API</a>   <a href="https://www.baidu.com/link?url=v-T5vFhGb4J4VPU9QdQe1jkehlkqSqzTBcLpsZbUAXkcCPzXY3Uj7PAKbVOtMJe7r_3qJ2zkYh4rhVymjoPZjv9BI1L53NzDfVoIlBi5oSC&wd=&eqid=809f7542008cef74000000065e2eceae" target="_blank" rel="noopener">MDN</a></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>IndexedDB 是一个比较复杂的 API，涉及不少概念。它把不同的实体，抽象成一个个对象接口。学习这个 API，就是学习它的各种对象接口。</p><ul><li>数据库：IDBDatabase 对象</li><li>对象仓库：IDBObjectStore 对象</li><li>索引： IDBIndex 对象</li><li>事务： IDBTransaction 对象</li><li>操作请求：IDBRequest 对象</li><li>指针： IDBCursor 对象</li><li>主键集合：IDBKeyRange 对象</li></ul><h2 id="open-database"><a href="#open-database" class="headerlink" title="open database"></a>open database</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> request <span class="token operator">=</span> window<span class="token punctuation">.</span>indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>databaseName<span class="token punctuation">,</span> version<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// databaseName: 数据库名  version: 版本</span><span class="token comment" spellcheck="true">// 如果指定的数据库不存在，将会创建，版本默认为1</span><span class="token comment" spellcheck="true">// return IDBRequest 对象。这个对象有三种事件error、success、upgradeneeded，用于打开数据库后的操作。</span>request<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>request<span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> db <span class="token operator">=</span> request<span class="token punctuation">.</span>result    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>request<span class="token punctuation">.</span>onupgradeneeded <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'update 当指定版本大于版本，就会触发升级事件 第一次打开数据库时，会先触发upgradeneeded事件，然后触发success事件。'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//成功后，即可通过request.result 访问IDBdatabse对象</span></code></pre><p>IDBDatabase 对象有以下属性。</p><ul><li><p><code>IDBDatabase.name</code>：字符串，数据库名称。</p></li><li><p><code>IDBDatabase.version</code>：整数，数据库版本。数据库第一次创建时，该属性为空字符串。</p></li><li><p><code>IDBDatabase.objectStoreNames</code>：DOMStringList 对象（字符串的集合），包含当前数据的所有 object store 的名字。</p></li><li><p><code>IDBDatabase.onabort</code>：指定 abort 事件（事务中止）的监听函数。</p></li><li><p><code>IDBDatabase.onclose</code>：指定 close 事件（数据库意外关闭）的监听函数。</p></li><li><p><code>IDBDatabase.onerror</code>：指定 error 事件（访问数据库失败）的监听函数。</p></li><li><p><code>IDBDatabase.onversionchange</code>：数据库版本变化时触发（发生<code>upgradeneeded</code>事件，或调用<code>indexedDB.deleteDatabase()</code>）。</p></li></ul><p>IDBTransaction 对象</p><p>IDBTransaction 对象用来异步操作数据库事务，所有的读写操作都要通过这个对象进行,<code>IDBDatabase.transaction()</code>方法返回的就是一个 IDBTransaction 对象。</p><ul><li><code>IDBTransaction.db</code>：返回当前事务所在的数据库对象 IDBDatabase。</li><li><code>IDBTransaction.error</code>：返回当前事务的错误。如果事务没有结束，或者事务成功结束，或者被手动终止，该方法返回<code>null</code>。</li><li><code>IDBTransaction.mode</code>：返回当前事务的模式，默认是<code>readonly</code>（只读），另一个值是<code>readwrite</code>。</li><li><code>IDBTransaction.objectStoreNames</code>：返回一个类似数组的对象 DOMStringList，成员是当前事务涉及的对象仓库的名字。</li><li><code>IDBTransaction.onabort</code>：指定<code>abort</code>事件（事务中断）的监听函数。</li><li><code>IDBTransaction.oncomplete</code>：指定<code>complete</code>事件（事务成功）的监听函数。</li><li><code>IDBTransaction.onerror</code>：指定<code>error</code>事件（事务失败）的监听函数。</li></ul><p>IDBTransaction 对象有以下方法。</p><ul><li><code>IDBTransaction.abort()</code>：终止当前事务，回滚所有已经进行的变更。</li><li><code>IDBTransaction.objectStore(name)</code>：返回指定名称的对象仓库 IDBObjectStore。</li></ul><p>IDBIndex 对象<br>IDBObjectStore.index()方法可以获取 IDBIndex 对象。</p><ul><li><code>IDBIndex.name</code>：字符串，索引的名称。</li><li><code>IDBIndex.objectStore</code>：索引所在的对象仓库。</li><li><code>IDBIndex.keyPath</code>：索引的主键。</li><li><code>IDBIndex.multiEntry</code>：布尔值，针对<code>keyPath</code>为数组的情况，如果设为<code>true</code>，创建数组时，每个数组成员都会有一个条目，否则每个数组都只有一个条目。</li><li><code>IDBIndex.unique</code>：布尔值，表示创建索引时是否允许相同的主键。</li></ul><p>IDBIndex 对象有以下方法，它们都是异步的，立即返回的都是一个 IDBRequest 对象。</p><ul><li><code>IDBIndex.count()</code>：用来获取记录的数量。它可以接受主键或 IDBKeyRange 对象作为参数，这时只返回符合主键的记录数量，否则返回所有记录的数量。</li><li><code>IDBIndex.get(key)</code>：用来获取符合指定主键的数据记录。</li><li><code>IDBIndex.getKey(key)</code>：用来获取指定的主键。</li><li><code>IDBIndex.getAll()</code>：用来获取所有的数据记录。它可以接受两个参数，都是可选的，第一个参数用来指定主键，第二个参数用来指定返回记录的数量。如果省略这两个参数，则返回所有记录。由于获取成功时，浏览器必须生成所有对象，所以对性能有影响。如果数据集比较大，建议使用 IDBCursor 对象。</li><li><code>IDBIndex.getAllKeys()</code>：该方法与<code>IDBIndex.getAll()</code>方法相似，区别是获取所有主键。</li><li><code>IDBIndex.openCursor()</code>：用来获取一个 IDBCursor 对象，用来遍历索引里面的所有条目。</li><li><code>IDBIndex.openKeyCursor()</code>：该方法与<code>IDBIndex.openCursor()</code>方法相似，区别是遍历所有条目的主键。</li></ul><p>IDBCursor 对象<br>IDBCursor 对象代表指针对象，用来遍历数据仓库（IDBObjectStore）或索引（IDBIndex）的记录。</p><p>IDBCursor 对象一般通过IDBObjectStore.openCursor()方法获得。</p><ul><li><code>IDBCursor.source</code>：返回正在遍历的对象仓库或索引。</li><li><code>IDBCursor.direction</code>：字符串，表示指针遍历的方向。共有四个可能的值：next（从头开始向后遍历）、nextunique（从头开始向后遍历，重复的值只遍历一次）、prev（从尾部开始向前遍历）、prevunique（从尾部开始向前遍历，重复的值只遍历一次）。该属性通过<code>IDBObjectStore.openCursor()</code>方法的第二个参数指定，一旦指定就不能改变了。</li><li><code>IDBCursor.key</code>：返回当前记录的主键。</li><li><code>IDBCursor.value</code>：返回当前记录的数据值。</li><li>IDBCursor.primaryKey：返回当前记录的主键。对于数据仓库（objectStore）来说，这个属性等同于 IDBCursor.key；对于索引，IDBCursor.key 返回索引的位置值，该属性返回数据记录的主键。</li></ul><p>IDBCursor 对象有如下方法。</p><ul><li><code>IDBCursor.advance(n)</code>：指针向前移动 n 个位置。</li><li><code>IDBCursor.continue()</code>：指针向前移动一个位置。它可以接受一个主键作为参数，这时会跳转到这个主键。</li><li><code>IDBCursor.continuePrimaryKey()</code>：该方法需要两个参数，第一个是<code>key</code>，第二个是<code>primaryKey</code>，将指针移到符合这两个参数的位置。</li><li><code>IDBCursor.delete()</code>：用来删除当前位置的记录，返回一个 IDBRequest 对象。该方法不会改变指针的位置。</li><li><code>IDBCursor.update()</code>：用来更新当前位置的记录，返回一个 IDBRequest 对象。它的参数是要写入数据库的新的值。</li></ul><p>IDBKeyRange 对象<br>IDBKeyRange 对象代表数据仓库（object store）里面的一组主键。根据这组主键，可以获取数据仓库或索引里面的一组记录。</p><p>IDBKeyRange 可以只包含一个值，也可以指定上限和下限。它有四个静态方法，用来指定主键的范围。</p><ul><li><code>IDBKeyRange.lowerBound()</code>：指定下限。</li><li><code>IDBKeyRange.upperBound()</code>：指定上限。</li><li><code>IDBKeyRange.bound()</code>：同时指定上下限。</li><li><code>IDBKeyRange.only()</code>：指定只包含一个值。</li></ul><p>下面是一些代码实例。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// All keys ≤ x</span><span class="token keyword">var</span> r1 <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">upperBound</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// All keys &lt; x</span><span class="token keyword">var</span> r2 <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">upperBound</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// All keys ≥ y</span><span class="token keyword">var</span> r3 <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">lowerBound</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// All keys > y</span><span class="token keyword">var</span> r4 <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">lowerBound</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// All keys ≥ x &amp;&amp; ≤ y</span><span class="token keyword">var</span> r5 <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">bound</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// All keys > x &amp;&amp;&lt; y</span><span class="token keyword">var</span> r6 <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">bound</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// All keys > x &amp;&amp; ≤ y</span><span class="token keyword">var</span> r7 <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">bound</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// All keys ≥ x &amp;&amp;&lt; y</span><span class="token keyword">var</span> r8 <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">bound</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// The key = z</span><span class="token keyword">var</span> r9 <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>IDBKeyRange.lowerBound()</code>、<code>IDBKeyRange.upperBound()</code>、<code>IDBKeyRange.bound()</code>这三个方法默认包括端点值，可以传入一个布尔值，修改这个属性。</p><p>与之对应，IDBKeyRange 对象有四个只读属性。</p><ul><li><code>IDBKeyRange.lower</code>：返回下限</li><li><code>IDBKeyRange.lowerOpen</code>：布尔值，表示下限是否为开区间（即下限是否排除在范围之外）</li><li><code>IDBKeyRange.upper</code>：返回上限</li><li><code>IDBKeyRange.upperOpen</code>：布尔值，表示上限是否为开区间（即上限是否排除在范围之外）</li></ul><p>IDBKeyRange 实例对象生成以后，将它作为参数输入 IDBObjectStore 或 IDBIndex 对象的<code>openCursor()</code>方法，就可以在所设定的范围内读取数据。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> t <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'people'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'readonly'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> store <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">'people'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> index <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> range <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">bound</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>index<span class="token punctuation">.</span><span class="token function">openCursor</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span><span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> cursor <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>key <span class="token operator">+</span> <span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> field <span class="token keyword">in</span> cursor<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>value<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cursor<span class="token punctuation">.</span><span class="token keyword">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>IDBKeyRange 有一个实例方法<code>includes(key)</code>，返回一个布尔值，表示某个主键是否包含在当前这个主键组之内。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> keyRangeValue <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">bound</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'K'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>keyRangeValue<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'F'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>keyRangeValue<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'W'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h2 id="createDatabase"><a href="#createDatabase" class="headerlink" title="createDatabase"></a>createDatabase</h2><pre class=" language-js"><code class="language-js">request<span class="token punctuation">.</span>onupgradeneeded <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>db<span class="token punctuation">.</span>objectStoreNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'persion'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">let</span> objcetStore <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">'persion'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>keyPath<span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// db.createObjectStore(databaseName, options) options: keyPath 主键 或 autoIncrement 设置为true,两者只能存在一个 </span><span class="token punctuation">}</span></code></pre><h2 id="createIndex"><a href="#createIndex" class="headerlink" title="createIndex"></a>createIndex</h2><pre class=" language-js"><code class="language-js">objcetStore<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//方法用于新建当前数据库的一个索引。该方法只能在VersionChange监听函数里面调用,只有存在数据库后才能使用。</span>objectStore<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span>indexName<span class="token punctuation">,</span> keyPath<span class="token punctuation">,</span> objectParameters<span class="token punctuation">)</span>该方法可以接受三个参数。indexName：索引名keyPath：主键objectParameters：配置对象（可选）第三个参数可以配置以下属性。unique：如果设为<span class="token boolean">true</span>，将不允许重复的值multiEntry：如果设为<span class="token boolean">true</span>，对于有多个值的主键数组，每个值将在索引里面新建一个条目，否则主键数组对应一个条目。</code></pre><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> request <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'person'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'readwrite'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> email<span class="token punctuation">:</span> <span class="token string">'zhangsan@example.com'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  request<span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据写入成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  request<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据写入失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码中，写入数据需要新建一个事务。新建时必须指定表格名称和操作模式（“只读”或“读写”）。新建事务以后，通过<code>IDBTransaction.objectStore(name)</code>方法，拿到 IDBObjectStore 对象，再通过表格对象的<code>add()</code>方法，向表格写入一条记录。</p><p>写入操作是一个异步操作，通过监听连接对象的<code>success</code>事件和<code>error</code>事件，了解是否写入成功。</p><h2 id="read"><a href="#read" class="headerlink" title="read"></a>read</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> transaction <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'person'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> objectStore <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> request <span class="token operator">=</span> objectStore<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   request<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'事务失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span>   request<span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Name: '</span> <span class="token operator">+</span> request<span class="token punctuation">.</span>result<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Age: '</span> <span class="token operator">+</span> request<span class="token punctuation">.</span>result<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Email: '</span> <span class="token operator">+</span> request<span class="token punctuation">.</span>result<span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'未获得数据记录'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码中，<code>objectStore.get()</code>方法用于读取数据，参数是主键的值</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>遍历数据表格的所有记录，要使用指针对象 IDBCursor。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> objectStore <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   objectStore<span class="token punctuation">.</span><span class="token function">openCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">var</span> cursor <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">)</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Id: '</span> <span class="token operator">+</span> cursor<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Name: '</span> <span class="token operator">+</span> cursor<span class="token punctuation">.</span>value<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Age: '</span> <span class="token operator">+</span> cursor<span class="token punctuation">.</span>value<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Email: '</span> <span class="token operator">+</span> cursor<span class="token punctuation">.</span>value<span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>       cursor<span class="token punctuation">.</span><span class="token keyword">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'没有更多数据了！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码中，新建指针对象的<code>openCursor()</code>方法是一个异步操作，所以要监听<code>success</code>事件。</p><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><p>更新数据要使用<code>IDBObject.put()</code>方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> request <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'person'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'readwrite'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">35</span><span class="token punctuation">,</span> email<span class="token punctuation">:</span> <span class="token string">'lisi@example.com'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  request<span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据更新成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  request<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据更新失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码中，<code>put()</code>方法自动更新了主键为<code>1</code>的记录。</p><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><p><code>IDBObjectStore.delete()</code>方法用于删除记录。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> request <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'person'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'readwrite'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  request<span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据删除成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="use-Index"><a href="#use-Index" class="headerlink" title="use Index"></a>use Index</h2><p>索引的意义在于，可以让你搜索任意字段，也就是说从任意字段拿到数据记录。如果不建立索引，默认只能搜索主键（即从主键取值）。</p><p>假定新建表格的时候，对<code>name</code>字段建立了索引。</p><pre class=" language-js"><code class="language-js">objectStore<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> unique<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>现在，就可以从<code>name</code>找到对应的数据记录了。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> transaction <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'person'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'readonly'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> store <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> index <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> request <span class="token operator">=</span> index<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web Storage </tag>
            
            <tag> JavaScript </tag>
            
            <tag> IndexedDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/posts/ab06.html"/>
      <url>/posts/ab06.html</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><h2 id="第-0-章-Vue-介绍"><a href="#第-0-章-Vue-介绍" class="headerlink" title="第 0 章 Vue 介绍"></a>第 0 章 Vue 介绍</h2><h3 id="0-0-开发工程发展历史"><a href="#0-0-开发工程发展历史" class="headerlink" title="0.0 开发工程发展历史"></a>0.0 开发工程发展历史</h3><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-13_14-13-19.png" alt=""></p><p>通过前面的介绍，我们对目前的项目工程化有了大体了了解，那么其中，在第二阶段的工程化演进中，有一个重要的工程设计理念诞生，他就是著名的 MVC 设计模式，简单点，MVC 其实就是为了项目工程化的一种分工模式；</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-13_21-43-05.png" alt=""></p><p>MVC 中的最大缺点就是单项输入输出，所有的 M 的变化及 V 层的变化，必须通过 C 层调用才能展示；</p><p>为了解决相应的问题，出现了 MVVM 的设计思想，简单理解就是实想数据层与展示层的相互调用，降低业务层面的交互逻辑；后面再进行详细介绍；</p><h3 id="0-1-Vue-介绍"><a href="#0-1-Vue-介绍" class="headerlink" title="0.1 Vue 介绍"></a>0.1 Vue 介绍</h3><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的 <strong>渐进式框架</strong>。</p><p>注意：Vue 是一个框架，相对于 jq 库来说，是由本质区别的；</p><p><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p><p>Vue <strong>不支持</strong> IE8 及以下版本，因为 Vue 使用了 IE8 无法模拟的 ECMAScript 5 特性。但它支持所有<a href="https://caniuse.com/#feat=es5" target="_blank" rel="noopener">兼容 ECMAScript 5 的浏览器</a>。</p><h3 id="0-2-Vue-初体验"><a href="#0-2-Vue-初体验" class="headerlink" title="0.2 Vue 初体验"></a>0.2 Vue 初体验</h3><p>直接下载引入：<a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/installation.html</a></p><p>CDN 引入：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.16/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>最新版<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>CDN 加速： <a href="https://www.bootcdn.cn/" target="_blank" rel="noopener">https://www.bootcdn.cn/</a></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    { {user_name} }  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>// 两种引入方式，任意选择<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#div"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置要操作的元素</span>    <span class="token comment" spellcheck="true">// 要替换的额数据</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      user_name<span class="token punctuation">:</span> <span class="token string">"我是一个div"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="0-3-学习-Vue"><a href="#0-3-学习-Vue" class="headerlink" title="0.3 学习 Vue"></a>0.3 学习 Vue</h3><p>基础知识 –&gt; 项目 –&gt; 构建工具 –&gt; Vue 其他相关技术</p><h2 id="第-1-章-Vue-实例对象"><a href="#第-1-章-Vue-实例对象" class="headerlink" title="第 1 章 Vue 实例对象"></a>第 1 章 Vue 实例对象</h2><p>每个 Vue 应用都是通过用 <code>Vue</code> 函数创建一个新的 <strong>Vue 实例</strong> 开始的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 选项</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    { {user_name} }  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#div"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置要操作的元素</span>    <span class="token comment" spellcheck="true">// 要替换的额数据</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      user_name<span class="token punctuation">:</span> <span class="token string">"我是一个div"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 打印Vue实例对象</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-14_13-25-03.png" alt=""></p><p>通过打印实例对象发现，其中 el 被 Vue 放入了公有属性中，而 data 则被放入了 私有属性中，而 data 中的数据，需要被外部使用，于是 Vue 直接将 data 中的属性及属性值，直接挂载到 Vue 实例中，也就是说，data 中的数据，我们可以直接使用 <code>app.user_name</code> 直接调用；</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">"#div"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置要操作的元素</span>  <span class="token comment" spellcheck="true">// 要替换的额数据</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    user_name<span class="token punctuation">:</span> <span class="token string">"我是一个div"</span><span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token number">222222</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>user_name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="第-2-章-模板语法-插值"><a href="#第-2-章-模板语法-插值" class="headerlink" title="第 2 章 模板语法-插值"></a>第 2 章 模板语法-插值</h2><p>我们在前面的代码中，使用 { {} } 的形式在 html 中获取实例对象对象中 data 的属性值；</p><p>这种使用 { {} } 获取值得方式，叫做 <strong><em>插值</em></strong> 或 <strong><em>插值表达式</em></strong> ；</p><h3 id="2-1-文本"><a href="#2-1-文本" class="headerlink" title="2.1 文本"></a>2.1 文本</h3><p>数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Message: { { ms g }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><p>Mustache 标签将会被替代为对应数据对象上 <code>msg</code> 属性的值。无论何时，绑定的数据对象上 <code>msg</code> 属性发生了改变，插值处的内容都会更新。即便数据内容为一段 html 代码，仍然以文本内容展示</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    文本插值 { {html_str} }  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#div"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      html_str<span class="token punctuation">:</span> <span class="token string">"&lt;h2>Vue&lt;h2>"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>浏览器渲染结果：<code>&lt;div id=&quot;div&quot;&gt;文本插值 &lt;h2&gt;Vue&lt;h2&gt;&lt;/div&gt;</code></p><p>打开浏览器的 REPL 环境 输入 <code>app.html_str = &#39;&lt;s&gt;vue&lt;/s&gt;&#39;</code></p><p>随机浏览器渲染结果就会改变： <code>&lt;div id=&quot;div&quot;&gt;文本插值 &lt;s&gt;vue&lt;/s&gt;&lt;/div&gt;</code></p><pre class=" language-html"><code class="language-html">### 2.2 使用 JavaScript 表达式迄今为止，在我们的模板中，我们一直都只绑定简单的属性键值。但实际上，对于所有的数据绑定，Vue.js都提供了完全的 JavaScript 表达式支持，但是不能使用 JS 语句；(表达式是运算，有结果；语句就是代码，可以没有结果)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    { { u n > 3 ? '大' : '小'}} { { fu n() }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#div"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      un<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      fun<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="第-3-章-模板语法-指令"><a href="#第-3-章-模板语法-指令" class="headerlink" title="第 3 章 模板语法-指令"></a>第 3 章 模板语法-指令</h2><p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊特性。指令特性的值预期是<strong>单个 JavaScript 表达式</strong> (<code>v-for</code> 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM；参考 <a href="https://cn.vuejs.org/v2/guide/syntax.html#%E6%8C%87%E4%BB%A4" target="_blank" rel="noopener">手册</a> 、 <a href="https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4" target="_blank" rel="noopener">API</a></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>seen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>现在你看到我了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#div"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      seen<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这里，<code>v-if</code> 指令将根据表达式 <code>seen</code> 的值的真假来插入/移除 <code>&lt;p&gt;</code> 元素。</p><h3 id="3-1-v-text-v-html-文本"><a href="#3-1-v-text-v-html-文本" class="headerlink" title="3.1 v-text / v-html 文本"></a>3.1 v-text / v-html 文本</h3><p><a href="https://cn.vuejs.org/v2/api/#v-text" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#v-text</a></p><p><a href="https://cn.vuejs.org/v2/api/#v-html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#v-html</a></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span> <span class="token attr-name">{</span> <span class="token attr-name">{class}}</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>seen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>str_html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#div"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      seen<span class="token punctuation">:</span> <span class="token string">"&lt;h1>Vue&lt;/h1>"</span><span class="token punctuation">,</span>      str_html<span class="token punctuation">:</span> <span class="token string">"&lt;h1>Vue&lt;/h1>"</span><span class="token punctuation">,</span>      <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">"dd"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-15_10-18-14.png" alt=""></p><blockquote><p>注意：</p><ul><li>v-text<ul><li>v-text 和差值表达式的区别<ul><li>v-text 标签的指令更新整个标签中的内容(替换整个标签包括标签自身)</li><li>差值表达式，可以更新标签中局部的内容</li></ul></li></ul></li><li>v-html<ul><li>可以渲染内容中的 HTML 标签</li><li>尽量避免使用，否则会带来危险(XSS 攻击 跨站脚本攻击)</li></ul></li></ul></blockquote><p><strong>HTML 属性不能用 <code>{ {}}</code> 语 法</strong></p><h3 id="3-2-v-bind-属性绑定"><a href="#3-2-v-bind-属性绑定" class="headerlink" title="3.2 v-bind 属性绑定"></a>3.2 v-bind 属性绑定</h3><p><a href="https://cn.vuejs.org/v2/api/#v-bind" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#v-bind</a></p><p>可以绑定标签上的任何属性。</p><p><strong>动态绑定图片的路径</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>“app”<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      src<span class="token punctuation">:</span> <span class="token string">"1.jpg"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>绑定 a 标签上的 id</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>del.php?id<span class="token punctuation">=</span><span class="token punctuation">'</span> + id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      id<span class="token punctuation">:</span> <span class="token number">11</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>绑定 class</strong></p><p>对象语法和数组语法</p><ul><li><p>对象语法</p><p>如果 isActive 为 true，则返回的结果为 <code>&lt;div id=&quot;app&quot; class=&quot;active&quot;&gt;&lt;/div&gt;</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{active: isActive}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  hei<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      isActive<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>数组语法</p><p>渲染的结果： <code>&lt;div id=&quot;app&quot; class=&quot;active text-danger&quot;&gt;&lt;/div&gt;</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[activeClass, dangerClass]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  hei<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      activeClass<span class="token punctuation">:</span> <span class="token string">"active"</span><span class="token punctuation">,</span>      dangerClass<span class="token punctuation">:</span> <span class="token string">"text-danger"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><p><strong>绑定 style</strong></p><p>对象语法和数组语法</p><ul><li><p>对象语法</p><p>渲染的结果： <code>&lt;div id=&quot;app&quot; style=&quot;color: red; font-size: 40px;&quot;&gt;hei&lt;/div&gt;</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> redColor, <span class="token property">fontSize</span><span class="token punctuation">:</span> font + <span class="token string">'px'</span><span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  hei<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      redColor<span class="token punctuation">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span>      font<span class="token punctuation">:</span> <span class="token number">40</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>数组语法</p><p>渲染结果：<code>&lt;div id=&quot;app&quot; style=&quot;color: red; font-size: 18px;&quot;&gt;abc&lt;/div&gt;</code></p></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">[color, fontSize]</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>abc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      color<span class="token punctuation">:</span> <span class="token punctuation">{</span>        color<span class="token punctuation">:</span> <span class="token string">"red"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      fontSize<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"font-size"</span><span class="token punctuation">:</span> <span class="token string">"18px"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>简化语法</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageSrc<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 缩写 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageSrc<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      imageSrc<span class="token punctuation">:</span> <span class="token string">"1.jpg"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="3-3-v-model-双向数据绑定"><a href="#3-3-v-model-双向数据绑定" class="headerlink" title="3.3 v-model 双向数据绑定"></a>3.3 v-model 双向数据绑定</h3><p><a href="https://cn.vuejs.org/v2/api/#v-model" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#v-model</a></p><p><strong>单向数据绑定</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input_val<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#div"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      input_val<span class="token punctuation">:</span> <span class="token string">"hello world "</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>浏览器渲染结果： <code>&lt;div id=&quot;div&quot;&gt;&lt;input type=&quot;text&quot; value=&quot;hello world&quot;&gt;&lt;/div&gt;</code></p><p>通过浏览器 REPL 环境可以进行修改 <code>app.input_val = &#39;Vue&#39;</code></p><p>浏览器渲染结果： <code>&lt;div id=&quot;div&quot;&gt;&lt;input type=&quot;text&quot; value=&quot;Vue&quot;&gt;&lt;/div&gt;</code></p><p>我们通过 vue 对象修改数据可以直接影响到 DOM 元素，但是，如果直接修改 DOM 元素，却不会影响到 vue 对象的数据；我们把这种现象称为 <strong><em>单向数据绑定</em></strong> ；</p><p><strong>双向数据绑定</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input_val<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#div"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      input_val<span class="token punctuation">:</span> <span class="token string">"hello world "</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>通过 v-model 指令展示表单数据，此时就完成了 <strong><em>双向数据绑定</em></strong> ；</p><p>不管 DOM 元素还是 vue 对象，数据的改变都会影响到另一个；</p><p><strong>多行文本 / 文本域</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inp_val<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{ { inp_va l }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#div"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      inp_val<span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>绑定复选框</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  吃饭：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eat<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checklist<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  睡觉：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sleep<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checklist<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  打豆豆：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ddd<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checklist<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  { { checklis t }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#div"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      checklist<span class="token punctuation">:</span> <span class="token string">""</span>      <span class="token comment" spellcheck="true">// checklist: []</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>绑定单选框</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span>    <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span>    <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span>    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  { {sex} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      sex<span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>修饰符</strong></p><p><a href="https://cn.vuejs.org/v2/guide/forms.html#lazy" target="_blank" rel="noopener"><code>.lazy</code></a> - 取代 <code>input</code> 监听 <code>change</code> 事件</p><p><a href="https://cn.vuejs.org/v2/guide/forms.html#number" target="_blank" rel="noopener"><code>.number</code></a> - 输入字符串转为有效的数字</p><p><a href="https://cn.vuejs.org/v2/guide/forms.html#trim" target="_blank" rel="noopener"><code>.trim</code></a> - 输入首尾空格过滤</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.lazy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input_val<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  { {input_val} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#div"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      input_val<span class="token punctuation">:</span> <span class="token string">"hello world "</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="3-4-v-on-绑定事件监听"><a href="#3-4-v-on-绑定事件监听" class="headerlink" title="3.4 v-on 绑定事件监听"></a>3.4 v-on 绑定事件监听</h3><p><a href="https://cn.vuejs.org/v2/api/#v-on" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#v-on</a></p><p><a href="https://cn.vuejs.org/v2/guide/events.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/events.html</a></p><h4 id="3-4-1-基本使用"><a href="#3-4-1-基本使用" class="headerlink" title="3.4.1 基本使用"></a>3.4.1 基本使用</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cli<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      cli<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>上面的代码运行是没有问题的，但是，我们不建议这样做，因为 data 是专门提供数据的对象，事件触发需要执行的是一段代码，需要的是一个方法 (事件处理程序) ；</p><p>修改代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 使用事件绑定的简写形式 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cli<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 将事件处理程序写入methods对象</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      cli<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>向事件处理器中传参</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 直接调用传参即可 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cli(1,3)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 接受参数</span>      cli<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>而此时，如果在处理器中需要使用事件对象，则无法获取，我们可以用特殊变量 <code>$event</code> 把它传入方法</p><p><code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; @click=&quot;cli(1,3,$event)&quot;&gt;</code></p><pre class=" language-js"><code class="language-js">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 接受参数</span>    cli<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-4-2-事件修饰符"><a href="#3-4-2-事件修饰符" class="headerlink" title="3.4.2 事件修饰符"></a>3.4.2 事件修饰符</h4><p>原生 JS 代码，想要阻止浏览器的默认行为(a 标签跳转、submit 提交)，我们要使用事件对象的 <code>preventDefault()</code> 方法</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.qq.com<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>腾百万<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> ev <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 组织浏览器的默认行为</span>    ev<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>使用修饰符 阻止浏览器的默认行为</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.qq.com<span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cli<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>腾百万<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 将事件处理程序写入methods对象</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      cli<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>使用修饰符绑定一次性事件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.qq.com<span class="token punctuation">"</span></span> <span class="token attr-name">@click.once</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cli($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>腾百万<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 将事件处理程序写入methods对象</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      cli<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ev<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="3-4-3-按键修饰符"><a href="#3-4-3-按键修饰符" class="headerlink" title="3.4.3 按键修饰符"></a>3.4.3 按键修饰符</h4><p>绑定键盘抬起事件，但是只有<code>enter</code> 键能触发此事件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keyup<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      keyup<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="3-4-4-系统修饰符"><a href="#3-4-4-系统修饰符" class="headerlink" title="3.4.4 系统修饰符"></a>3.4.4 系统修饰符</h4><p>按住 <code>shift</code> 后才能触发点击事件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token attr-name">@click.shift</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cli<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      cli<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="3-4-5-鼠标修饰符"><a href="#3-4-5-鼠标修饰符" class="headerlink" title="3.4.5 鼠标修饰符"></a>3.4.5 鼠标修饰符</h4><p>鼠标中键触发事件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token attr-name">@click.middle</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cli<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      cli<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="3-4-6-为什么在-HTML-中监听事件"><a href="#3-4-6-为什么在-HTML-中监听事件" class="headerlink" title="3.4.6 为什么在 HTML 中监听事件?"></a>3.4.6 为什么在 HTML 中监听事件?</h4><blockquote><p>你可能注意到这种事件监听的方式违背了关注点分离 (separation of concern) 这个长期以来的优良传统。但不必担心，因为所有的 Vue.js 事件处理方法和表达式都严格绑定在当前视图的 ViewModel 上，它不会导致任何维护上的困难。实际上，使用 <code>v-on</code> 有几个好处：</p><ol><li>扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。</li><li>因为你无须在 JavaScript 里手动绑定事件，你的 ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试。</li><li>当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何清理它们。</li></ol></blockquote><h3 id="3-5-v-show-显示隐藏"><a href="#3-5-v-show-显示隐藏" class="headerlink" title="3.5 v-show 显示隐藏"></a>3.5 v-show 显示隐藏</h3><p><a href="https://cn.vuejs.org/v2/api/#v-show" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#v-show</a></p><p>根据表达式之真假值，切换元素的 <code>display</code> CSS 属性。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>is_show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      is_show<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>案例：点击按钮切换隐藏显示</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isshow<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>is_show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      is_show<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      isshow<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>is_show <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>is_show<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="3-6-v-if-v-else-v-else-if-条件判断"><a href="#3-6-v-if-v-else-v-else-if-条件判断" class="headerlink" title="3.6 v-if / v-else / v-else-if 条件判断"></a>3.6 v-if / v-else / v-else-if 条件判断</h3><p><a href="https://cn.vuejs.org/v2/api/#v-if" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#v-if</a></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>A<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    A  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>B<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    B  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>C<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    C  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>    Not A/B/C  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token string">"F"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="3-7-v-for-循环"><a href="#3-7-v-for-循环" class="headerlink" title="3.7 v-for 循环"></a>3.7 v-for 循环</h3><p><a href="https://cn.vuejs.org/v2/api/#v-for" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#v-for</a></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(val,key) in arr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{ {val}}--- { {key}}&lt; /li><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(val,key) in obj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      { {val}}--- { {key}}&lt; /li> // in 也可以用 of 来替换 如： （val,key）of      obj,两者没有区别    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      obj<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"李四"</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>//v-for 不只可以传入两个参数 ，可以传三个，顺序作用分别：(value 当前遍历的值,键名name, 索引index)</code></pre><h3 id="3-8-v-cloak"><a href="#3-8-v-cloak" class="headerlink" title="3.8 v-cloak"></a>3.8 v-cloak</h3><p><a href="https://cn.vuejs.org/v2/api/#v-cloak" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#v-cloak</a></p><p>和 CSS 规则如 <code>[v-cloak] { display: none }</code> 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{ {obj.i d}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        obj<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"李四"</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>当我们的网络受阻时，或者页面加载完毕而没有初始化得到 vue 实例时，DOM 中的 <code>{ {}}</code> 则会展示出来 ；</p><p>为了防止现象，我们可以使用 CSS 配合 v-cloak 实现获取 VUE 实例前的隐藏；</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token attribute">[v-cloak]</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-cloak</span><span class="token punctuation">></span></span>{ {obj.i d}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        obj<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"李四"</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="3-9-v-once"><a href="#3-9-v-once" class="headerlink" title="3.9 v-once"></a>3.9 v-once</h3><p><a href="https://cn.vuejs.org/v2/api/#v-once" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#v-once</a></p><p>只渲染元素和组件<strong>一次</strong>。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-once</span><span class="token punctuation">></span></span>{ {msg}}&lt; /p><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">"kkk"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="补充：数组更新检测-对象更新检测"><a href="#补充：数组更新检测-对象更新检测" class="headerlink" title="补充：数组更新检测/对象更新检测"></a>补充：数组更新检测/对象更新检测</h3><p><a href="https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B</a></p><p>在 vue 的数据双向绑定中，数组以：arr[0] = value ，obj.v=1 等方式赋值或添加，都不会触发视图的更新，也就不能实现双向绑定，之所以会这样是因为在 Vue 每个数据都会进行包装/包囊，直接修改就会把包装给卸掉，但是也不是没有解决办法，解决这种情况可以使用以下几种方式：</p><h4 id="数组监测"><a href="#数组监测" class="headerlink" title="数组监测"></a>数组监测</h4><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span>使用数组自带的添加、删除等等方法<span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>改变引用\替换数组如：（<span class="token number">1</span>）使用一些会返回一个新数组的方法example1<span class="token punctuation">.</span>items <span class="token operator">=</span> example1<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> item<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/Foo/</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">这样的方法有：filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">、concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 和 <span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>等（<span class="token number">2</span>）直接重置赋值<span class="token punctuation">,</span>在原有的基础上添加、删除等如：   原数组attr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>      attr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>      这样也会改变引用<span class="token number">3</span><span class="token punctuation">.</span>使用<span class="token keyword">set</span>\$<span class="token keyword">set</span>方法</code></pre><h4 id="对象监测"><a href="#对象监测" class="headerlink" title="对象监测"></a>对象监测</h4><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span>改变引用\重载对象和数组同理，在这使用对象独有的 Object<span class="token punctuation">.</span>assign 和jquery的$<span class="token punctuation">.</span>extendObject<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>userProfile<span class="token punctuation">,</span> <span class="token punctuation">{</span>  age<span class="token punctuation">:</span> <span class="token number">27</span><span class="token punctuation">,</span>  favoriteColor<span class="token punctuation">:</span> <span class="token string">'Vue Green'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>上面这种方式和直接obj<span class="token punctuation">.</span>a <span class="token operator">=</span> v一样，视图不会更新，要想发威作用必须以下面的方式vm<span class="token punctuation">.</span>userProfile <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>vm<span class="token punctuation">.</span>userProfile<span class="token punctuation">,</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">,</span>favoriteColor<span class="token punctuation">:</span><span class="token string">'Vue Green'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>assign源对象不能直接是vue的数据，并且还要对vue指定的数据进行重置赋值<span class="token number">2</span><span class="token punctuation">.</span>使用<span class="token keyword">set</span><span class="token operator">/</span>$<span class="token keyword">set</span>方法</code></pre><h4 id="set-set-方法的使用"><a href="#set-set-方法的使用" class="headerlink" title="set/$set 方法的使用"></a>set/$set 方法的使用</h4><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>object 要添加等操作的数据<span class="token punctuation">,</span> propertyName 键名<span class="token punctuation">,</span> value 值<span class="token punctuation">)</span>Vue<span class="token punctuation">.</span>$<span class="token keyword">set</span> 是vue的实例方法也是全局方法，使用方式和<span class="token keyword">set</span>一样Vue<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">,</span> indexOfItem<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>indexOfItem<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>vm<span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">,</span> indexOfItem<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span></code></pre><h3 id="补充：is"><a href="#补充：is" class="headerlink" title="补充：is"></a>补充：is</h3><p><a href="https://cn.vuejs.org/v2/api/#is" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#is</a></p><p><a href="https://cn.vuejs.org/v2/guide/components.html#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/components.html#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6</a></p><p>is 命令的使用场景通常在必须使用固定的 DOM 子元素的 table、ul、select 等 DOM 元素上，解决组件在这些 DOM 中的使用发生错乱的问题，is 可以让 DOM 编译时改变成指定的组件</p><p>不受这种影响的情况有：</p><ul><li><p>字符串 (例如：<code>template: &#39;...&#39;</code>)</p></li><li><p><a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">单文件组件 (<code>.vue</code>)</a></p></li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 当 <span class="token template-string"><span class="token string">`currentView`</span></span> 改变时，组件也跟着改变 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>component v<span class="token operator">-</span>bind<span class="token punctuation">:</span>is<span class="token operator">=</span><span class="token string">"currentView"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这样做是有必要的，因为 <span class="token template-string"><span class="token string">`&lt;my-row>`</span></span> 放在一个 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token template-string"><span class="token string">`&lt;table>`</span></span> 内可能无效且被放置到外面 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>table<span class="token operator">></span>  <span class="token operator">&lt;</span>tr is<span class="token operator">=</span><span class="token string">"my-row"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span></code></pre><h2 id="第-4-章-TodoList-案例"><a href="#第-4-章-TodoList-案例" class="headerlink" title="第 4 章 TodoList 案例"></a>第 4 章 TodoList 案例</h2><p>上市产品： <a href="http://www.todolist.cn/" target="_blank" rel="noopener">ToDoList</a> 、<a href="https://www.wunderlist.com/zh/" target="_blank" rel="noopener">奇妙清单</a> 、<a href="https://www.dida365.com/" target="_blank" rel="noopener">滴答清单</a></p><p>学习练手项目 ： <a href="http://todomvc.com/" target="_blank" rel="noopener">TodoMVC</a> 、 <a href="https://cn.vuejs.org/v2/examples/todomvc.html" target="_blank" rel="noopener">Vue 官方示例</a></p><p>为什么选择这样的案例：</p><p>产品功能简洁，需求明确，所需知识点丰富；实现基本功能容易，涵盖所学基础知识；而可扩展性强，完善所有功能比较复杂，所需技术众多；在学习中，可以灵活取舍；</p><h3 id="4-1-项目初始化"><a href="#4-1-项目初始化" class="headerlink" title="4.1 项目初始化"></a>4.1 项目初始化</h3><p>在项目目录中执行 <code>npm install</code> 命令，下载所需静态资源 ; 将 Vue.js 框架代码，复制到 js 目录，在 index.html 中引入 vue : <code>&lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</code></p><p>同时 在 index.html 最下方，项目引入了 app.js ; 而我们要写的 vuejs 代码，都放在这个文件中；</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-15_17-22-36.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-15_17-22-51.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-15_17-23-06.png" alt=""></p><h3 id="4-2-数据遍历"><a href="#4-2-数据遍历" class="headerlink" title="4.2 数据遍历"></a>4.2 数据遍历</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> list_data <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"吃饭"</span><span class="token punctuation">,</span> stat<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"睡觉"</span><span class="token punctuation">,</span> stat<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"打豆豆"</span><span class="token punctuation">,</span> stat<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">"#todoapp"</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// list_data:list_data,</span>    list_data <span class="token comment" spellcheck="true">// es6属性简写</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(val,key) in list_data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toggle<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>val.stat<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>{ {val.titl e}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>edit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Rule the web<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><h3 id="4-3-展示无数据状态"><a href="#4-3-展示无数据状态" class="headerlink" title="4.3 展示无数据状态"></a>4.3 展示无数据状态</h3><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-15_17-59-59.png" alt=""></p><p>标签及内容都是在 section footer 两个标签中的，当 list_data 中没有数据时，我们只需要隐藏这个两个标签即可：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list_data.length<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  ……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list_data.length<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  ……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span></code></pre><p>两个标签都有 <code>v-if</code> 判断 ，因此我们可以使用一个 <code>div</code> 包裹两个标签，使 <code>div</code> 隐藏即可：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list_data.length<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ……  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ……  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>如果有内容，那么 DOM 书中就会多出一个 div 标签，那么我们可以选择使用 <code>template</code> (vue 中的模板标识)，有内容时，浏览器渲染不会有此节点；</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list_data.length<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ……  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ……  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h3 id="4-3-添加任务"><a href="#4-3-添加任务" class="headerlink" title="4.3 添加任务"></a>4.3 添加任务</h3><p>绑定 <code>enter</code> 键盘事件:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addTodo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>new-todo<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入<span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span> <span class="token punctuation">/></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">"#todoapp"</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// list_data:list_data,</span>    list_data <span class="token comment" spellcheck="true">// es6属性简写</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//添加事件处理器</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// addTodo:function(){}</span>    <span class="token comment" spellcheck="true">// 简写形式</span>    <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改代码完成任务添加：</p><pre class=" language-js"><code class="language-js">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 添加任务</span>    <span class="token comment" spellcheck="true">// addTodo:function(){}</span>    <span class="token comment" spellcheck="true">// 简写形式</span>    <span class="token function">addTodo</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取当前触发事件的元素</span>        <span class="token keyword">var</span> inputs <span class="token operator">=</span> ev<span class="token punctuation">.</span>target<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取value值，去除空白后判断，如果为空，则不添加任务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inputs<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 组装任务数据</span>        <span class="token keyword">var</span> todo_data <span class="token operator">=</span> <span class="token punctuation">{</span>            id<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list_data<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>            title<span class="token punctuation">:</span> inputs<span class="token punctuation">.</span>value<span class="token punctuation">,</span>            stat<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将数据添加进数组</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list_data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>todo_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 清空文本框内容</span>        inputs<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-4-任务的全选与反选"><a href="#4-4-任务的全选与反选" class="headerlink" title="4.4 任务的全选与反选"></a>4.4 任务的全选与反选</h3><p>点击文本框左边的下箭头，实现全选和反选操作</p><p>为元素绑定点击事件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toggleAll<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toggle-all<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toggle-all<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>添加处理程序：</p><pre class=" language-js"><code class="language-js"><span class="token function">toggleAll</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 获取点击的元素</span>    <span class="token keyword">var</span> inputs <span class="token operator">=</span> ev<span class="token punctuation">.</span>target<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// console.log(inputs.checked);</span>    <span class="token comment" spellcheck="true">// 循环所有数据为状态重新赋值</span>    <span class="token comment" spellcheck="true">// 因为每个元素的选中状态都是使用 v-model 的双向数据绑定，</span>    <span class="token comment" spellcheck="true">// 因此 数据发生改变，状态即改变，状态改变，数据也会改变</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>list_data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stat <span class="token operator">=</span> inputs<span class="token punctuation">.</span>checked<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-5-完成任务"><a href="#4-5-完成任务" class="headerlink" title="4.5 完成任务"></a>4.5 完成任务</h3><p>如果任务完成，状态改为选中， <code>li</code> 的 <code>class</code> 属性为 <code>completed</code> 时文字有中划线；</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(val,key) in list_data<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{completed:val.stat}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><h3 id="4-6-删除任务"><a href="#4-6-删除任务" class="headerlink" title="4.6 删除任务"></a>4.6 删除任务</h3><p>绑定点击事件，将当前索引值传入事件处理程序：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>removeTodo(key)<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>按照索引，删除相应的数据：</p><pre class=" language-js"><code class="language-js"><span class="token function">removeTodo</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list_data<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h3 id="4-7-删除已完成的任务"><a href="#4-7-删除已完成的任务" class="headerlink" title="4.7 删除已完成的任务"></a>4.7 删除已完成的任务</h3><p>绑定事件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>removeAllDone<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clear-completed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Clear completed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>循环遍历所有数据，删除已被标记为完成的任务：</p><pre class=" language-js"><code class="language-js"><span class="token function">removeAllDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list_data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stat <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>list_data<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>循环的代码看起来很不舒服, <strong><code>Array.prototype.filter()</code></strong> 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 原始写法</span><span class="token comment" spellcheck="true">// var new_arr = arr.filter(function(v){</span><span class="token comment" spellcheck="true">//     // if(v>8){</span><span class="token comment" spellcheck="true">//     //     return true;</span><span class="token comment" spellcheck="true">//     // }</span><span class="token comment" spellcheck="true">//     return v>8;</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// 箭头函数写法</span><span class="token comment" spellcheck="true">// var new_arr = arr.filter((v)=>{</span><span class="token comment" spellcheck="true">//     return v>8;</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// 精简写法</span><span class="token keyword">var</span> new_arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> v <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改项目代码：</p><pre class=" language-js"><code class="language-js"><span class="token function">removeAllDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 原始循环判断用法</span>    <span class="token comment" spellcheck="true">// for(let i=0;i&lt;list_data.length;i++){</span>    <span class="token comment" spellcheck="true">//     if(list_data[i].stat == true){</span>    <span class="token comment" spellcheck="true">//         this.list_data.splice(i,1);</span>    <span class="token comment" spellcheck="true">//     }</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// 上面是循环删除符合条件的数据</span>    <span class="token comment" spellcheck="true">// 下面是保留不符合条件的数据</span>    <span class="token comment" spellcheck="true">// 原始标准库对象方法</span>    <span class="token comment" spellcheck="true">// this.list_data = this.list_data.filter(function(v){</span>    <span class="token comment" spellcheck="true">//     if(v.stat == false){</span>    <span class="token comment" spellcheck="true">//         return true;</span>    <span class="token comment" spellcheck="true">//     }</span>    <span class="token comment" spellcheck="true">// })</span>    <span class="token comment" spellcheck="true">// 箭头函数方法</span>    <span class="token comment" spellcheck="true">// this.list_data = this.list_data.filter(function(v){</span>    <span class="token comment" spellcheck="true">//     return !v.stat;</span>    <span class="token comment" spellcheck="true">// })</span>    <span class="token comment" spellcheck="true">// 精简方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list_data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list_data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">!</span>v<span class="token punctuation">.</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>TodoList 案例暂时告一段落，我们并没有将产品做完，因为我们需要用到其他知识了；</p><blockquote><h5 id="Vue-Devtools-调试工具"><a href="#Vue-Devtools-调试工具" class="headerlink" title="Vue Devtools 调试工具"></a><a href="https://cn.vuejs.org/v2/guide/installation.html#Vue-Devtools" target="_blank" rel="noopener">Vue Devtools</a> 调试工具</h5><p>在使用 Vue 时，我们推荐在你的浏览器上安装 <a href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank" rel="noopener">Vue Devtools</a>。它允许你在一个更友好的界面中审查和调试 Vue 应用。</p></blockquote><h2 id="第-5-章-MVVM-设计思想"><a href="#第-5-章-MVVM-设计思想" class="headerlink" title="第 5 章 MVVM 设计思想"></a>第 5 章 MVVM 设计思想</h2><p><strong>MVC 设计思想：</strong></p><p>M: model 数据模型层 提供数据</p><p>V: Views 视图层 渲染数据</p><p>C: controller 控制层 调用数据渲染视图</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-20_12-59-04.png" alt=""></p><p><strong>MVVM 设计思想：</strong></p><p>M: model 数据模型层 提供数据</p><p>V: Views 视图层 渲染数据</p><p>VM：ViewsModel 视图模型层 调用数据渲染视图</p><p>​ 由数据来驱动视图（不需要过多考虑 dom 操作，把重心放在 VM）</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-20_13-42-18.png" alt=""></p><h2 id="第-6-章-其他知识点汇总"><a href="#第-6-章-其他知识点汇总" class="headerlink" title="第 6 章 其他知识点汇总"></a>第 6 章 其他知识点汇总</h2><h3 id="6-1-计算属性与侦听器"><a href="#6-1-计算属性与侦听器" class="headerlink" title="6.1 计算属性与侦听器"></a>6.1 计算属性与侦听器</h3><h4 id="6-1-1-计算属性"><a href="#6-1-1-计算属性" class="headerlink" title="6.1.1 计算属性"></a>6.1.1 计算属性</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xing<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ming<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  { {xing + ming}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#div"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      xing<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      ming<span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。因此我们可以使用方法，来进行运算并返回数据：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xing<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ming<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  { { fullnam e() }}  <span class="token comment" spellcheck="true">&lt;!-- 一百次调用，观察时间结果--></span>  { { fullnam e() }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#div"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      xing<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      ming<span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">fullname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xing <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ming <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>注意，每次在模板中使用 <code>{ { fullnam e() }}</code> fullname 方法就会被调用执行一次；所以，对于任何复杂逻辑，你都应当使用<strong>计算属性</strong> ，因为计算属性，会自动缓存数据：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xing<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ming<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  { {fulln} }  <span class="token comment" spellcheck="true">&lt;!-- 一百次调用 --></span>  { {fulln} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#div"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      xing<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      ming<span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">fulln</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xing <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ming <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的依赖进行缓存的</strong>。只在相关依赖发生改变时它们才会重新求值；多次调用，计算属性会立即返回之前的计算结果，而不必再次执行函数。</p><h4 id="6-1-2-利用计算属性获取未完成任务个数"><a href="#6-1-2-利用计算属性获取未完成任务个数" class="headerlink" title="6.1.2 利用计算属性获取未完成任务个数"></a>6.1.2 利用计算属性获取未完成任务个数</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo-count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>{ {getNu}}&lt; /strong> item left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 未完成任务个数</span>    <span class="token function">getNu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list_data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>v<span class="token punctuation">.</span>stat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-1-3-使用侦听器"><a href="#6-1-3-使用侦听器" class="headerlink" title="6.1.3 使用侦听器"></a>6.1.3 使用侦听器</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xing<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ming<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  { { fullnam e }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#div"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      xing<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      ming<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      fullname<span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置侦听器</span>    watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 侦听器中的方法名和要真挺的数据属性名必须一致</span>      <span class="token comment" spellcheck="true">// xing 发生变化，侦听器就会被执行，且将变化后的值和变化前的值传入</span>      xing<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> old_val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fullname <span class="token operator">=</span> newVal <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ming<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      ming<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fullname <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xing <span class="token operator">+</span> newVal<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>通过上面的案例，我们基本掌握了侦听器的使用，但是我们也发现，与计算属性相比，侦听器并没有优势；也不见得好用，直观上反而比计算属性的使用更繁琐；</p><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xing<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ming<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  { { fullnam e }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./jq.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#div"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      xing<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      ming<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      fullname<span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置侦听器</span>    watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 侦听器中的方法名和要真挺的数据属性名必须一致</span>      <span class="token comment" spellcheck="true">// xing 发生变化，侦听器就会被执行，且将变化后的值和变化前的值传入</span>      xing<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> old_val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// this.fullname = newVal+this.ming;</span>        <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在侦听器中执行异步网络请求</span>        $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"./xx.php"</span><span class="token punctuation">,</span> d <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          t<span class="token punctuation">.</span>fullname <span class="token operator">=</span> d<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="6-2-使用-ref-操作-DOM"><a href="#6-2-使用-ref-操作-DOM" class="headerlink" title="6.2 使用 ref 操作 DOM"></a>6.2 使用 ref 操作 DOM</h3><p>在学习 jq 时，我们首要任务就是学习选择的使用，因为选择可以极其方便帮助我们获取节点查找 dom，因为我们要通过 dom 展示处理数据。而在 Vue 中，我们的编程理念发生了变化，变为了数据驱动 dom；但有时我们因为某些情况不得不脱离数据操作 dom,因此 vue 为我们提供了 ref 属性获取 dom 节点；</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>click<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      click<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用原生JS获取dom数据</span>        <span class="token comment" spellcheck="true">// var p = document.getElementsByTagName('p')[0].innerHTML;</span>        <span class="token comment" spellcheck="true">// console.log(p);</span>        <span class="token comment" spellcheck="true">// 使用vue ref 属性获取dom数据</span>        <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>pv<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>$refs<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>但是在项目开发中，尽可能不要这样做，因为从一定程度上，ref 违背的 mvvm 设计原则；</p><h3 id="6-3-过滤器的使用"><a href="#6-3-过滤器的使用" class="headerlink" title="6.3 过滤器的使用"></a>6.3 过滤器的使用</h3><h4 id="6-3-1-私有-局部-过滤器"><a href="#6-3-1-私有-局部-过滤器" class="headerlink" title="6.3.1 私有(局部)过滤器"></a>6.3.1 私有(局部)过滤器</h4><p><strong>定义过滤器</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">"UP"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//定义过滤器</span>  filters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 过滤器的名称及方法</span>    myFilters<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>过滤器的使用：</p><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化转义等操作。过滤器可以用在两个地方：<strong>双花括号插值和 v-bind 表达式</strong> (后者从 2.1.0+ 开始支持)。过滤器要被添加到操作值得后面，使用 管道符 <code>|</code> 分割；vue 会自动将操作值，以实参的形式传入过滤器的方法中；</p><p><code>{ {msg|myFilter s}}</code></p><p><strong>过滤敏感词汇</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  { {msg|myFilter s|get3}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//定义过滤器</span>    filters<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 过滤器的名称及方法</span>      myFilters<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      get3<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 遇到数字替换为 0</span>        <span class="token comment" spellcheck="true">// var reg = /\d/g;</span>        <span class="token comment" spellcheck="true">// return val.replace(reg,0);</span>        <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"苍井空"</span><span class="token punctuation">,</span> <span class="token string">"***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="6-3-2-全局过滤器"><a href="#6-3-2-全局过滤器" class="headerlink" title="6.3.2 全局过滤器"></a>6.3.2 全局过滤器</h4><p>上面的代码中，<code>myFilters</code> 及 <code>get3</code> 两个过滤器，仅在当前 vue 实例中可用；如果在代码 再次 <code>var app2 = new Vue()</code> 得到变量为 <code>app2</code> 的 vue 实例，则两个过滤器在 app2 中都不可用；如果需要过滤器在所有实例对象中可用，我们需要声明 <strong>全局过滤器</strong></p><p><code>Vue.filter(名称,处理器)</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  { {msg|myFilter s}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 定义两个DOM节点 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  { {msg|myFilter s|get3}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">"myFilters"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 定义两个全局过滤器</span>  Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">"get3"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"苍井空"</span><span class="token punctuation">,</span> <span class="token string">"***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 两个Vue 实例</span>  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> app2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app2"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="6-4-自定义指令"><a href="#6-4-自定义指令" class="headerlink" title="6.4 自定义指令"></a>6.4 自定义指令</h3><p>前面我们学过 <code>v-on 、v-model、v-show</code> 等指令，在操作 dom 时使用了 ref 属性，其实之前学过的指令也是操作 dom 的一种方式，但有时，这些指令并不能满足我们的需求，因此 vue 允许我们自定义指令来操作 dom</p><h4 id="6-4-1-全局自定义指令"><a href="#6-4-1-全局自定义指令" class="headerlink" title="6.4.1 全局自定义指令"></a>6.4.1 全局自定义指令</h4><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p v<span class="token operator">-</span>setcolor<span class="token operator">></span>自定义指令的使用<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 注册一个全局自定义指令 `v-focus`</span>    Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'setcolor'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当被绑定的元素插入到 DOM 中时……</span>        inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 聚焦元素</span>            el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="6-4-2-私有-局部-自定义指令"><a href="#6-4-2-私有-局部-自定义指令" class="headerlink" title="6.4.2 私有(局部)自定义指令"></a>6.4.2 私有(局部)自定义指令</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-setcolor</span><span class="token punctuation">></span></span>自定义指令的使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 注册 局部(私有)指令</span>    directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 定义指令名称</span>      setcolor<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当被绑定的元素插入到 DOM 中时……</span>        inserted<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 聚焦元素</span>          el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="6-4-3-利用自定义指令使-TodoList-获取焦点"><a href="#6-4-3-利用自定义指令使-TodoList-获取焦点" class="headerlink" title="6.4.3 利用自定义指令使 TodoList 获取焦点"></a>6.4.3 利用自定义指令使 TodoList 获取焦点</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addTodo<span class="token punctuation">"</span></span>  <span class="token attr-name">v-getfocus</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>new-todo<span class="token punctuation">"</span></span>  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 注册 局部(私有)指令</span>directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义指令名称</span>    getfocus<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当被绑定的元素插入到 DOM 中时……</span>        inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 聚焦元素</span>            el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h4 id="6-4-4-为自定义指令传值"><a href="#6-4-4-为自定义指令传值" class="headerlink" title="6.4.4 为自定义指令传值"></a>6.4.4 为自定义指令传值</h4><p>之前学习的指令中，有的指令可以传值，有的则没有，而我们自定的指令中是没有值的，如果想为自定义指令赋值，如下即可：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-setcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colors<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>自定义指令的使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      colors<span class="token punctuation">:</span> <span class="token string">"yellow"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 注册 局部(私有)指令</span>    directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 定义指令名称</span>      setcolor<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 自定义指令可以接受第二个参数</span>        inserted<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 第二个参数中包含了指令名称、挂载名称及数据键值</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 聚焦元素</span>          el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> val<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="6-5-过度及动画"><a href="#6-5-过度及动画" class="headerlink" title="6.5 过度及动画"></a>6.5 过度及动画</h3><p>我们可以使用 v-if 或者 v-show 控制 dom 元素的显示和隐藏</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>go<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示/隐藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>is<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>pppppp1111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      isShow<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>而在显示和隐藏的过程中，我们加入一些动画效果：</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-18_18-21-21.png" alt=""></p><p>在进入/离开的过渡中，会有 6 个 class 切换。</p><ol><li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li><li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li><li><code>v-enter-to</code>: <strong>2.1.8 版及以上</strong> 定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 <code>v-enter</code> 被移除)，在过渡/动画完成之后移除。</li><li><code>v-leave</code>: 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li><li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li><li><code>v-leave-to</code>: <strong>2.1.8 版及以上</strong> 定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 <code>v-leave</code> 被删除)，在过渡/动画完成之后移除。</li></ol><p>对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 <code>&lt;transition&gt;</code>，则 <code>v-</code> 是这些类名的默认前缀。如果你使用了 <code>&lt;transition name=&quot;my-transition&quot;&gt;</code>，那么 <code>v-enter</code> 会替换为 <code>my-transition-enter</code>。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.fade-enter-active</span>,  <span class="token class">.fade-leave-active</span> </span><span class="token punctuation">{</span>    <span class="token property">transition</span><span class="token punctuation">:</span> opacity <span class="token number">1</span>s<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.fade-enter</span>,  <span class="token class">.fade-leave-to</span> </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.man-enter-active</span>,  <span class="token class">.man-leave-active</span> </span><span class="token punctuation">{</span>    <span class="token property">transition</span><span class="token punctuation">:</span> opacity <span class="token number">4</span>s<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.man-enter</span>,  <span class="token class">.man-leave-to</span> </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>go<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示/隐藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>pppppp1111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>pppppp222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ul<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(v,k) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>v<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      { {v} }      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0)<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>del(k)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition-group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      isShow<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">del</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--注意：transition只对单个有效，而transition-group可以对一组有效，两者使用方式基本一样，后者有tag，这个属性作用主要是当页面完成后，替换transition标签，可以是任何DOM元素可以配合第三方vue2-animate包使用npm install vue2-animate此包只需在transition标签的name加上要应用的效果即可(以上示例)也可使用原始的animate官方包 ，效果更多，但需自行修改class名称下载：从下面效果展示链接下载以下是原animate使用示例--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>  <span class="token attr-name"><span class="token namespace">name:</span>fade</span>  <span class="token attr-name">enter-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animated swing<span class="token punctuation">"</span></span>  <span class="token attr-name">leave-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animated shake<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--使用注意：在修改类内必须加animate 后面接着要使用的动画类即可--></span></code></pre><p>transition</p><ul><li><code>name</code> - string，用于自动生成 CSS 过渡类名。例如：<code>name: &#39;fade&#39;</code> 将自动拓展为<code>.fade-enter</code>，<code>.fade-enter-active</code>等。默认类名为 <code>&quot;v&quot;</code></li><li><code>appear</code> - boolean，是否在初始渲染时使用过渡。默认为 <code>false</code>。</li><li><code>css</code> - boolean，是否使用 CSS 过渡类。默认为 <code>true</code>。如果设置为 <code>false</code>，将只通过组件事件触发注册的 JavaScript 钩子。</li><li><code>type</code> - string，指定过渡事件类型，侦听过渡何时结束。有效值为 <code>&quot;transition&quot;</code> 和 <code>&quot;animation&quot;</code>。默认 Vue.js 将自动检测出持续时间长的为过渡事件类型。</li><li><code>mode</code> - string，控制离开/进入的过渡时间序列。有效的模式有 <code>&quot;out-in&quot;</code> 和 <code>&quot;in-out&quot;</code>；默认同时生效。</li><li><code>duration</code> - number | { <code>enter</code>: number, <code>leave</code>: number } 指定过渡的持续时间。默认情况下，Vue 会等待过渡所在根元素的第一个 <code>transitionend</code> 或 <code>animationend</code> 事件。</li></ul><p>transition-group</p><ul><li><code>tag</code> - string，默认为 <code>span</code></li><li><code>move-class</code> - 覆盖移动过渡期间应用的 CSS 类。</li><li>除了 <code>mode</code>，其他特性和 <code>&lt;transition&gt;</code> 相同。</li></ul><h4 id="初次渲染动画"><a href="#初次渲染动画" class="headerlink" title="初次渲染动画"></a>初次渲染动画</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//在transition标签中，可以设置一个appear指令，这个指令可以实现打开网页\初次进入时触发动画</span><span class="token comment" spellcheck="true">//基本使用：</span><span class="token operator">&lt;</span>transition appear <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>transition<span class="token operator">></span><span class="token comment" spellcheck="true">//也可使用自定义动画效果或第三方库，通过修改class实现</span><span class="token operator">&lt;</span>transition appear  appear<span class="token operator">-</span>active<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'animated swing'</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>transition<span class="token operator">></span><span class="token comment" spellcheck="true">//appear也可修改类名</span></code></pre><p>vue2-animate 动画样式参考链接：<a href="https://the-allstars.com/vue2-animate/" target="_blank" rel="noopener">https://the-allstars.com/vue2-animate/</a></p><p>animate 样式参考链接：<a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">https://daneden.github.io/animate.css/</a></p><p>官方文档所说：<strong>对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 <code>&lt;transition&gt;</code>，则 <code>v-</code> 是这些类名的默认前缀。如果你使用了 <code>&lt;transition name=&quot;my-transition&quot;&gt;</code>，那么 <code>v-enter</code> 会替换为 <code>my-transition-enter</code>。</strong></p><p>这就是 Vue 中动画及过渡的基本使用方式，因为这些动画效果都需要我们自己写 CSS 样式，相对比较麻烦，在项目中，大多情况下，我们会借助第三方 CSS 动画库来实现，如：Animate.css ；后面项目中具体使用时，我们在进一步学习第三方 CSS 动画库的使用；</p><h4 id="使用-js-钩子来动画"><a href="#使用-js-钩子来动画" class="headerlink" title="使用 js 钩子来动画"></a>使用 js 钩子来动画</h4><pre class=" language-html"><code class="language-html">&lt;transition <span class="token comment" spellcheck="true">&lt;!-- 进入 --></span>  v-on:before-enter="beforeEnter" v-on:enter="enter"  v-on:after-enter="afterEnter" v-on:enter-cancelled="enterCancelled"  <span class="token comment" spellcheck="true">&lt;!-- 离开 --></span>  v-on:before-leave="beforeLeave" v-on:leave="leave"  v-on:after-leave="afterLeave" v-on:leave-cancelled="leaveCancelled" >  <span class="token comment" spellcheck="true">&lt;!-- ... --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>// ... methods: { // -------- // 进入中 // -------- beforeEnter: function (el) {// ... }, // 当与 CSS 结合使用时 // 回调函数 done 是可选的 enter: function (el,done) { // ... done() }, afterEnter: function (el) { // ... }, enterCancelled:function (el) { // ... }, // -------- // 离开时 // -------- beforeLeave:function (el) { // ... }, // 当与 CSS 结合使用时 // 回调函数 done 是可选的leave: function (el, done) { // ... done() }, afterLeave: function (el) { // ...}, // leaveCancelled 只用于 v-show 中 leaveCancelled: function (el) { // ... } }<span class="token comment" spellcheck="true">&lt;!--@before-enter   动画执行前@enter        执行动画@after        动画执行中@enter        执行完毕//离开/进入 各有一套--></span></code></pre><p>当只用 JavaScript 过渡的时候，<strong>在 enter 和 leave 中必须使用 done 进行回调</strong>。否则，它们将被同步调用，过渡会立即完成。</p><p>推荐对于仅使用 JavaScript 过渡的元素添加 <code>v-bind:css=&quot;false&quot;</code>，Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响。</p><h4 id="Velocity-js-js-钩子"><a href="#Velocity-js-js-钩子" class="headerlink" title="Velocity.js + js 钩子"></a>Velocity.js + js 钩子</h4><p>velocity 下载链接：<a href="http://www.velocityjs.org/" target="_blank" rel="noopener">http://www.velocityjs.org/</a></p><p><a href="https://cn.vuejs.org/v2/guide/transitions.html#JavaScript-%E9%92%A9%E5%AD%90" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/transitions.html#JavaScript-%E9%92%A9%E5%AD%90</a></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--Velocity 和 jQuery.animate 的工作方式类似，也是用来实现 JavaScript 动画的一个很棒的选择--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show <span class="token punctuation">=</span> !show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Toggle  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>    <span class="token attr-name"><span class="token namespace">v-on:</span>before-enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beforeEnter<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">v-on:</span>enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enter<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">v-on:</span>leave</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leave<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">v-bind:</span>css</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      Demo    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#example-4"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      show<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      beforeEnter<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transformOrigin <span class="token operator">=</span> <span class="token string">"left"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//进入</span>      enter<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Velocity</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token punctuation">{</span> opacity<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> fontSize<span class="token punctuation">:</span> <span class="token string">"1.4em"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> duration<span class="token punctuation">:</span> <span class="token number">300</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Velocity</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token punctuation">{</span> fontSize<span class="token punctuation">:</span> <span class="token string">"1em"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> complete<span class="token punctuation">:</span> done <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//complete 作用：通知动画结束</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//离开</span>      leave<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Velocity</span><span class="token punctuation">(</span>          el<span class="token punctuation">,</span>          <span class="token punctuation">{</span> translateX<span class="token punctuation">:</span> <span class="token string">"15px"</span><span class="token punctuation">,</span> rotateZ<span class="token punctuation">:</span> <span class="token string">"50deg"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> duration<span class="token punctuation">:</span> <span class="token number">600</span> <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Velocity</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token punctuation">{</span> rotateZ<span class="token punctuation">:</span> <span class="token string">"100deg"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> loop<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Velocity</span><span class="token punctuation">(</span>          el<span class="token punctuation">,</span>          <span class="token punctuation">{</span>            rotateZ<span class="token punctuation">:</span> <span class="token string">"45deg"</span><span class="token punctuation">,</span>            translateY<span class="token punctuation">:</span> <span class="token string">"30px"</span><span class="token punctuation">,</span>            translateX<span class="token punctuation">:</span> <span class="token string">"30px"</span><span class="token punctuation">,</span>            opacity<span class="token punctuation">:</span> <span class="token number">0</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> complete<span class="token punctuation">:</span> done <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="多个元素-组件过渡"><a href="#多个元素-组件过渡" class="headerlink" title="多个元素/组件过渡"></a>多个元素/组件过渡</h4><p><a href="https://cn.vuejs.org/v2/guide/transitions.html#%E5%A4%9A%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E8%BF%87%E6%B8%A1" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/transitions.html#%E5%A4%9A%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E8%BF%87%E6%B8%A1</a></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--多个元素--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>out-in<span class="token punctuation">'</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--如果不设置mode 那么开始离开动画将同时执行，有时效果会不那么好，  参数可以参考以上，这里用的是先离开后进入 --></span>    &lt;button v-if='show === 'div1' ' key='1'>  <span class="token comment" spellcheck="true">&lt;!--相同标签名必须设置key区分，否则应用全部--></span>        name:1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    &lt;button v-if='show === 'div2' ' key='2'>        name:2    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>toggle<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        toggle    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>new Vue({el:'#app',data:{show:'div1'},methods:{toggle()    {        this.show = this.show === 'div1' ? 'div2' : 'div1'    }}})<span class="token comment" spellcheck="true">&lt;!--上面的例子利用动态key简写--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>show<span class="token punctuation">'</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>out-in<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    { {ShowMassage} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>toggle<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    toggle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>new Vue({el:'#app',data:{show:'div1'},computed:{    ShowMassage()    {         switch (this.show) {          case 'div1': return 'div1'          case 'div2': return 'div2'        }    } },methods:{toggle()    {        this.show = this.show === 'div1' ? 'div2' : 'div1'    }}})<span class="token comment" spellcheck="true">&lt;!--在一些场景中，也可以通过给同一个元素的 key 特性设置不同的状态来代替 v-if 和 v-else，上面的例子可以重写为：--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isEditing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    { { isEditin g ? 'Save' : 'Edit' }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--多个组件--></span><span class="token comment" spellcheck="true">&lt;!--不需要使用 key 特性。相反，我们只需要使用动态组件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>  <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>out-in<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>toggle<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    toggle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>new Vue({  el: '#transition-components-demo',  data: {    view: 'v-a'  },methods:{toggle(){this.view = this.view === 'v-a' ? 'v-b' :'v-a'}},  components: {    'v-a': {      template: '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Component A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>'    },    'v-b': {      template: '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Component B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>'    }  }})</code></pre><h2 id="第-7-章-json-server-与-axios"><a href="#第-7-章-json-server-与-axios" class="headerlink" title="第 7 章 json-server 与 axios"></a>第 7 章 json-server 与 axios</h2><p>一个项目从立项开始，一般都是前后端同时进行编码工作的，而此时前端需要的接口和数据后台都是无法提供的；</p><h3 id="7-1-json-server-使用"><a href="#7-1-json-server-使用" class="headerlink" title="7.1 json-server 使用"></a>7.1 json-server 使用</h3><p>使用全局安装 ：<code>npm install json-server -g</code></p><p>json-server 会将一个 json 文件作为数据库来存储数据，对 json 数据的格式是有要求的，如 data.json 的内容：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"tb1"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"标题1"</span><span class="token punctuation">,</span>      <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"描述信息1"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"标题2"</span><span class="token punctuation">,</span>      <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"描述信息2"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"tb2"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"some comment"</span><span class="token punctuation">,</span>      <span class="token property">"postId"</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"tb3"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"typicode"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动服务： <code>json-server --watch data.json</code></p><p>启动成功后，提示信息如下：</p><pre class=" language-shell"><code class="language-shell">$ json-server --watch data.json  \{^_^}/ hi!  Loading data.json  Done  Resources  http://localhost:3000/tb1  http://localhost:3000/tb2  http://localhost:3000/tb3  Home  http://localhost:3000  Type s + enter at any time to create a snapshot of the database  Watching...</code></pre><p>得到 tb1 所有的数据 GET： <a href="http://localhost:3000/tb1" target="_blank" rel="noopener">http://localhost:3000/tb1</a></p><p>根据 id 得到数据 GET ： <a href="http://localhost:3000/tb1/2" target="_blank" rel="noopener">http://localhost:3000/tb1/2</a></p><p>添加一条数据 POST： <a href="http://localhost:3000/tb1" target="_blank" rel="noopener">http://localhost:3000/tb1</a></p><p>删除一条数据 DELETE： <a href="http://localhost:3000/tb1/2" target="_blank" rel="noopener">http://localhost:3000/tb1/2</a></p><p>模糊查找 GET ： <a href="http://localhost:3000/tb1?title_like=标题" target="_blank" rel="noopener">http://localhost:3000/tb1?title_like=标题</a></p><p>根据 id 修改数据 PUT： <a href="http://localhost:3000/tb1/1" target="_blank" rel="noopener">http://localhost:3000/tb1/1</a></p><blockquote><p>注意：json-server 严格遵循 HTTP 请求语义进行数据处理</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-18_03-34-14.png" alt=""></p><h3 id="7-2-axios"><a href="#7-2-axios" class="headerlink" title="7.2 axios"></a>7.2 axios</h3><p>我们在构建应用时需要访问一个 API 并展示其数据。做这件事的方法有好几种，而使用基于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener"><strong>Promise</strong></a> 的 HTTP 客户端 <a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a> 则是其中非常流行的一种。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./axios.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 获取全部数据</span>  axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:3000/list_data"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取一条数据</span>  axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:3000/list_data/2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 添加一条数据</span>  axios    <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://localhost:3000/list_data"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> stat<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"喝水"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>d <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 删除一条数据</span>  axios    <span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">"http://localhost:3000/list_data/4"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>d <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 修改一条数据</span>  axios    <span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"http://localhost:3000/list_data/6"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"hhhhhh"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>d <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="第-8-章-重构-TodoList-案例"><a href="#第-8-章-重构-TodoList-案例" class="headerlink" title="第 8 章 重构 TodoList 案例"></a>第 8 章 重构 TodoList 案例</h2><h3 id="8-1-启动-API-接口及数据"><a href="#8-1-启动-API-接口及数据" class="headerlink" title="8.1 启动 API 接口及数据"></a>8.1 启动 API 接口及数据</h3><p><strong>db.json:</strong></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"list_data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"吃饭"</span><span class="token punctuation">,</span>      <span class="token property">"stat"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"睡觉"</span><span class="token punctuation">,</span>      <span class="token property">"stat"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"打豆豆"</span><span class="token punctuation">,</span>      <span class="token property">"stat"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>启动服务： <code>json-server --watch db.json</code></p><h3 id="8-2-获取全部任务"><a href="#8-2-获取全部任务" class="headerlink" title="8.2 获取全部任务"></a>8.2 获取全部任务</h3><pre class=" language-js"><code class="language-js">el<span class="token punctuation">:</span> <span class="token string">'#todoapp'</span><span class="token punctuation">,</span>data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// list_data:list_data,</span>    list_data<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// es6属性简写</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 当vue实例获取到 el:'#todoapp' 自动调用执行 mounted 方法</span>mounted<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'http://localhost:3000/list_data'</span><span class="token punctuation">;</span>    axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>backdata<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(backdata.data);</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list_data <span class="token operator">=</span> backdata<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h3 id="8-3-添加任务"><a href="#8-3-添加任务" class="headerlink" title="8.3 添加任务"></a>8.3 添加任务</h3><pre class=" language-js"><code class="language-js">……methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 添加任务事件处理器</span>    <span class="token comment" spellcheck="true">// addTodo:function(){}</span>    <span class="token comment" spellcheck="true">// 简写形式</span>    <span class="token function">addTodo</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取当前触发事件的元素</span>        <span class="token keyword">var</span> inputs <span class="token operator">=</span> ev<span class="token punctuation">.</span>target<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取value值，去除空白后判断，如果为空，则不添加任务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inputs<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 组装任务数据</span>        <span class="token keyword">var</span> todo_data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 通过服务器添加数据时，不需要id值</span>            <span class="token comment" spellcheck="true">// id: this.list_data.length + 1 + 1,</span>            title<span class="token punctuation">:</span> inputs<span class="token punctuation">.</span>value<span class="token punctuation">,</span>            stat<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'http://localhost:3000/list_data'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将数据提交保存到服务器</span>        axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>todo_data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>back_data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">let</span> <span class="token punctuation">{</span>data<span class="token punctuation">,</span>status<span class="token punctuation">}</span> <span class="token operator">=</span> back_data<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// console.log(this.list_data);</span>                <span class="token comment" spellcheck="true">// 数据保存成功后，将数据添加到任务列表展示</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>list_data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 清空文本框</span>        inputs<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    ……</code></pre><h3 id="8-4-删除任务"><a href="#8-4-删除任务" class="headerlink" title="8.4 删除任务"></a>8.4 删除任务</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>removeTodo(key,val.id)<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 删除操作</span><span class="token function">removeTodo</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'http://localhost:3000/list_data/'</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    axios<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>back_data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 结构对象</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span>data<span class="token punctuation">,</span>status<span class="token punctuation">}</span> <span class="token operator">=</span> back_data<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// console.log(back_data);</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>list_data<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h3 id="8-5-完成任务"><a href="#8-5-完成任务" class="headerlink" title="8.5 完成任务"></a>8.5 完成任务</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>  <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(val,key) in list_data<span class="token punctuation">"</span></span>  <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todoDone(key,val.id)<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{completed:val.stat}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 完成任务 事件处理器(新添加，原案例中没有)</span><span class="token function">todoDone</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'http://localhost:3000/list_data/'</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 组装数据准备修改服务器数据</span>    setdata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注意：事件优先于浏览器渲染执行，获取当前状态</span>    <span class="token keyword">var</span> chestat <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list_data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>stat<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 状态取反</span>    setdata<span class="token punctuation">.</span>stat <span class="token operator">=</span> <span class="token operator">!</span>chestat<span class="token punctuation">;</span>    setdata<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list_data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// console.log(setdata);</span>    axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>setdata<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>backdata<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">var</span> <span class="token punctuation">{</span>data<span class="token punctuation">,</span>status<span class="token punctuation">}</span> <span class="token operator">=</span> backdata<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果服务器修改失败,则重新渲染DOM节点样式，改回原始状态</span>        <span class="token comment" spellcheck="true">// 服务器返回状态有误</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>list_data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>stat <span class="token operator">=</span> chestat<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果异步执行失败失败,则重新渲染DOM节点样式，改回原始状态</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>list_data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>stat <span class="token operator">=</span> chestat<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h3 id="8-6-案例中的-Bug"><a href="#8-6-案例中的-Bug" class="headerlink" title="8.6 案例中的 Bug"></a>8.6 案例中的 Bug</h3><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-18_13-45-49.png" alt=""></p><p>修改：<code>&lt;button @click.stop=&quot;removeTodo(key,val.id)&quot; class=&quot;destroy&quot;&gt;&lt;/button&gt;</code></p><h2 id="第-9-章-组件"><a href="#第-9-章-组件" class="headerlink" title="第 9 章 组件"></a>第 9 章 组件</h2><p><a href="https://cn.vuejs.org/v2/guide/components.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/components.html</a></p><p><a href="https://cn.vuejs.org/v2/guide/components-registration.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/components-registration.html</a></p><h3 id="9-1-认识组件"><a href="#9-1-认识组件" class="headerlink" title="9.1 认识组件"></a>9.1 认识组件</h3><p>组件系统是 Vue 的一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。通常一个应用会以一棵嵌套的组件树的形式来组织：</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-18_18-33-54.png" alt=""></p><p>例如，你可能会有页头、侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类的组件。</p><h3 id="9-2-基本使用"><a href="#9-2-基本使用" class="headerlink" title="9.2 基本使用"></a>9.2 基本使用</h3><p>组件是可复用的 Vue 实例，且带有一个名字。把这个组件作为自定义元素来使用。组件的好处是写一次可以进行任意次数的复用。</p><pre class=" language-html"><code class="language-html">//1.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 使用组件 --></span>  <span class="token comment" spellcheck="true">&lt;!-- 将组件名直接当做标签名在html代码中使用即可 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mytemp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mytemp</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 组件可以进行任意次数的复用 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mytemp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mytemp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>//2.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是一个组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 定义一个名为 mytemp 的新组件</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"mytemp"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// template属性的值，作为组件的内容</span>    <span class="token comment" spellcheck="true">// vue 会把这个值替换到html中并会被浏览器渲染</span>    template<span class="token punctuation">:</span> <span class="token string">"&lt;h2>我是一个组件&lt;/h2>"</span> <span class="token comment" spellcheck="true">//template 值也可以是  #app2 像vue实例的el一样</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>上面代码中我们直接使用 <code>Vue.component()</code> 方法定义了组件，而这个 <code>mytemp</code> 组件可以用在所有 vue 实例中，</p><p>这种组件被称为 <strong><em>全局组件</em></strong></p><p>在具体的某个 vue 实例中，也可以定义组件，但是组件仅会在具体的 vue 实例中起作用，这种组件被称为 <strong><em>局部(私有)组件</em></strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 使用组件 --></span>  <span class="token comment" spellcheck="true">&lt;!-- 将组件名直接当做标签名在html代码中使用即可 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mytemp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mytemp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 不可用 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mytemp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mytemp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// app 的私有组件，其他实例对象不可用</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      mytemp<span class="token punctuation">:</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">"&lt;h2>我是一个组件&lt;/h2>"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> app2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app2"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="9-3-使用注意"><a href="#9-3-使用注意" class="headerlink" title="9.3 使用注意"></a>9.3 使用注意</h3><p>组件名如果是驼峰法命名，使用组件时要将大写字母改为小写，并且在前面加上 <code>-</code></p><p>组件中的 tamplate 属性必须有一个唯一的根元素，否则会报错</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 使用组件 --></span>  <span class="token comment" spellcheck="true">&lt;!-- 将组件名直接当做标签名在html代码中使用即可 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-temp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-temp</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 单标签方式使用 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-temp</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 不可用 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mytemp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mytemp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// app 的私有组件，其他实例对象不可用</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 驼峰法命名</span>      myTemp<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 必须有唯一的根标签，多标签报错</span>        template<span class="token punctuation">:</span> <span class="token string">"&lt;div>&lt;h2>我是一个组件&lt;/h2>&lt;h3>df&lt;/h3>&lt;/div>"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> app2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app2"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="9-4-组件的使用"><a href="#9-4-组件的使用" class="headerlink" title="9.4 组件的使用"></a>9.4 组件的使用</h3><p><strong>CSS 代码</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.top</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">800</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>原始 HTML 代码</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是顶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是左<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是右<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><strong>组件化代码</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tops</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tops</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lefts</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lefts</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rights</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rights</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      tops<span class="token punctuation">:</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'&lt;div class="top">我是顶&lt;/div>'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      lefts<span class="token punctuation">:</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'&lt;div class="left">我是左&lt;/div>'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      rights<span class="token punctuation">:</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'&lt;div class="right">我是右&lt;/div>'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="9-5-组件中的数据及方法"><a href="#9-5-组件中的数据及方法" class="headerlink" title="9.5 组件中的数据及方法"></a>9.5 组件中的数据及方法</h3><p>组件是带有名字的可复用的 <strong>Vue 实例</strong> ，所以它们与 <code>new Vue</code> 实例对象接收相同的参数选项 <code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code> , 但 <code>el</code>例外；</p><p>虽然组件和实例对象可以接收相同的参数选项，但在具体使用中，vue 实例对象的 <code>data</code> 与组件中的 <code>data</code> 还是有差异的, 在我们自己写的组件中，<a href="https://cn.vuejs.org/v2/guide/components.html#data-必须是一个函数" target="_blank" rel="noopener"><code>data 必须是一个函数</code></a></p><p><strong>一个组件的 data 选项必须是一个函数</strong>，因此每个实例可以维护一份被返回的对象；</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-temp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-temp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      myTemp<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 一个组件的 data 选项必须是一个函数</span>        data<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 将 数据 装入 对象 返回</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">"我是data选项"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 其他选项的使用不受影响</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        template<span class="token punctuation">:</span> <span class="token string">"&lt;div @click='cli'>{ {msg}}&lt; /div>"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>除 <code>data</code> 选项外，其他选项的使用都是一样的；</p><h3 id="9-6-vue-实例也是组件"><a href="#9-6-vue-实例也是组件" class="headerlink" title="9.6 vue 实例也是组件"></a>9.6 vue 实例也是组件</h3><p>通过<code>new Vue()</code> 可以得到一个实例对象，其实这个实例对象就是一个特殊的组件，也有 <code>template</code> 参数，也可以当做组件来使用；</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  { {msg} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">"数据"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token string">"&lt;h2>组件&lt;/h2>"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>上面的代码中直接为 Vue 实例对象传入了 <code>template</code> 参数，那么 vue 会使用<code>template</code>中的数据替换 <code>el</code> 选中的整个 DOM 节点 , 因此 <code>data</code> 选项中的的数据也不会绑定，因为在绑定数据之前，整个 DOM 节点包括节点中 <code>{ {msg}}</code> 都会被替换；如果想让数据正常绑定，我们可以在 template 数据中加入 <code>{ {msg}}</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  { {msg} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">"数据"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token string">"&lt;h2>组件{ {msg}}&lt; /h2>"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信*"></a>父子组件通信*</h3><h4 id="通过-Prop-向子组件传递数据"><a href="#通过-Prop-向子组件传递数据" class="headerlink" title="通过 Prop 向子组件传递数据"></a>通过 Prop 向子组件传递数据</h4><p><a href="https://cn.vuejs.org/v2/guide/components.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/components.html</a></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mytemp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mytemp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">"数据"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      mytemp<span class="token punctuation">:</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">"&lt;h2>data:{ {msg}}&lt; /h2>"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>运行上面的代码，我们发现，组件 <code>mytemp</code> 并不能获取实例中 <code>data</code> 的数据，这是因为组件与组件之间都拥有各自独立的作用域；</p><p>vue 在组件中提供了<code>props</code> 选项，props 接受一个在组件中自定义属性的值；</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mytemp</span> <span class="token attr-name">cc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>我是cc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mytemp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">"数据"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      mytemp<span class="token punctuation">:</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">"&lt;h2>data:{ {cc}}&lt; /h2>"</span><span class="token punctuation">,</span>        props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"cc"</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>我们知道了 props 的用法后，怎么才能将 vue 实例对象中的数据传入组件中呢？我们可以借助 <code>v-bind</code> 指令来进行传值；</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mytemp</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>cc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>kk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mytemp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">"数据"</span><span class="token punctuation">,</span>      msg2<span class="token punctuation">:</span> <span class="token string">"数据二"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      mytemp<span class="token punctuation">:</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">"&lt;h2>data:{ {cc}} &lt;br>{ {kk}}&lt; /h2>"</span><span class="token punctuation">,</span>        props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"kk"</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>vue 实例对象也是一个组件，而 <code>mytemp</code> 组件就是运行在 实例对象下面的，这时我们也会将 实例对象称为 <strong>父组件</strong>，将 <code>mytemp</code> 组件称为 <strong>子组件</strong>； 而我们上面的代码，实际上已经实现了 <strong>父组件向子组件传递数据</strong>的 功能；</p><h4 id="检索-prop-数据类型"><a href="#检索-prop-数据类型" class="headerlink" title="检索 prop 数据类型"></a>检索 prop 数据类型</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Prop 类型</span><span class="token comment" spellcheck="true">//到这里，我们只看到了以字符串数组形式列出的 prop：</span>props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'likes'</span><span class="token punctuation">,</span> <span class="token string">'isPublished'</span><span class="token punctuation">,</span> <span class="token string">'commentIds'</span><span class="token punctuation">,</span> <span class="token string">'author'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//但是，通常你希望每个 prop 都有指定的值类型。这时，你可以以对象形式列出 prop，这些属性的名称和值分别是 prop 各自的名称和类型：</span>props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span>    propA<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 多个可能的类型</span>    propB<span class="token punctuation">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 必填的字符串</span>    propC<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      required<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 带有默认值的数字</span>    propD<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token number">100</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 带有默认值的对象</span>    propE<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 对象或数组默认值必须从一个工厂函数获取</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'hello'</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 自定义验证函数</span>    propF<span class="token punctuation">:</span> <span class="token punctuation">{</span>      validator<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这个值必须匹配下列字符串中的一个</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token string">'warning'</span><span class="token punctuation">,</span> <span class="token string">'danger'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h4 id="通过-ref-实现父传子"><a href="#通过-ref-实现父传子" class="headerlink" title="通过$ref 实现父传子"></a>通过$ref 实现父传子</h4><p>对于 ref 官方的解释是：ref 是被用来给元素或子组件注册引用信息的。引用信息将会注册在父组件的 $refs 对象上。<br>看不懂对吧？很正常，我也看不懂。那应该怎么理解？看看我的解释：</p><ul><li>如果 ref 用在子组件上，指向的是组件实例，可以理解为对子组件的索引，<strong>通过$ref 可能获取到在子组件里定义的属性和方法</strong>。</li><li>如果 ref 在普通的 DOM 元素上使用，引用指向的就是 DOM 元素，通过$ref 可能获取到该 DOM 的属性集合，轻松访问到 DOM 元素，作用与 JQ 选择器类似。</li></ul><p>那如何通过$ref 实现通信？下面我将上面prop实现的功能，用$ref 实现一遍</p><pre class=" language-js"><code class="language-js"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 父组件 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>我是父组件！<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>child ref<span class="token operator">=</span><span class="token string">"msg"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 子组件 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"app2"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>我是子组件一！<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>          Child<span class="token punctuation">:</span> <span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token string">"#app2"</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token punctuation">{</span>                msg<span class="token punctuation">:</span> <span class="token string">"子组件的信息"</span>              <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>              <span class="token function">getmsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        mounted<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//   console.log(this.$refs.msg); 子组件的属性和方法都可以在$refs中拿到</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>msg<span class="token punctuation">.</span><span class="token function">getmsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"父组件："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token operator">+</span><span class="token string">'已经被我拿到了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>prop 着重于数据的传递，它并不能调用子组件里的属性和方法。像创建文章组件时，自定义标题和内容这样的使用场景，最适合使用 prop。</p><p>$ref 着重于索引，主要用来调用子组件里的属性和方法，其实并不擅长数据传递。而且 ref 用在 dom 元素的时候，能使到选择器的作用，这个功能比作为索引更常有用到。</p><h4 id="通过自定义事件实现子向父传递数据"><a href="#通过自定义事件实现子向父传递数据" class="headerlink" title="通过自定义事件实现子向父传递数据"></a>通过自定义事件实现子向父传递数据</h4><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span> <span class="token operator">></span>        <span class="token comment" spellcheck="true">//3.在父组件中绑定传过来的自定义事件，然后使用这个自定义事件绑定自己的函数，即可实现子传父</span>        <span class="token operator">&lt;</span>mytemp @childevents<span class="token operator">=</span><span class="token string">"Sendparent"</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>mytemp<span class="token operator">></span>        <span class="token comment" spellcheck="true">//&lt;mytemp @childevents="msg = $event"> &lt;/mytemp> 也可以不用函数，使用$event来获取发来的值</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          msg<span class="token punctuation">:</span> <span class="token string">"数据"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>          mytemp<span class="token punctuation">:</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//1.在子组件模板中，定义一个触发事件，触发的函数必须是子组件自己拥有的函数</span>            template<span class="token punctuation">:</span> <span class="token string">' &lt;input type="button" value="提交" @click="send" />'</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token punctuation">{</span>                chilAttr<span class="token punctuation">:</span> <span class="token string">"child"</span>              <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>              <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//2.使用$emit实现子传父</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"childevents"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chilAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//向父元素发送自定义事件    两个参数：1 自定义事件名   2 传参</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token function">Sendparent</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> child<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//注意： 自定义事件的命名不能为驼峰，否则会出错。</span></code></pre><h4 id="父子之间访问"><a href="#父子之间访问" class="headerlink" title="父子之间访问"></a>父子之间访问</h4><h5 id="vm-parent"><a href="#vm-parent" class="headerlink" title="vm.$parent"></a><a href="https://cn.vuejs.org/v2/api/#vm-parent" target="_blank" rel="noopener">vm.$parent</a></h5><ul><li><p><strong>类型</strong>：<code>Vue instance</code></p></li><li><p><strong>只读</strong></p></li><li><p><strong>详细</strong>：</p><p>父实例，如果当前实例有的话。</p></li></ul><h5 id="vm-root"><a href="#vm-root" class="headerlink" title="vm.$root"></a><a href="https://cn.vuejs.org/v2/api/#vm-root" target="_blank" rel="noopener">vm.$root</a></h5><ul><li><p><strong>类型</strong>：<code>Vue instance</code></p></li><li><p><strong>只读</strong></p></li><li><p><strong>详细</strong>：</p><p>当前组件树的根 Vue 实例。如果当前实例没有父实例，此实例将会是其自己。</p></li></ul><h5 id="vm-children"><a href="#vm-children" class="headerlink" title="vm.$children"></a><a href="https://cn.vuejs.org/v2/api/#vm-children" target="_blank" rel="noopener">vm.$children</a></h5><ul><li><p><strong>类型</strong>：<code>Array&lt;Vue instance&gt;</code></p></li><li><p><strong>只读</strong></p></li><li><p><strong>详细</strong>：</p><p>当前实例的直接子组件。<strong>需要注意 $children 并不保证顺序，也不是响应式的。</strong>如果你发现自己正在尝试使用 <code>$children</code> 来进行数据绑定，考虑使用一个数组配合 <code>v-for</code> 来生成子组件，并且使用 Array 作为真正的来源。</p></li></ul><h3 id="非父子组件传值"><a href="#非父子组件传值" class="headerlink" title="非父子组件传值"></a>非父子组件传值</h3><p>有时候，非父子关系的两个组件之间也需要通信。在简单的场景下，可以使用一个空的 Vue 实例作为事件总线。原理就是把 Vue 实例当作一个中转站。</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC.png" alt=""></p><p>可以像上图一样，把 vue 实例放在 vue 的原型上，也可想下面一样，放在根 Vue 的 data 中,使用$root 访问</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>world<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">//子组件</span>  <span class="token keyword">let</span> child <span class="token operator">=</span> <span class="token punctuation">{</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span>      content<span class="token punctuation">:</span> String    <span class="token punctuation">}</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        childCt<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token string">"&lt;button @click='add'>{ {childCt}}&lt; /button>"</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// $root 可以访问到根组件</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span>Bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>childCt<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span>Bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">,</span> res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        that<span class="token punctuation">.</span>childCt <span class="token operator">=</span> res<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//根组件</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      Bus<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      child    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>其中可以直接拿$root来$on 或$emit，效果一样，那为什么要创建另一个 vue 的空实例呢？，按照官网文档的说法，创建另一个 vue 空实例，用来当总线中央处理且更加清晰也便于管理</p><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*插槽的基本使用： 默认 &lt;slot>&lt;/slot>              具名插槽 &lt;slot name='?'>&lt;/slot>默认的插槽由于没有名字，所以当嵌套标签时，默认会替换全部而具名插槽就是来解决这个问题的，使用方式： slot = '对应的name' 即可替换对应的slot，从而解决上述问题注意：但没有传入标签时，会使用默认的规定好的嵌套标签*/</span><span class="token comment" spellcheck="true">//案例</span> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>child<span class="token operator">></span>        <span class="token operator">&lt;</span>span slot<span class="token operator">=</span><span class="token string">'header'</span><span class="token operator">></span>头<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>span slot<span class="token operator">=</span><span class="token string">'center'</span><span class="token operator">></span>body<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>span slot<span class="token operator">=</span><span class="token string">'footer'</span><span class="token operator">></span>脚<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>      <span class="token operator">&lt;</span>child<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token comment" spellcheck="true">//默认  不会产生影响  因为没有名字</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>      <span class="token operator">&lt;</span>child<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token keyword">new</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"child"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">'header'</span><span class="token operator">></span>Default<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>        <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">'center'</span><span class="token operator">></span>Default<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>        <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">'footer'</span><span class="token operator">></span>Default<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>          child<span class="token punctuation">:</span> <span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token string">"#child"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//2.6.0版本更新后以上语法已经废弃，新语法：</span>        <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'app'</span><span class="token operator">></span>                <span class="token operator">&lt;</span>child<span class="token operator">></span>                    <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>header<span class="token operator">></span>                    <span class="token operator">&lt;</span>div<span class="token operator">></span>title<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>                    <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>body<span class="token operator">></span>                    <span class="token operator">&lt;</span>div<span class="token operator">></span>body<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>                    <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>footer<span class="token operator">></span>                    <span class="token operator">&lt;</span>div<span class="token operator">></span>footer<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>             <span class="token operator">&lt;</span>div<span class="token operator">></span>                  <span class="token operator">&lt;</span>header<span class="token operator">></span>                    <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"header"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span>                  <span class="token operator">&lt;</span>main<span class="token operator">></span>                    <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"body"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span>                  <span class="token operator">&lt;</span>footer<span class="token operator">></span>                    <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"footer"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">></span>             <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>            <span class="token operator">&lt;</span>script<span class="token operator">></span>                  <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>                    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                      child<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        template<span class="token punctuation">:</span> <span class="token string">"#container"</span>                      <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//注意 v-slot 只能添加在一个 &lt;template> 上</span></code></pre><h4 id="具名插槽缩写"><a href="#具名插槽缩写" class="headerlink" title="具名插槽缩写"></a>具名插槽缩写</h4><p>v-slot 可以缩写成 # 后跟名称 如： v-slot:title == #title</p><p>如果写成#= “” 将无效，该缩写必须要有参数，必须按照这种格式： #default = ”{user}“</p><p>注意：以上写法在 2.6.0 以上才有效</p><h4 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h4><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>child v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"isShow"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"div"</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>          child<span class="token punctuation">:</span> <span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>                  &lt;span>child&lt;/span>                  &lt;/div>`</span></span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token punctuation">{</span>                isShow<span class="token punctuation">:</span> <span class="token boolean">false</span>              <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          isShow<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//在组件作用域中，每个组件都有自己的作用域，上述的isShow 默认选择了vue实例的isShow，而不是子组件自己的isShow</span></code></pre><h4 id="解决作用域问题-作用域插槽"><a href="#解决作用域问题-作用域插槽" class="headerlink" title="解决作用域问题 (作用域插槽)"></a>解决作用域问题 (作用域插槽)</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*作用域插槽的基本使用：1.在插槽或具名插槽中绑定要传输的数据                    2. 在父级作用域中（应用的地方），加上template标签并添加 v-slot指令，接着赋值任意的名称，最后就可以使用刚刚自定义的名称来访问传过来的数据了                    */</span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>child ref<span class="token operator">=</span><span class="token string">'child1'</span><span class="token operator">></span>            <span class="token operator">&lt;</span>template #title<span class="token operator">=</span><span class="token string">'s'</span><span class="token operator">></span> <span class="token comment" spellcheck="true">// v-slot:title = 's'</span>              <span class="token operator">&lt;</span>span v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">'s.data'</span> @click<span class="token operator">=</span><span class="token string">'toggle(s.data)'</span><span class="token operator">></span>child<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"div"</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>          child<span class="token punctuation">:</span> <span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>                            &lt;slot :data='isShow' name ='title' >                            &lt;/slot>                        &lt;/div>`</span></span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token punctuation">{</span>                isShow<span class="token punctuation">:</span> <span class="token boolean">true</span>              <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          isShow<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          res<span class="token punctuation">:</span><span class="token keyword">null</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">toggle</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>child1<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//$children $refs 都可以获取子组件数据</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>child1<span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isShow                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//此语法只能在2.6.0版本以上使用</span></code></pre><h3 id="动态组件-amp-v-once-amp-keep-live"><a href="#动态组件-amp-v-once-amp-keep-live" class="headerlink" title="动态组件 &amp; v-once &amp; keep-live"></a>动态组件 &amp; v-once &amp; keep-live</h3><h4 id="动态组件的使用"><a href="#动态组件的使用" class="headerlink" title="动态组件的使用"></a>动态组件的使用</h4><pre class=" language-html"><code class="language-html">//使用内置组件 component，并指定 :is 指令，:is指令指向要切换的标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name"><span class="token namespace">is:</span>'toggle'</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span></code></pre><h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h4><p>v-once 这个指令不需要任何表达式，它的作用就是定义它的元素或组件只会渲染一次，包括元素或者组件的所有字节点。首次渲染后，不再随着数据的改变而重新渲染。也就是说使用 v-once，那么该块都将被视为静态内容。</p><pre class=" language-html"><code class="language-html">//只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。<span class="token comment" spellcheck="true">&lt;!-- 单个元素 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-once</span>  <span class="token punctuation">></span></span>This will never change: { {msg}}&lt; /span>  <span class="token comment" spellcheck="true">&lt;!-- 有子元素 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-once</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>comment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{ {msg}}&lt; /p><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 组件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">v-once</span> <span class="token attr-name">:comment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- `v-for` 指令--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i in list<span class="token punctuation">"</span></span> <span class="token attr-name">v-once</span><span class="token punctuation">></span></span>{ {i}}&lt; /li><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  //试着不要过度使用这个模式。当你需要渲染大量静态内容时，极少数的情况下它会给你带来便利，除非你非常留意渲染变慢了，不然它完全是没有必要的——再加上它在后期会带来很多困惑。例如，设想另一个开发者并不熟悉  v-once  或漏看了它在模板中，他们可能会花很多个小时去找出模板为什么无法正确更新。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h4 id="keep-live"><a href="#keep-live" class="headerlink" title="keep-live"></a>keep-live</h4><p><a href="https://cn.vuejs.org/v2/guide/components-dynamic-async.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/components-dynamic-async.html</a></p><p><a href="https://cn.vuejs.org/v2/api/#keep-alive" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#keep-alive</a></p><ul><li><p><strong>Props</strong>：</p><ul><li><code>include</code> - 字符串或正则表达式。只有名称匹配的组件会被缓存。</li><li><code>exclude</code> - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。</li><li><code>max</code> - 数字。最多可以缓存多少组件实例。</li></ul></li><li><p><strong>用法</strong>：</p><p><code>&lt;keep-alive&gt;</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 <code>&lt;transition&gt;</code> 相似，<code>&lt;keep-alive&gt;</code> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。</p><p>当组件在 <code>&lt;keep-alive&gt;</code> 内被切换，它的 <code>activated</code> 和 <code>deactivated</code> 这两个生命周期钩子函数将会被对应执行。</p><blockquote><p>在 2.2.0 及其更高版本中，<code>activated</code> 和 <code>deactivated</code> 将会在 <code>&lt;keep-alive&gt;</code> 树内的所有嵌套组件中触发。</p></blockquote><p>主要用于保留组件状态或避免重新渲染。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 基本 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 多个条件判断的子组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comp-a</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a <span class="token punctuation">></span> 1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comp-a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comp-b</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comp-b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 和 `&lt;transition>` 一起使用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span></code></pre><p>注意，<code>&lt;keep-alive&gt;</code> 是用在其一个直属的子组件被开关的情形。如果你在其中有 <code>v-for</code> 则不会工作。如果有上述的多个条件性的子元素，<code>&lt;keep-alive&gt;</code> 要求同时只有一个子元素被渲染。</p></li><li><p><strong>include and exclude</strong></p><blockquote><p>2.1.0 新增<br><code>include</code> 和 <code>exclude</code> 属性允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示：</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 逗号分隔字符串 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a,b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 正则表达式 (使用 `v-bind`) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/a|b/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 数组 (使用 `v-bind`) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>a<span class="token punctuation">'</span>, <span class="token punctuation">'</span>b<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span></code></pre><p>匹配首先检查组件自身的 <code>name</code> 选项，如果 <code>name</code> 选项不可用，则匹配它的局部注册名称 (父组件 <code>components</code> 选项的键值)。匿名组件不能被匹配。</p></li><li><p><strong>max</strong></p><blockquote><p>2.5.0 新增</p></blockquote><p>最多可以缓存多少组件实例。一旦这个数字达到了，在新实例被创建之前，已缓存组件中最久没有被访问的实例会被销毁掉。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">:max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span></code></pre><p><code>&lt;keep-alive&gt;</code> 不会在函数式组件中正常工作，因为它们没有缓存实例</p></li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>keep-live</p><p><a href="https://jsfiddle.net/chrisvfritz/Lp20op9o/" target="_blank" rel="noopener">https://jsfiddle.net/chrisvfritz/Lp20op9o/</a></p><p><a href="https://jsfiddle.net/Roam/s2erq3b6/61/" target="_blank" rel="noopener">https://jsfiddle.net/Roam/s2erq3b6/61/</a></p><h2 id="第-10-章-Vue-的生命周期"><a href="#第-10-章-Vue-的生命周期" class="headerlink" title="第 10 章 Vue 的生命周期"></a>第 10 章 Vue 的生命周期</h2><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会。</p><p>比如 <a href="https://cn.vuejs.org/v2/api/#created" target="_blank" rel="noopener"><code>created</code></a> 钩子可以用来在一个实例被创建之后执行代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  created<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// `this` 指向 vm 实例</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a is: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => "a is: 1"</span></code></pre><p>也有一些其它的钩子，在实例生命周期的不同阶段被调用，如 <a href="https://cn.vuejs.org/v2/api/#mounted" target="_blank" rel="noopener"><code>mounted</code></a>、<a href="https://cn.vuejs.org/v2/api/#updated" target="_blank" rel="noopener"><code>updated</code></a> 和 <a href="https://cn.vuejs.org/v2/api/#destroyed" target="_blank" rel="noopener"><code>destroyed</code></a>。生命周期钩子的 <code>this</code> 上下文指向调用它的 Vue 实例。</p><p>下图展示了实例的生命周期。你不需要立马弄明白所有的东西，不过随着你的不断学习和使用，它的参考价值会越来越高。</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-18_18-33-56.jpg" alt=""></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  { { ms g }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txt<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">"hello vue"</span><span class="token punctuation">,</span>      dataList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 在vue对象初始化过程中执行</span>    <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeCreate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 在vue对象初始化完成后执行</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"created"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//hello vue</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ……</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="第-11-章-单页应用"><a href="#第-11-章-单页应用" class="headerlink" title="第 11 章 单页应用"></a>第 11 章 单页应用</h2><h3 id="11-1-单页应用"><a href="#11-1-单页应用" class="headerlink" title="11.1 单页应用"></a>11.1 单页应用</h3><ul><li><p>什么是单页应用</p><p><strong>单页应用</strong>(single page web application，<strong>SPA</strong>)，是在一个页面完成所有的业务功能，浏览器一开始会加载必需的 HTML、CSS 和 JavaScript，之后所有的操作都在这张页面完成，这一切都由 JavaScript 来控制。</p></li><li><p>单页应用优缺点</p><ul><li>优点<ul><li><strong>操作体验流畅</strong></li><li><strong>完全的前端组件化</strong></li></ul></li><li>缺点<ul><li><strong>首次加载大量资源</strong>(可以只加载所需部分)</li><li><strong>对搜索引擎不友好</strong></li><li><strong>开发难度相对较高</strong></li></ul></li></ul></li></ul><p>优缺点都很明显，但是我们都还没尝试过就来评价，就会显得空口无凭；接下来我们先来学习制作单页应用，然后再来进行点评；</p><h3 id="11-2-vue-路由插件-vue-router"><a href="#11-2-vue-路由插件-vue-router" class="headerlink" title="11.2 vue 路由插件 vue-router"></a>11.2 vue 路由插件 vue-router</h3><p><a href="https://cn.vuejs.org/v2/guide/routing.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/routing.html</a></p><p><a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">https://router.vuejs.org/zh/</a></p><p>$route    当前路由信息<br>$router 操作路由</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 引入路由 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#/register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 路由中设置的组件会替换router-view标签 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 1:定义路由组件</span>  <span class="token keyword">var</span> login <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token string">"&lt;h2>我是登录页面&lt;/h2>"</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> register <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token string">"&lt;h2>注册有好礼&lt;/h2>"</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2:获取路由对象</span>  <span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义路由规则</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// {请求的路径,componet是模板}</span>      <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/register"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> register <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> login <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ES6 属性简写</span>    <span class="token comment" spellcheck="true">// 3:将router对象传入Vue</span>    router  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>上例中，在 HTML 中我们直接使用了 a 标签，但是这样并不好，因为官方为我们提供了 <code>router-link</code> 标签</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;li>&lt;a href="#/login">登录&lt;/a>&lt;/li>        &lt;li>&lt;a href="#/register">注册&lt;/a>&lt;/li> --></span>    <span class="token comment" spellcheck="true">&lt;!-- router-link 会被解析为a标签 --></span>    <span class="token comment" spellcheck="true">&lt;!--             不同的是，router-link在解析为a标签后，            会自动为点击的 a 标签添加class属性         --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 路由中设置的组件会替换router-view标签 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>使用 router-link 的一大好处就是，每当我们点击时，在标签内就会自动帮我们添加 class 属性，而此时，我们就可以利用 class 属性，来定义样式：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.router-link-active</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="11-3-动态路由匹配"><a href="#11-3-动态路由匹配" class="headerlink" title="11.3 动态路由匹配"></a>11.3 动态路由匹配</h3><p>假设有一个用户列表，想要删除某一个用户，需要获取用户的 id 传入组件内，如何实现呢？</p><p>此时可以通过路由传参来实现，具体步骤如下：</p><ol><li><p>通过 <router-link> 传参，在路径上传入具体的值</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/users/120<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre></li><li><p>路由规则中增加参数，在 path 最后增加 <strong>:id</strong></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'users'</span><span class="token punctuation">,</span> path<span class="token punctuation">:</span> <span class="token string">'/users/:id'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Users <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li><li><p>在组件内部可以使用，<strong>this.$route</strong> 获取当前路由对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Users <span class="token operator">=</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">"&lt;div>这是用户管理内容 { { $rout e.params.id }}&lt;/div>"</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol><h2 id="第-12-章-构建一个项目"><a href="#第-12-章-构建一个项目" class="headerlink" title="第 12 章 构建一个项目"></a>第 12 章 构建一个项目</h2><h3 id="12-0-命令行工具-CLI"><a href="#12-0-命令行工具-CLI" class="headerlink" title="12.0 命令行工具 (CLI)"></a>12.0 命令行工具 (CLI)</h3><p><a href="https://cn.vuejs.org/v2/guide/installation.html#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7-CLI" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/installation.html#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7-CLI</a></p><p>Vue 提供了一个<a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">官方的 CLI</a>，为单页面应用 (SPA) 快速搭建繁杂的脚手架。它为现代前端工作流提供了 batteries-included 的构建设置。只需要几分钟的时间就可以运行起来并带有热重载、保存时 lint 校验，以及生产环境可用的构建版本。更多详情可查阅 <a href="https://cli.vuejs.org" target="_blank" rel="noopener">Vue CLI 的文档</a>。</p><h3 id="12-1-初始化项目"><a href="#12-1-初始化项目" class="headerlink" title="12.1 初始化项目"></a>12.1 初始化项目</h3><p>安装 cli 命令工具：<code>npm install -g @vue/cli @vue/cli-init</code></p><p>安装成功后，使用 <code>vue -V</code> 命令，查看版本号；</p><p>使用 <code>vue init webpack myapp</code> 构建一个名为 myapp 的项目：</p><p>Vue 依然使用询问的方式，让我们对项目有一个初始化的信息</p><ul><li>Project name：项目名</li><li>Project description: 项目描述</li><li>Author: 作者</li><li>Vue build：<ul><li>第一种：配合大部分的开发人员</li><li>第二种：仅仅中有 runtime</li></ul></li><li>Install vue-router? 是否安装 vue-router</li><li>Use ESLint to lint your code?是否使用 ESLint 来验证我们的语法。</li><li>Pick an ESLint preser:使用哪种语法规范来检查我们的代码：<ul><li>Standard: 标准规范</li><li>Airbnb: 爱彼迎规范</li></ul></li><li>Set up unit test: 设置单元测试</li><li>Setup e2e tests： 设置端对端测试</li><li>Should we run ‘npm install’:要不要帮忙你下载这个项目需要的第三方包<ul><li>使用 npm 来下载</li><li>使用 yarn 来下载</li></ul></li></ul><pre class=" language-shell"><code class="language-shell">To get started:  cd myapps  npm run dev   // 使用命令启动项目  -----  Your application is running here: http://localhost:8080  打开浏览器，访问 http://localhost:8080  看到浏览器的欢迎界面，表示项目运行成功</code></pre><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-21_03-11-42.png" alt=""></p><h3 id="12-2-项目结构介绍"><a href="#12-2-项目结构介绍" class="headerlink" title="12.2 项目结构介绍"></a>12.2 项目结构介绍</h3><pre><code>├── build                webpack打包相关配置文件目录├── config                webpack打包相关配置文件目录├── node_modules         第三方包├── src                    项目源码(主战场)│   ├── assets             存储静态资源，例如 css、img、fonts│   ├── components         存储所有公共组件│   ├── router             路由│   ├── App.vue             单页面应用程序的根组件│   └── main.js             程序入口，负责把根组件替换到根节点├── static                可以放一些静态资源│   └── .gitkeep         git提交的时候空文件夹不会提交，这个文件可以让空文件夹可以提交├── .babelrc             配置文件，es6转es5配置文件，给 babel 编译器用的├── .editorconfig         给编辑器看的├── .eslintignore          给eslint代码风格校验工具使用的，用来配置忽略代码风格校验的文件或是目录├── .eslintrc.js         给eslint代码风格校验工具使用的，用来配置代码风格校验规则├── .gitignore             给git使用的，用来配置忽略上传的文件├── index.html             单页面应用程序的单页├── package.json         项目说明，用来保存依赖项等信息├── package-lock.json      锁定第三方包的版本，以及保存包的下载地址├── .postcssrc.js          给postcss用的，postcss类似于 less、sass 预处理器└── README.md             项目说明文档</code></pre><h3 id="12-3-语法检查"><a href="#12-3-语法检查" class="headerlink" title="12.3 语法检查"></a>12.3 语法检查</h3><p>注意 ：如果我们在 构建项目时 选择了 <code>Use ESLint to lint your code</code> 那么我们在写代码时必须严格遵守 <a href="https://standardjs.com/" target="_blank" rel="noopener">JavaScript Standard Style</a> 代码风格的语法规则：</p><ul><li><strong>使用两个空格</strong> – 进行缩进</li><li><strong>字符串使用单引号</strong> – 需要转义的地方除外</li><li><strong>不再有冗余的变量</strong> – 这是导致 <em>大量</em> bug 的源头!</li><li><strong>无分号</strong> – <a href="http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding" target="_blank" rel="noopener">这</a><a href="http://inimino.org/~inimino/blog/javascript_semicolons" target="_blank" rel="noopener">没什么不好。</a><a href="https://www.youtube.com/watch?v=gsfbh17Ax9I" target="_blank" rel="noopener">不骗你！</a></li><li>行首不要以 <code>(</code>, <code>[</code>, or ``` 开头<ul><li>这是省略分号时<strong>唯一</strong>会造成问题的地方 – <em>工具里已加了自动检测！</em></li><li><a href="https://github.com/standard/standard/blob/master/docs/RULES-zhcn.md#semicolons" target="_blank" rel="noopener">详情</a></li></ul></li><li><strong>关键字后加空格</strong> <code>if (condition) { ... }</code></li><li><strong>函数名后加空格</strong> <code>function name (arg) { ... }</code></li><li>坚持使用全等 <code>===</code> 摒弃 <code>==</code> 一但在需要检查 <code>null || undefined</code> 时可以使用 <code>obj == null</code>。</li><li>一定要处理 Node.js 中错误回调传递进来的 <code>err</code> 参数。</li><li>使用浏览器全局变量时加上 <code>window</code> 前缀 – <code>document</code> 和 <code>navigator</code> 除外<ul><li>避免无意中使用到了这些命名看上去很普通的全局变量， <code>open</code>, <code>length</code>, <code>event</code> 还有 <code>name</code>。</li></ul></li></ul><p>说了那么多，看看<a href="https://github.com/expressjs/body-parser/blob/master/index.js" target="_blank" rel="noopener">这个遵循了 Standard 规范的示例文件</a> 中的代码吧。或者，这里还有<a href="https://raw.githubusercontent.com/standard/standard-packages/master/all.json" target="_blank" rel="noopener">一大波使用了此规范的项目</a> 代码可供参考。</p><blockquote><p>注意: 如果你不适应这些语法规则,可以在构建项目时不使用 ESLint 的语法检查</p></blockquote><h3 id="12-4-项目代码预览"><a href="#12-4-项目代码预览" class="headerlink" title="12.4 项目代码预览"></a>12.4 项目代码预览</h3><h4 id="12-4-1-知识储备"><a href="#12-4-1-知识储备" class="headerlink" title="12.4.1 知识储备"></a>12.4.1 知识储备</h4><h5 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h5><p><a href="http://javascript.ruanyifeng.com/advanced/strict.html" target="_blank" rel="noopener">http://javascript.ruanyifeng.com/advanced/strict.html</a></p><p>严格模式主要有以下限制。</p><ul><li><p>变量必须声明后再使用</p></li><li><p>函数的参数不能有同名属性，否则报错</p></li><li><p>不能使用<code>with</code>语句</p></li><li><p>不能对只读属性赋值，否则报错</p></li><li><p>不能使用前缀 0 表示八进制数，否则报错</p></li><li><p>不能删除不可删除的属性，否则报错</p></li><li><p>不能删除变量<code>delete prop</code>，会报错，只能删除属性<code>delete global[prop]</code></p></li><li><p><code>eval</code>不会在它的外层作用域引入变量</p></li><li><p><code>eval</code>和<code>arguments</code>不能被重新赋值</p></li><li><p><code>arguments</code>不会自动反映函数参数的变化</p></li><li><p>不能使用<code>arguments.callee</code></p></li><li><p>不能使用<code>arguments.caller</code></p></li><li><p>禁止<code>this</code>指向全局对象</p></li><li><p>不能使用<code>fn.caller</code>和<code>fn.arguments</code>获取函数调用的堆栈</p></li><li><p>增加了保留字（比如<code>protected</code>、<code>static</code>和<code>interface</code>）</p></li></ul><h5 id="ES6-模块化"><a href="#ES6-模块化" class="headerlink" title="ES6 模块化"></a>ES6 模块化</h5><p><a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/module</a></p><p>总结：</p><ul><li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用；</li><li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口；</li><li>ES6 的模块自动采用严格模式，不管你有没有在模块头部加上<code>&quot;use strict&quot;;</code>；</li><li>ES6 模块之中，顶层的<code>this</code>指向<code>undefined</code>；CommonJS 模块的顶层<code>this</code>指向当前模块；</li></ul><h4 id="12-4-2-代码加载执行"><a href="#12-4-2-代码加载执行" class="headerlink" title="12.4.2 代码加载执行"></a>12.4.2 代码加载执行</h4><p>main.js</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 入口文件</span><span class="token comment" spellcheck="true">// 以es6模块的方式引入 vue APP router 三个模块;</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App"</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取节点对象</span>  el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 引入路由</span>  router<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 本实例的私有组件</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// el 与 template 在同一个实例中出现，</span>  <span class="token comment" spellcheck="true">// 根据生命周期的执行顺序可知，template中的内容会替换el选中的内容</span>  template<span class="token punctuation">:</span> <span class="token string">"&lt;App/>"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>roter/index.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">"@/components/HelloWorld"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Vue 中插件引入语法</span><span class="token comment" spellcheck="true">// https://cn.vuejs.org/v2/guide/plugins.html</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES6模块导出语法</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// 定义一个路由规则</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 请求路径</span>      name<span class="token punctuation">:</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 路由名称标识</span>      component<span class="token punctuation">:</span> HelloWorld <span class="token comment" spellcheck="true">//请求此路由时，使用的组件</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>components/HelloWorld.vue</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 模块名字</span>  name<span class="token punctuation">:</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 组件中 data 数据必须是一个有返回值的方法</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">"Welcome to Your Vue.js App"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre><code>(main.js-&gt;template: &#39;&lt;App/&gt;&#39;)替换 (index.html-&gt;div#app);(index.html-&gt;&lt;App/&gt;) --&gt; (components: { App })( components: { App }) --&gt; (import App from &#39;./App&#39; -&gt; src/App.vue)(App.vue -&gt; &lt;router-view/&gt; -&gt; 路由组件) --&gt; (main.js-&gt; router)========此项决定了页面展示那个组件内容 ========({path: &#39;/&#39;,name: &#39;HelloWorld&#39;, component: HelloWorld }) --&gt; (import HelloWorld from &#39;@/components/HelloWorld&#39;)(src/components/HelloWorld.vue) --&gt; &lt;router-view/&gt;</code></pre><h3 id="12-5-添加自己的路由组件"><a href="#12-5-添加自己的路由组件" class="headerlink" title="12.5 添加自己的路由组件"></a>12.5 添加自己的路由组件</h3><p>修改 router/index.js ，添加自己的路由</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">"@/components/HelloWorld"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入(导入) 组件</span><span class="token keyword">import</span> MyRouter <span class="token keyword">from</span> <span class="token string">"@/components/MyRouter"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES6模块导出语法</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> HelloWorld <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 添加自己的路由及组件</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"/myrouter"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"MyRouter"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> MyRouter    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 components 文件夹中添加 MyRouter.vue 文件，写自己的组件代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    { {mydatas} }  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 模块化导出</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> mydatas<span class="token punctuation">:</span> <span class="token string">"lksadjflks"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.mypage</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>浏览器渲染效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-21_14-11-46.png" alt=""></p><h2 id="第-13-章-Vuex"><a href="#第-13-章-Vuex" class="headerlink" title="第 13 章 Vuex"></a>第 13 章 Vuex</h2><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/vuex.png" alt=""></p><p>流程：组件-&gt;Actions-&gt;Mutations-&gt;State-&gt;组件</p><h3 id="严格模式-1"><a href="#严格模式-1" class="headerlink" title="严格模式"></a>严格模式</h3><p>开启严格模式，仅需在创建 store 的时候传入 <code>strict: true</code>：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  strict<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。</p><h3 id="开发环境与发布环境"><a href="#开发环境与发布环境" class="headerlink" title="#开发环境与发布环境"></a><a href="https://vuex.vuejs.org/zh/guide/strict.html#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%8F%91%E5%B8%83%E7%8E%AF%E5%A2%83" target="_blank" rel="noopener">#</a>开发环境与发布环境</h3><p><strong>不要在发布环境下启用严格模式</strong>！严格模式会深度监测状态树来检测不合规的状态变更——请确保在发布环境下关闭严格模式，以避免性能损失。</p><p>类似于插件，我们可以让构建工具来处理这种情况：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  strict<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">"production"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="基本使用-介绍"><a href="#基本使用-介绍" class="headerlink" title="基本使用/介绍"></a>基本使用/介绍</h3><p>state——存储、数据<br>mutation——修改数据、追踪；同步<br>action——封装：组合；异步</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//安装</span>npm install vuex<span class="token comment" spellcheck="true">//加载</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token comment" spellcheck="true">//也可以在vue-cli中单独添加一个文件类似vue-router一样，命名为store(脚手架环境)</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">import</span> Vuex form <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//基本使用/介绍</span><span class="token comment" spellcheck="true">//跟router一样，要new一个vuex</span><span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//1.strict是否开启严格模式，</span>    strice：<span class="token boolean">true</span>，<span class="token comment" spellcheck="true">//2.state 存放数据的属性 vuex核心</span>    state：<span class="token punctuation">{</span>      <span class="token operator">...</span>data    <span class="token punctuation">}</span>，<span class="token comment" spellcheck="true">//3.改变state时必须经过的属性</span>    muations<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token operator">...</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span><span class="token operator">...</span>参数<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*4.Action 类似于 mutation，不同在于：Action 提交的是 mutation，而不是直接变更状态。Action 可以包含任意异步操作。*/</span>    actions<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token operator">...</span><span class="token keyword">function</span><span class="token punctuation">(</span>state <span class="token operator">||</span> <span class="token punctuation">{</span>commit<span class="token punctuation">}</span><span class="token punctuation">,</span>参数<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//5.类似vue的计算computed，主要处理一些需要计算、总和的操作</span>    getters<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token operator">...</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token operator">?</span><span class="token operator">+</span>state<span class="token punctuation">.</span><span class="token operator">?</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//6.类似路由组件，可以分成很多个模块引入加载</span>    modules<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token operator">...</span>vuex模块    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="辅助方法"><a href="#辅助方法" class="headerlink" title="辅助方法"></a>辅助方法</h3><p>mapState state -&gt; computed<br>mapActions actions -&gt; methods<br>mapGetters getters -&gt; computed<br>mapMutations mutations -&gt; methods</p><p>映射</p><p>这 3 个方法可以实现自动把 vuex 的 state,actions,getters,加载到 vue 组件里使用，简化了中间手动繁琐的操作</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//使用之前必须从vuex里引入这些方法：import {mapState, mapActions, mapGetters} from 'vuex';</span>computed<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span>vuex里面的state<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>vuex里面的getters<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span>vuex里面的actions<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span>vuex里面的mutations<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//也可以传入一个对象，用于命别名</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      a<span class="token punctuation">:</span><span class="token string">'fun'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="基本使用（综合案例）"><a href="#基本使用（综合案例）" class="headerlink" title="基本使用（综合案例）"></a>基本使用（综合案例）</h3><p>vuex 配置</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ModA <span class="token keyword">from</span> <span class="token string">"./mod_a"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ModB <span class="token keyword">from</span> <span class="token string">"./mod_b"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//vuex3-声明store对象</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  strict<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!=</span> <span class="token string">"production"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//严格模式：防止直接修改state</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//核心：数据</span>    a<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    users<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">addA</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>a <span class="token operator">+</span><span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">addB</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>b <span class="token operator">+</span><span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">setOnline</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>user <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>id <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>          user<span class="token punctuation">.</span>online <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">setUsers</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>users <span class="token operator">=</span> users<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">addA</span><span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"addA"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">addB</span><span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"addB"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">setOnline</span><span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"setOnline"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">async</span> <span class="token function">readUsers</span><span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8081/user.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"setUsers"</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">count</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>a <span class="token operator">+</span> state<span class="token punctuation">.</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">onlineUsers</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>user <span class="token operator">=</span><span class="token operator">></span> user<span class="token punctuation">.</span>online<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    mod_a<span class="token punctuation">:</span> ModA<span class="token punctuation">,</span>    mod_b<span class="token punctuation">:</span> ModB  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>调用 vuex</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>a: { {a}}&lt; /div>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>b: { {b}}&lt; /div>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>count: { {count}}&lt; /div>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a+5<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addA(5)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b+3<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addB(3)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    str: { {$stor e.state.str}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    a_str: { {str_a}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    b_str: { {str_b}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>设置A<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>set_a(<span class="token punctuation">'</span>aaa<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>设置B<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>set_b(<span class="token punctuation">'</span>bbb<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三出现<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>setOnline(5)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user in onlineUsers<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        名字：{ {user.nam e}}        年龄：{ {user.ag e}}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> Table <span class="token keyword">from</span> <span class="token string">'@/components/common/Table'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Cmp1 <span class="token keyword">from</span> <span class="token string">'@/components/Cmp1'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>mapState<span class="token punctuation">,</span> mapActions<span class="token punctuation">,</span> mapGetters<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Index'</span><span class="token punctuation">,</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      fields<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'ID'</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string">'ID'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'age'</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string">'年龄'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      datas<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'tom'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">async</span> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//this.setStr('sdfasdfsdg');</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">del</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>datas<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>datas<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token operator">></span>data<span class="token punctuation">.</span>ID<span class="token operator">!=</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'addA'</span><span class="token punctuation">,</span> <span class="token string">'addB'</span><span class="token punctuation">,</span> <span class="token string">'setOnline'</span><span class="token punctuation">,</span> <span class="token string">'readUsers'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//...mapActions(['setStr'])</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      set_a<span class="token punctuation">:</span> <span class="token string">'mod_a.setStr'</span><span class="token punctuation">,</span>      set_b<span class="token punctuation">:</span> <span class="token string">'mod_b.setStr'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// set_a(){</span>    <span class="token comment" spellcheck="true">//   this.$store.dispatch('mod_a.setStr', 'aaa');</span>    <span class="token comment" spellcheck="true">// },</span>    <span class="token comment" spellcheck="true">// set_b(){</span>    <span class="token comment" spellcheck="true">//   this.$store.dispatch('mod_b.setStr', 'bbb');</span>    <span class="token comment" spellcheck="true">// }</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    Table<span class="token punctuation">,</span> Cmp1  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      str_a<span class="token punctuation">:</span> state<span class="token operator">=</span><span class="token operator">></span>state<span class="token punctuation">.</span>mod_a<span class="token punctuation">.</span>str<span class="token punctuation">,</span>      str_b<span class="token punctuation">:</span> state<span class="token operator">=</span><span class="token operator">></span>state<span class="token punctuation">.</span>mod_b<span class="token punctuation">.</span>str<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token string">'onlineUsers'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h1 id="Vue-前后端分离项目"><a href="#Vue-前后端分离项目" class="headerlink" title="Vue 前后端分离项目"></a>Vue 前后端分离项目</h1><h2 id="第-0-章-项目如何开始的"><a href="#第-0-章-项目如何开始的" class="headerlink" title="第 0 章 项目如何开始的"></a>第 0 章 项目如何开始的</h2><h3 id="0-1-总体流程"><a href="#0-1-总体流程" class="headerlink" title="0.1 总体流程"></a>0.1 总体流程</h3><p>需求调研–&gt;需求转为需求文档–&gt;将需求文档转为开发文档–&gt;前端文档–&gt;后台文档–&gt;项目测试–&gt;打包上线</p><h3 id="0-2-数据服务器构建"><a href="#0-2-数据服务器构建" class="headerlink" title="0.2 数据服务器构建"></a>0.2 数据服务器构建</h3><h4 id="0-2-1-技术栈"><a href="#0-2-1-技术栈" class="headerlink" title="0.2.1 技术栈"></a>0.2.1 技术栈</h4><p>Vue+elementUI+NodeJS+MySQL</p><h4 id="0-2-2-数据服务器准备"><a href="#0-2-2-数据服务器准备" class="headerlink" title="0.2.2 数据服务器准备"></a>0.2.2 数据服务器准备</h4><p>导入数据库数据：打开数据库服务器，新建名为 <code>itcast</code> 的库；</p><p>后台为我们提供了 <code>/api-server/db/mydb.sql</code> 数据文件，打开复制 sql 语句直接运行即可；</p><p>然后在 api-server 中执行 <code>npm install</code> 安装服务器所需扩展模块；</p><p><code>node app.js</code> 将服务器启动起来;</p><h3 id="0-3-接口测试"><a href="#0-3-接口测试" class="headerlink" title="0.3 接口测试"></a>0.3 接口测试</h3><h4 id="0-3-1-登录"><a href="#0-3-1-登录" class="headerlink" title="0.3.1 登录"></a>0.3.1 登录</h4><p>后台已经写好接口文档，根据文档中的表述，我们测试登录接口：</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-21_15-34-13.png" alt=""></p><h4 id="0-3-2-获取用户信息"><a href="#0-3-2-获取用户信息" class="headerlink" title="0.3.2 获取用户信息"></a>0.3.2 获取用户信息</h4><p>请求用户列表数据；但是，并没有返回相应的数据；</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-21_15-42-57.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-21_15-44-14.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-21_15-45-34.png" alt=""></p><blockquote><p>使用 token 替换 cookie 的功能</p></blockquote><h3 id="0-4-Vue-项目初始化"><a href="#0-4-Vue-项目初始化" class="headerlink" title="0.4 Vue 项目初始化"></a>0.4 Vue 项目初始化</h3><p>使用 vue-cli 工具初始化项目：</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-21_15-56-43.png" alt=""></p><p>初始化成功，使用 <code>npm run dev</code> 启动项目；</p><h3 id="0-5-项目预览"><a href="#0-5-项目预览" class="headerlink" title="0.5 项目预览"></a>0.5 项目预览</h3><p>解压 <code>my-project(Vue项目).rar</code> 后进入目录，使用 <code>npm run dev</code> 启动项目；</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-21_16-09-59.png" alt=""></p><h2 id="第-1-章-开始项目"><a href="#第-1-章-开始项目" class="headerlink" title="第 1 章 开始项目"></a>第 1 章 开始项目</h2><h3 id="1-1-添加用户登录路由组件"><a href="#1-1-添加用户登录路由组件" class="headerlink" title="1.1 添加用户登录路由组件"></a>1.1 添加用户登录路由组件</h3><p>添加路由：<code>myapp-code/src/router/index.js</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">"@/components/login/login"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"Login"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Login    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>添加组件：<code>myapp-code/src/components/login/login.vue</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{ {msg}}&lt; /div><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>msg<span class="token punctuation">:</span><span class="token string">'我是登录页面'</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>修改 Vue 项目运行端口： myapp-code/config/index.js</p><h3 id="1-2-使用-ElementUI"><a href="#1-2-使用-ElementUI" class="headerlink" title="1.2 使用 ElementUI"></a>1.2 使用 ElementUI</h3><p><a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN</a></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-21_16-51-06.png" alt=""></p><p>修改 <code>src/main.js</code> 代码，全局引入 ElementUI ；</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App"</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入 ElementUI</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">"element-ui"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"element-ui/lib/theme-chalk/index.css"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将 ElementUI 注册为 vue的全局组件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">"&lt;App/>"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在我们登录页面中尝试一下：<code>src/components/login/login.vue</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>成功按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>信息按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>警告按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>危险按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h3 id="1-3-搭建登录页面"><a href="#1-3-搭建登录页面" class="headerlink" title="1.3 搭建登录页面"></a>1.3 搭建登录页面</h3><p>把公共样式写到 <code>src/assets/css/style.css</code> ： <code>Form 表单</code></p><pre class=" language-css"><code class="language-css"><span class="token selector">html,body </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后在 <code>src/main.js</code> 加载公共样式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 代码略...</span><span class="token comment" spellcheck="true">// 引入我们的公共样式</span><span class="token keyword">import</span> <span class="token string">"./assets/css/style.css"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 代码略...</span></code></pre><p>为了让登陆组件的背景色撑满，所以我们需要让他们的父盒子 <code>div#app</code> 高度设置为 <code>100%</code>。</p><p>所以我们在 <code>src/App.vue</code> ：</p><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style><span class="token id">#app</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style></code></pre><p>接下来我们开始调整 <code>src/components/login/login.vue</code> 组件样式：</p><ul><li>注意：这里遵循一个原则，不要直接去使用 Element 组件自带的类名</li><li>如果你想为 Element 组件添加自定义样式，那么建议你给它加你自己的类名来控制</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login-wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span>      <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span>      <span class="token attr-name">:label-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>labelPosition<span class="token punctuation">"</span></span>      <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span>      <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80px<span class="token punctuation">"</span></span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login-from<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>用户登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form.pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login-btn<span class="token punctuation">"</span></span>          <span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span>        <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        labelPosition<span class="token punctuation">:</span> <span class="token string">"top"</span><span class="token punctuation">,</span>        form<span class="token punctuation">:</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>          pwd<span class="token punctuation">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style><span class="token class">.login-wrap</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#324152</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.login-wrap</span> <span class="token class">.login-from</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.login-wrap</span> <span class="token class">.login-from</span> <span class="token class">.login-btn</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style></code></pre><h3 id="1-4-完成登录功能"><a href="#1-4-完成登录功能" class="headerlink" title="1.4 完成登录功能"></a>1.4 完成登录功能</h3><h4 id="1-4-1-封装-axios"><a href="#1-4-1-封装-axios" class="headerlink" title="1.4.1 封装 axios"></a>1.4.1 封装 axios</h4><p>vue 插件语法： <a href="https://cn.vuejs.org/v2/guide/plugins.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/plugins.html</a></p><p>Axios : <a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">https://www.kancloud.cn/yunye/axios/234845</a></p><p><code>npm install axios</code> ,将 axios 进行模块化封装，以 Vue 插件的方式，全局引入：</p><p>将插件的封装写入 <code>src/assets/js/myaxios.js</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入axios</span><span class="token keyword">import</span> Axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 自定义插件对象</span><span class="token keyword">var</span> myaxios <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>myaxios<span class="token punctuation">.</span>install <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 设置axios请求的URL，此后axios发送的请求全部执行本地址</span>  <span class="token keyword">var</span> axios_obj <span class="token operator">=</span> Axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token punctuation">:</span> <span class="token string">"http://localhost:8888/api/private/v1/"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将设置好的axios对象赋值给Vue实例的原型</span>  <span class="token comment" spellcheck="true">// 之后可以在Vue中直接只用 this.$myHttp 使用axios发送请求</span>  vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$myHttp <span class="token operator">=</span> axios_obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将插件以 模块 方式导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> myaxios<span class="token punctuation">;</span></code></pre><p>在 main.js 引入 axios 插件，并注册为全局插件</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 导入 myaxios 模块</span><span class="token keyword">import</span> myaxios <span class="token keyword">from</span> <span class="token string">"@/assets/js/myaxios.js"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>myaxios<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注册使用 axios 插件</span></code></pre><h4 id="1-4-2-完成登录功能"><a href="#1-4-2-完成登录功能" class="headerlink" title="1.4.2 完成登录功能"></a>1.4.2 完成登录功能</h4><p><strong>发送 post 请求</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      labelPosition<span class="token punctuation">:</span> <span class="token string">"top"</span><span class="token punctuation">,</span>      form<span class="token punctuation">:</span> <span class="token punctuation">{</span>        username<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        password<span class="token punctuation">:</span> <span class="token string">""</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 修改组件中绑定的按钮名称为 onLogin</span>    <span class="token function">onLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 使用axios 发送post 请求，传入data中的form数据</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$myHttp<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>backdata <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 异步执行成功后</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>backdata<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>继续修改代码，完成登录逻辑</strong>：</p><p>vue-router 编程式导航： <a href="https://router.vuejs.org/zh/guide/essentials/navigation.html" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/essentials/navigation.html</a></p><pre class=" language-js"><code class="language-js"><span class="token function">onLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用axios 发送post 请求，传入data中的form数据</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$myHttp<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>backdata<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 异步执行成功后</span>        <span class="token comment" spellcheck="true">//console.log(backdata.data);</span>        <span class="token comment" spellcheck="true">// 结构赋值，获取返回的数据</span>        <span class="token keyword">var</span> <span class="token punctuation">{</span>data<span class="token punctuation">,</span>meta<span class="token punctuation">}</span>  <span class="token operator">=</span> backdata<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断数据状态</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>meta<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'登录成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 使用vue-router编程式导航跳转到home</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//注意：push会产生历史记录，因此可以返回，当一些操作不想让撤回时可以使用replace，同时也不会产生历史记录</span></code></pre><p><strong>修改提示弹窗</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> meta <span class="token punctuation">}</span> <span class="token operator">=</span> backdata<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断数据状态</span><span class="token keyword">if</span> <span class="token punctuation">(</span>meta<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">"恭喜你，登录成功"</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span> <span class="token string">"success"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用vue-router编程式导航跳转到home</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"错了哦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="1-4-3-表单验证"><a href="#1-4-3-表单验证" class="headerlink" title="1.4.3 表单验证"></a>1.4.3 表单验证</h4><p>Form 组件提供了表单验证的功能，只需要通过 <code>rules</code> 属性传入约定的验证规则，并将 Form-Item 的 <code>prop</code> 属性设置为需校验的字段名即可。</p><pre class=" language-js"><code class="language-js"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      labelPosition<span class="token punctuation">:</span> <span class="token string">"top"</span><span class="token punctuation">,</span>      form<span class="token punctuation">:</span> <span class="token punctuation">{</span>        username<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        password<span class="token punctuation">:</span> <span class="token string">""</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 与 el-form 中的 :rules="rules"  对应</span>      rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//与 el-form-item 中的 prop="username" 对应</span>        username<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token comment" spellcheck="true">// 验证规则  是否必须        提示信息            触发时机</span>          <span class="token punctuation">{</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">"请输入用户名"</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">"blur"</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        password<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">"请输入密码"</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">"blur"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> min<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">"长度在 3 到 5 个字符"</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">"blur"</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-21_21-49-00.png" alt=""></p><h4 id="1-4-4-阻止数据提交"><a href="#1-4-4-阻止数据提交" class="headerlink" title="1.4.4 阻止数据提交"></a>1.4.4 阻止数据提交</h4><pre class=" language-js"><code class="language-js"><span class="token function">onLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 因为要获取form表单的节点对象，</span>    <span class="token comment" spellcheck="true">// 所以 el-form 中要加入 ref="ruleForm"</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>ruleForm<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>valid <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// elementUI 会将 validate 方法加入到节点对象，</span>        <span class="token comment" spellcheck="true">// 在提交是，如果表单的验证未通过，会将错误信息传入回调函数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果有表单错误信息，则无反应</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 使用axios 发送post 请求，传入data中的form数据</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$myHttp<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>backdata <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 结构赋值，获取返回的数据</span>            <span class="token keyword">var</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> meta <span class="token punctuation">}</span> <span class="token operator">=</span> backdata<span class="token punctuation">.</span>data<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断数据状态</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>meta<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span> <span class="token string">"恭喜你，登录成功"</span><span class="token punctuation">,</span>                    type<span class="token punctuation">:</span> <span class="token string">"success"</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 使用vue-router编程式导航跳转到home</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"错了哦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-5-首页"><a href="#1-5-首页" class="headerlink" title="1.5 首页"></a>1.5 首页</h3><h4 id="1-5-1-添加路由及页面布局"><a href="#1-5-1-添加路由及页面布局" class="headerlink" title="1.5.1 添加路由及页面布局"></a>1.5.1 添加路由及页面布局</h4><p>修改登录成功后逻辑，使用路由名称表示进行跳转：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用vue-router编程式导航跳转到home</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"home"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>导入组件，添加路由 <code>src/router/index.js</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'@/components/home/home'</span> ……<span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span><span class="token string">'home'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span>Home<span class="token punctuation">}</span></code></pre><p>添加一个 home 组件<code>src/components/home/home.vue</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{ {msg}}&lt; /div><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>      msg<span class="token punctuation">:</span><span class="token string">'we'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>修改一个 home 组件<code>src/components/home/home.vue</code> <code>Container 布局容器</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>height100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-header</span><span class="token punctuation">></span></span>Header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-aside</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Aside<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-aside</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-main</span><span class="token punctuation">></span></span>Main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.height100</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.el-header</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#b3c0d1</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.el-aside</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#d3dce6</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.el-main</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#e9eef3</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">160</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="1-5-2-头部样式"><a href="#1-5-2-头部样式" class="headerlink" title="1.5.2 头部样式"></a>1.5.2 头部样式</h4><p><code>/src/components/home/home.vue</code></p><p><code>Layout 布局</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grid-content bg-purple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/logo.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grid-content bg-purple-light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>电商后台管理系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span>    <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grid-content bg-purple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>退出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span>    <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-header</span><span class="token punctuation">></span></span>…… // 标题文本样式 .bg-purple-light { font-size: 25px; color: white; }</code></pre><h4 id="1-5-3-左侧样式"><a href="#1-5-3-左侧样式" class="headerlink" title="1.5.3 左侧样式"></a>1.5.3 左侧样式</h4><p><code>/src/components/home/home.vue</code></p><p><code>NavMenu 导航菜单</code> <code>Icon 图标</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-aside</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--         el-menu 侧边导航栏组件            unique-opened="true" 只保持一个导航开启            router="true" 开启导航路由        el-submenu 导航栏的顶级项        template 导航栏中需要展示的内容            i 图标            span 文字        el-menu-item-group 次级导航组 内容与导航的组标识 可直接删除        el-menu-item  导航栏选项          index属性 控制收起展开+路由标识:              在el-menu中加入router=“true”属性;              index="1-1" 点击时路由跳转到1-1 ;      --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu</span>      <span class="token attr-name">:unique-opened</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>      <span class="token attr-name">:router</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>      <span class="token attr-name">default-active</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-menu-vertical-demo<span class="token punctuation">"</span></span>      <span class="token attr-name">@open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleOpen<span class="token punctuation">"</span></span>      <span class="token attr-name">@close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleClose<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-location<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>用户管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>          用户列表        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-location<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>权限管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>          角色列表        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>          权限列表        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-aside</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-main</span><span class="token punctuation">></span></span>Main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span></code></pre><p>我们发现，大部分组件，在浏览器渲染后，都会在标签内部自动添加一个标签名为名字的 class 属性 ，我们可以利用这个属性，设置样式：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.el-menu</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.el-submenu</span> </span><span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="1-5-4-右侧内容"><a href="#1-5-4-右侧内容" class="headerlink" title="1.5.4 右侧内容"></a>1.5.4 右侧内容</h4><p>添加组件内容 <code>/src/components/home/home.vue</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-main</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 路由组件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-main</span><span class="token punctuation">></span></span></code></pre><p>添加组件：<code>src/components/index.vue</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是首页内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>添加路由：<code>/src/router/index.js</code></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/index'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span><span class="token string">'index'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span>Index<span class="token punctuation">}</span></code></pre><blockquote><p>注意: 我们希望 index.vue 组件的内容,展示到 home 组件的 <router-view></router-view>中</p></blockquote><p><strong>知识补充：</strong></p><p>此时，我们需要借助嵌套路由: <a href="https://router.vuejs.org/zh/guide/essentials/nested-routes.html" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/essentials/nested-routes.html</a></p><p>嵌套路由(子路由的基本用法)：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>  // 1:定义路由组件  var login = {    template: `            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是登录页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/zi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>子路由<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--路由组件中继续使用路由组件--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            `  };  var zi = {    template: "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>我是嵌套路由的组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>"  };  // 2:获取路由对象  var router = new VueRouter({    // 定义路由规则    routes: [      {        name: "login",        path: "/login",        component: login,        // 路由中的 children 属性，定义嵌套路由(子路由)        children: [{ name: "zi", path: "/zi", component: zi }]      }    ]  });  var app = new Vue({    el: "#app",    router  });<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>*<em>再谈 代码加载流程 *</em></p><pre><code>(main.js-&gt;template: &#39;&lt;App/&gt;&#39;)替换 (index.html-&gt;div#app);(index.html-&gt;&lt;App/&gt;) --&gt; (components: { App })( components: { App }) --&gt; (import App from &#39;./App&#39; -&gt; src/App.vue)(App.vue -&gt; &lt;router-view/&gt; -&gt; 路由组件) --&gt; (main.js-&gt; router)========此项决定了页面展示那个组件内容 ========({path: &#39;/&#39;,name: &#39;HelloWorld&#39;, component: HelloWorld }) --&gt; (import HelloWorld from &#39;@/components/HelloWorld&#39;)(src/components/HelloWorld.vue) --&gt; &lt;router-view/&gt;</code></pre><p>因此，我们需要让 index 成为 home 的子路由组件 <code>src/router/index.js</code></p><pre class=" language-js"><code class="language-js">routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"Login"</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Login  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Home<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 添加子路由</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"index"</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"index"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Index <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>登录完成后，跳转到 home–&gt;index <code>src/components/login/login.vue</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>meta<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">"恭喜你，登录成功"</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span> <span class="token string">"success"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用vue-router编程式导航跳转到home->index</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"index"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-6-验证首页登录"><a href="#1-6-验证首页登录" class="headerlink" title="1.6 验证首页登录"></a>1.6 验证首页登录</h3><p><code>src/components/login/login.vue</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>meta<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">"恭喜你，登录成功"</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span> <span class="token string">"success"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 登录成功后，将token信息保存到 localStorage</span>  window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用vue-router编程式导航跳转到home->index</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"index"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 <code>src/components/home/home.vue</code> 验证登录</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 使用生命周期的钩子函数，判断token</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取token</span>    <span class="token keyword">var</span> token <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 错误提示</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"请登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 跳转到登录页面</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"Login"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">"we"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="1-7-用户退出"><a href="#1-7-用户退出" class="headerlink" title="1.7 用户退出"></a>1.7 用户退出</h3><p>绑定点击事件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grid-content bg-purple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginOut<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>退出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">loginOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 清楚token</span>        window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 退出提示</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            message<span class="token punctuation">:</span> <span class="token string">"您已经退出，继续操作请重新登录"</span><span class="token punctuation">,</span>            type<span class="token punctuation">:</span> <span class="token string">"success"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 页面路由跳转</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"Login"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第-2-章-用户管理"><a href="#第-2-章-用户管理" class="headerlink" title="第 2 章 用户管理"></a>第 2 章 用户管理</h2><h3 id="2-1-路由及组件"><a href="#2-1-路由及组件" class="headerlink" title="2.1 路由及组件"></a>2.1 路由及组件</h3><p><code>/src/components/home/home.vue</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>  用户列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span></code></pre><p><code>src/router/index.js</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Users <span class="token keyword">from</span> <span class="token string">'@/components/users/users'</span>……children<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">'index'</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'index'</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>Index<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">'users'</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'users'</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>Users<span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p><code>src/components/users/users.vue</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>展示用户列表表格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="2-2-面包屑导航及搜索框"><a href="#2-2-面包屑导航及搜索框" class="headerlink" title="2.2 面包屑导航及搜索框"></a>2.2 面包屑导航及搜索框</h3><p><code>src/components/users/users.vue</code> <code>Card 卡片</code> <code>Breadcrumb 面包屑</code> <code>Input 输入框</code> <code>Button 按钮</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 面包鞋 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-breadcrumb</span> <span class="token attr-name">separator-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-arrow-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-breadcrumb-item</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ path: <span class="token punctuation">'</span>/index<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-breadcrumb-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-breadcrumb-item</span><span class="token punctuation">></span></span>用户管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-breadcrumb-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-breadcrumb-item</span><span class="token punctuation">></span></span>用户列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-breadcrumb-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-breadcrumb</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sou<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入内容<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input5<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-with-select<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>append<span class="token punctuation">"</span></span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sou<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span> <span class="token attr-name">plain</span><span class="token punctuation">></span></span>添加用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不想看到报错</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>input5<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.sou</span></span><span class="token punctuation">{</span>  <span class="token property">line-height</span><span class="token punctuation">:</span><span class="token number">30</span>px<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="2-3-展示用户列表"><a href="#2-3-展示用户列表" class="headerlink" title="2.3 展示用户列表"></a>2.3 展示用户列表</h3><h4 id="2-3-4-组件展示"><a href="#2-3-4-组件展示" class="headerlink" title="2.3.4 组件展示"></a>2.3.4 组件展示</h4><p><code>src/components/users/users.vue</code> <code>Table 表格-&gt;自定义索引</code></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 表格 自定义索引 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span>    <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">    <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span> <span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>      <span class="token attr-name">:index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>indexMethod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>      <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span>      <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>日期<span class="token punctuation">"</span></span>      <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>      <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>      <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span>      <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      input5<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>      tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          date<span class="token punctuation">:</span> <span class="token string">"2016-05-03"</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">"王小虎"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.sou</span> </span><span class="token punctuation">{</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.el-main</span></span><span class="token punctuation">{</span>  <span class="token property">line-height</span><span class="token punctuation">:</span><span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h4 id="2-3-5-获取数据"><a href="#2-3-5-获取数据" class="headerlink" title="2.3.5 获取数据"></a>2.3.5 获取数据</h4><blockquote><p>出登录接口，其他接口发送 http 请求，必须携带 token 值</p></blockquote><p>Axios : <a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">https://www.kancloud.cn/yunye/axios/234845</a> —&gt; 请求配置</p><pre class=" language-js"><code class="language-js"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        input5<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 不想看到报错</span>        <span class="token comment" spellcheck="true">// 设置页码及条数</span>        pagenum<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>        pagesize<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span>        tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 利用钩子函数，获取数据</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取token</span>    <span class="token keyword">let</span> token <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过配置选项发送请求</span>    <span class="token comment" spellcheck="true">// 携带token</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$myHttp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置链接地址 es6新语法</span>        url<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`users?pagenum=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>pagenum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;pagesize=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>pagesize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span><span class="token string">'get'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 配置token</span>        headers<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'Authorization'</span><span class="token punctuation">:</span> token<span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 修改数据  展示页面</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>users<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>修改组件参数，展示数据：</p><p><code>&lt;el-table-column prop=&quot;username&quot; label=&quot;姓名&quot; &gt; &lt;/el-table-column&gt;</code></p><h4 id="2-3-6-操作按钮"><a href="#2-3-6-操作按钮" class="headerlink" title="2.3.6 操作按钮"></a>2.3.6 操作按钮</h4><p><code>Button 按钮</code> <code>Table 表格-&gt;自定义列模板</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>操作<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>210<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-edit<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">plain</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span>      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span>      <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-check<span class="token punctuation">"</span></span>      <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span>      <span class="token attr-name">plain</span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span>      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span>      <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-delete<span class="token punctuation">"</span></span>      <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span>      <span class="token attr-name">plain</span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span></code></pre><p>表格中加入按钮等元素时，需要使用 <code>template</code> 进行包裹：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>用户状态<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>210<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-switch</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value2<span class="token punctuation">"</span></span> <span class="token attr-name">active-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#13ce66<span class="token punctuation">"</span></span> <span class="token attr-name">inactive-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff4949<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-switch</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span></code></pre><h4 id="2-3-7-状态显示"><a href="#2-3-7-状态显示" class="headerlink" title="2.3.7 状态显示"></a>2.3.7 状态显示</h4><p>而在<code>template</code> 标签中有一个 <code>slot-scope=&quot;scope&quot;</code> 属性，<code>scope</code> 的值就是本列中所有数据的值，参考： <code>Table 表格-&gt;固定列</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>用户状态<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>210<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 利用scope 中的值，争取显示用户状态 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-switch</span>      <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.mg_state<span class="token punctuation">"</span></span>      <span class="token attr-name">active-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#13ce66<span class="token punctuation">"</span></span>      <span class="token attr-name">inactive-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff4949<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-switch</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 测试事件，查看 scope 数据 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showScope(scope)<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>显示scope<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span>    <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 测试 方法 显示scope</span>    <span class="token function">showScope</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h4 id="2-3-8-分页展示"><a href="#2-3-8-分页展示" class="headerlink" title="2.3.8 分页展示"></a>2.3.8 分页展示</h4><p><code>Pagination 分页-&gt;附加功能</code></p><pre class=" language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!-- 分页 --></span>  <span class="token comment" spellcheck="true">&lt;!--      current-page  当前页码数      page-sizes  显示条数选项      page-size 当前每页条数  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-pagination</span>      <span class="token attr-name">@size-change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleSizeChange<span class="token punctuation">"</span></span>      <span class="token attr-name">@current-change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleCurrentChange<span class="token punctuation">"</span></span>      <span class="token attr-name">:current-page</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pagenum<span class="token punctuation">"</span></span>      <span class="token attr-name">:page-sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[2, 20, 40]<span class="token punctuation">"</span></span>      <span class="token attr-name">:page-size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pagesize<span class="token punctuation">"</span></span>      <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>total, sizes, prev, pager, next, jumper<span class="token punctuation">"</span></span>      <span class="token attr-name">:total</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-pagination</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>   ……data() {    return {      input5:'',// 不想看到报错      pagenum:1, //设置页码      pagesize:2, // 设置页条数      total:0,  //显示总条数      tableData: []    };  },      ……      ……         // 获取总条数 修改数据展示        this.total = res.data.data.total;</code></pre><p>但点击页码时，会触发 <code>size-change</code> 事件</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      input5<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 不想看到报错</span>      pagenum<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//设置页码</span>      pagesize<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置页条数</span>      total<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//显示总条数</span>      tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取用户数据</span>    <span class="token function">getUserData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获取token</span>      <span class="token keyword">let</span> token <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 通过配置选项发送请求</span>      <span class="token comment" spellcheck="true">// 携带token</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$myHttp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置链接地址 es6新语法</span>        url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`users?pagenum=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>pagenum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;pagesize=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>pagesize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 配置token</span>        headers<span class="token punctuation">:</span> <span class="token punctuation">{</span> Authorization<span class="token punctuation">:</span> token <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 修改数据  展示页面</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>users<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取总条数 修改数据展示</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>total <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>total<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 点击页码触发</span>    <span class="token function">handleCurrentChange</span><span class="token punctuation">(</span>pages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(pages);</span>        <span class="token comment" spellcheck="true">// 修改data数据，重新发送请求</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pagenum <span class="token operator">=</span> pages<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 改变显示条数时触发</span>    <span class="token function">handleSizeChange</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>pagesize <span class="token operator">=</span> numbers<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 利用钩子函数，获取数据</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="2-4-模糊搜索"><a href="#2-4-模糊搜索" class="headerlink" title="2.4 模糊搜索"></a>2.4 模糊搜索</h3><p>请求地址中加入 query 请求参数，获取条件结果</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入内容<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-with-select<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span>    <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>append<span class="token punctuation">"</span></span>    <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchUsers<span class="token punctuation">"</span></span>    <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-search<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        search<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 搜索关键字</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 请求地址中加入关键字</span>        url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`users?pagenum=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>pagenum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;pagesize=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>pagesize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;query=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>search<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 点击搜索事件</span>        <span class="token function">searchUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="2-5-切换用户状态"><a href="#2-5-切换用户状态" class="headerlink" title="2.5 切换用户状态"></a>2.5 切换用户状态</h3><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 利用scope 中的值，争取显示用户状态 --></span><span class="token comment" spellcheck="true">&lt;!-- 组件自带change事件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-switch</span>  <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.mg_state<span class="token punctuation">"</span></span>  <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>change(scope)<span class="token punctuation">"</span></span>  <span class="token attr-name">active-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#13ce66<span class="token punctuation">"</span></span>  <span class="token attr-name">inactive-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff4949<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-switch</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Switch 开关 组件自带事件</span><span class="token function">change</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 接受本条全部信息</span>    <span class="token comment" spellcheck="true">// console.log(scope)</span>    <span class="token keyword">let</span> id <span class="token operator">=</span> scope<span class="token punctuation">.</span>row<span class="token punctuation">.</span>id<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取id</span>    <span class="token keyword">var</span> state <span class="token operator">=</span> scope<span class="token punctuation">.</span>row<span class="token punctuation">.</span>mg_state<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取修改后的状态</span>    <span class="token comment" spellcheck="true">// 请求接口</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$myHttp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/state/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>state<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 修改失败，将状态改为原始值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">[</span>scope<span class="token punctuation">.</span>$index<span class="token punctuation">]</span><span class="token punctuation">.</span>mg_state <span class="token operator">=</span> <span class="token operator">!</span>state<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"修改失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>修改失败是因为没有 token:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Switch 开关 组件自带事件</span><span class="token function">change</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 接受本条全部信息</span>    <span class="token comment" spellcheck="true">// console.log(scope)</span>    <span class="token keyword">let</span> id <span class="token operator">=</span> scope<span class="token punctuation">.</span>row<span class="token punctuation">.</span>id<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取id</span>    <span class="token keyword">var</span> state <span class="token operator">=</span> scope<span class="token punctuation">.</span>row<span class="token punctuation">.</span>mg_state<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取修改后的状态</span>    <span class="token comment" spellcheck="true">// 请求接口</span>    <span class="token comment" spellcheck="true">// 需要使用配置参数请求，设置token</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$myHttp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/state/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>state<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span><span class="token string">'put'</span><span class="token punctuation">,</span>        headers<span class="token punctuation">:</span> <span class="token punctuation">{</span> Authorization<span class="token punctuation">:</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 修改失败，将状态改为原始值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">[</span>scope<span class="token punctuation">.</span>$index<span class="token punctuation">]</span><span class="token punctuation">.</span>mg_state <span class="token operator">=</span> <span class="token operator">!</span>state<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"修改失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="2-6-删除用户"><a href="#2-6-删除用户" class="headerlink" title="2.6 删除用户"></a>2.6 删除用户</h3><p><code>MessageBox 弹框-&gt;确认消息</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 组件中绑定点击按钮</span><span class="token operator">&lt;</span>el<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> icon<span class="token operator">=</span><span class="token string">"el-icon-delete"</span> size<span class="token operator">=</span><span class="token string">"mini"</span> @click<span class="token operator">=</span><span class="token string">"deleteUser(scope.row.id)"</span> plain<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span><span class="token comment" spellcheck="true">// 删除用户</span><span class="token function">deleteUser</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//   this.$myHttp({</span>    <span class="token comment" spellcheck="true">//     url: `users/${id}`,</span>    <span class="token comment" spellcheck="true">//     method: "delete",</span>    <span class="token comment" spellcheck="true">//     headers: { Authorization: window.localStorage.getItem("token") }</span>    <span class="token comment" spellcheck="true">//   }).then(res => {</span>    <span class="token comment" spellcheck="true">//     this.getUserData();</span>    <span class="token comment" spellcheck="true">//     this.$message({</span>    <span class="token comment" spellcheck="true">//       message: "删除成功",</span>    <span class="token comment" spellcheck="true">//       type: "success"</span>    <span class="token comment" spellcheck="true">//     });</span>    <span class="token comment" spellcheck="true">//   });</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$confirm</span><span class="token punctuation">(</span><span class="token string">"此操作将永久删除该用户, 是否继续?"</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        confirmButtonText<span class="token punctuation">:</span> <span class="token string">"确定"</span><span class="token punctuation">,</span>        cancelButtonText<span class="token punctuation">:</span> <span class="token string">"取消"</span><span class="token punctuation">,</span>        type<span class="token punctuation">:</span> <span class="token string">"warning"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$myHttp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>            method<span class="token punctuation">:</span> <span class="token string">"delete"</span><span class="token punctuation">,</span>            headers<span class="token punctuation">:</span> <span class="token punctuation">{</span> Authorization<span class="token punctuation">:</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                message<span class="token punctuation">:</span> <span class="token string">"删除成功"</span><span class="token punctuation">,</span>                type<span class="token punctuation">:</span> <span class="token string">"success"</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            type<span class="token punctuation">:</span> <span class="token string">"info"</span><span class="token punctuation">,</span>            message<span class="token punctuation">:</span> <span class="token string">"已取消删除"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-7-添加用户"><a href="#2-7-添加用户" class="headerlink" title="2.7 添加用户"></a>2.7 添加用户</h3><p><code>Dialog对话框-&gt;自定义内容-&gt;打开嵌套表单的 Dialog</code> <code>Form 表单</code></p><p>表单弹窗：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sou<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 绑定按钮点击事件 直接将 dialogFormVisible值设置为true显示窗口  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogFormVisible <span class="token punctuation">=</span> true<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>添加用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--    :visible.sync属性 控制窗口显示隐藏    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>收货地址<span class="token punctuation">"</span></span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogFormVisible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>活动名称<span class="token punctuation">"</span></span> <span class="token attr-name">:label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>formLabelWidth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form.name<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialog-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 点击取消或确定修改dialogFormVisible=false关闭窗口 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogFormVisible <span class="token punctuation">=</span> false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取 消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogFormVisible <span class="token punctuation">=</span> false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确 定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span></code></pre><p>修改表单</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sou<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 绑定按钮点击事件 直接将 dialogFormVisible值设置为true显示窗口  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogFormVisible <span class="token punctuation">=</span> true<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>添加用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span>  <span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--     :visible.sync属性 控制窗口显示隐藏    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>添加用户<span class="token punctuation">"</span></span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogFormVisible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>90px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form.username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>90px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form.password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>邮箱<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>90px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form.email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>电话<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>90px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form.mobile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialog-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 点击取消或确定修改dialogFormVisible=false关闭窗口 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogFormVisible <span class="token punctuation">=</span> false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取 消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 修改点击事件，在数据入库成功后关闭窗口 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确 定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span></code></pre><p>添加数据及方法</p><pre class=" language-js"><code class="language-js"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      dialogFormVisible<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      form<span class="token punctuation">:</span> <span class="token punctuation">{</span>        username<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        password<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        email<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        mobile<span class="token punctuation">:</span><span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>……methods 方法 <span class="token comment" spellcheck="true">// 添加用户</span>    <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$myHttp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span><span class="token string">'users'</span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span><span class="token string">'post'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// post数据提交</span>        data<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">,</span>        headers<span class="token punctuation">:</span> <span class="token punctuation">{</span> Authorization<span class="token punctuation">:</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>          <span class="token keyword">let</span> <span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 将数据更新到页面</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">"添加用户成功"</span><span class="token punctuation">,</span>type<span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 关闭窗口</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>dialogFormVisible <span class="token operator">=</span> <span class="token boolean">false</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h3 id="2-8-修改用户信息"><a href="#2-8-修改用户信息" class="headerlink" title="2.8 修改用户信息"></a>2.8 修改用户信息</h3><p>绑定表单事件，传入 scope.row 以显示现有用户数据，做表单读入展示</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span>    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span>    <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-edit<span class="token punctuation">"</span></span>    <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span>    <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editUserShow(scope.row)<span class="token punctuation">"</span></span>    <span class="token attr-name">plain</span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-check<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">plain</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span>    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span>    <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-delete<span class="token punctuation">"</span></span>    <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span>    <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUser(scope.row.id)<span class="token punctuation">"</span></span>    <span class="token attr-name">plain</span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>添加修改用户信息的弹窗，并在弹窗表单中展示用户信息</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 修改用户弹窗 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>添加用户<span class="token punctuation">"</span></span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>edit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>90px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">disabled</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>edit.username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>邮箱<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>90px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>edit.email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>电话<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>90px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>edit.mobile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialog-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 点击取消或确定修改dialogFormVisible=false关闭窗口 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editUser <span class="token punctuation">=</span> false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取 消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editUserPut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确 定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 弹窗并显示用户数据 用于修改表单</span><span class="token function">editUserShow</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>editUser <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 弹窗</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>edit <span class="token operator">=</span> users<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 直接使用表单数据</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 修改用户信息 入库</span><span class="token function">editUserPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>edit<span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token keyword">var</span> email <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>edit<span class="token punctuation">.</span>email<span class="token punctuation">;</span>    <span class="token keyword">var</span> mobile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>edit<span class="token punctuation">.</span>mobile<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$myHttp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span> <span class="token string">"put"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>email<span class="token punctuation">,</span>mobile<span class="token punctuation">}</span><span class="token punctuation">,</span>        headers<span class="token punctuation">:</span> <span class="token punctuation">{</span> Authorization<span class="token punctuation">:</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(res);</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>editUser <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关闭窗口</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重新获取数据</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">"修改用户成功"</span><span class="token punctuation">,</span>type<span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="2-9-修改用户角色"><a href="#2-9-修改用户角色" class="headerlink" title="2.9 修改用户角色"></a>2.9 修改用户角色</h3><p><code>Select 选择器-&gt;基础用法</code> 下拉框</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 分配角色弹窗 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>分配角色<span class="token punctuation">"</span></span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showRole<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>role<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>当前用户<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>90px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">disabled</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>role.username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>活动区域<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roleId<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请选择活动区域<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span>          <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in roleList<span class="token punctuation">"</span></span>          <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.key<span class="token punctuation">"</span></span>          <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.roleName<span class="token punctuation">"</span></span>          <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialog-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    { {roleId} }    <span class="token comment" spellcheck="true">&lt;!-- 点击取消或确定修改dialogFormVisible=false关闭窗口 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showRole <span class="token punctuation">=</span> false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取 消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roleUserPut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确 定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span></code></pre><p>弹窗后，获取全部角色遍历到 <code>el-option</code> ，获取用户 id 及修改后的角色，请求接口即可；</p><h2 id="第-3-章-权限管理"><a href="#第-3-章-权限管理" class="headerlink" title="第 3 章 权限管理"></a>第 3 章 权限管理</h2><h3 id="3-1-权限列表"><a href="#3-1-权限列表" class="headerlink" title="3.1 权限列表"></a>3.1 权限列表</h3><p>添加路由及组件文件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Rights <span class="token keyword">from</span> <span class="token string">'@/components/rights/rights'</span><span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">'rights'</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'rights'</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>Rights<span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span>      <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>850<span class="token punctuation">"</span></span>      <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleTable<span class="token punctuation">"</span></span>      <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span>      <span class="token attr-name">highlight-current-row</span><span class="token style-attr language-css"><span class="token attr-name">      <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span></span><span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authName<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>权限名称<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>path<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>路径<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>一级<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>层级<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">getlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$myHttp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          url<span class="token punctuation">:</span> <span class="token string">"rights/list"</span><span class="token punctuation">,</span>          method<span class="token punctuation">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>          headers<span class="token punctuation">:</span> <span class="token punctuation">{</span> Authorization<span class="token punctuation">:</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>backs <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// console.log(backs);</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> backs<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.el-main</span> </span><span class="token punctuation">{</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>只要在<code>el-table</code>元素中定义了<code>height=500</code>属性，即可实现固定表头的表格，而不需要额外的代码。</p><p>修改层级展示</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>level<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>层级<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.level<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>0<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一级<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.level<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>1<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>二级<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.level<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>2<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>三级<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-角色列表"><a href="#3-2-角色列表" class="headerlink" title="3.2 角色列表"></a>3.2 角色列表</h3><p>添加路由及组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Roles <span class="token keyword">from</span> <span class="token string">'@/components/roles/roles'</span><span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">'roles'</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'roles'</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>Roles<span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData5<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 折叠内容 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>props<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">label-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">inline</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo-table-expand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>商品名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{ { prop s.row.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>所属店铺<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{ { prop s.row.shop }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 表头及折叠按钮 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>角色名称<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>角色描述<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>操作<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        tableData5<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            id<span class="token punctuation">:</span> <span class="token string">"12987122"</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">"好滋好味鸡蛋仔"</span><span class="token punctuation">,</span>            category<span class="token punctuation">:</span> <span class="token string">"江浙小吃、小吃零食"</span><span class="token punctuation">,</span>            desc<span class="token punctuation">:</span> <span class="token string">"荷兰优质淡奶，奶香浓而不腻"</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token string">"上海市普陀区真北路"</span><span class="token punctuation">,</span>            shop<span class="token punctuation">:</span> <span class="token string">"王小虎夫妻店"</span><span class="token punctuation">,</span>            shopId<span class="token punctuation">:</span> <span class="token string">"10333"</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            id<span class="token punctuation">:</span> <span class="token string">"12987123"</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">"好滋好味鸡蛋仔"</span><span class="token punctuation">,</span>            category<span class="token punctuation">:</span> <span class="token string">"江浙小吃、小吃零食"</span><span class="token punctuation">,</span>            desc<span class="token punctuation">:</span> <span class="token string">"荷兰优质淡奶，奶香浓而不腻"</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token string">"上海市普陀区真北路"</span><span class="token punctuation">,</span>            shop<span class="token punctuation">:</span> <span class="token string">"王小虎夫妻店"</span><span class="token punctuation">,</span>            shopId<span class="token punctuation">:</span> <span class="token string">"10333"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.demo-table-expand</span> </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.demo-table-expand</span> label </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#99a9bf</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.demo-table-expand</span> <span class="token class">.el-form-item</span> </span><span class="token punctuation">{</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.el-main</span> </span><span class="token punctuation">{</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 表头及折叠按钮 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>角色名称<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roleName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>角色描述<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roleDesc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>操作<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span>      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span>      <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-edit<span class="token punctuation">"</span></span>      <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span>      <span class="token attr-name">circle</span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span>      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span>      <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-check<span class="token punctuation">"</span></span>      <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span>      <span class="token attr-name">circle</span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js">  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      roleList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getrolelist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">getrolelist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$myHttp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span> <span class="token string">"roles"</span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span> <span class="token string">"get"</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>back <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>roleList <span class="token operator">=</span> back<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p><code>Tag 标签-&gt;可移除标签</code></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 折叠内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>props<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tag</span> <span class="token attr-name">closable</span><span class="token punctuation">></span></span>可移除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tag</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span></code></pre><p>分析角色数据，<code>children</code> 为上级角色中的子级角色；</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 折叠内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    { {scope.ro w.children}}    <span class="token comment" spellcheck="true">&lt;!-- &lt;el-tag closable>{ {scope.ro w.children}} &lt;/el-tag> --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-27_14-52-21.png" alt=""></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 折叠内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Layout 布局 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 一级区域 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 一级内容展示 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tag</span> <span class="token attr-name">closable</span><span class="token punctuation">></span></span>{ {scope.ro w.children[1].authName}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tag</span><span class="token punctuation">></span></span> >      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 二级区域 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 二级内容 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tag</span> <span class="token attr-name">closable</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span>              <span class="token punctuation">></span></span>{ {scope.ro w.children[0].children[0].authName}}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tag</span><span class="token punctuation">></span></span>            >          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 三级内容 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tag</span> <span class="token attr-name">closable</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span>              <span class="token punctuation">></span></span>{ {scope.ro              w.children[1].children[0].children[0].authName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tag</span>            <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tag</span> <span class="token attr-name">closable</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span>              <span class="token punctuation">></span></span>{ {scope.ro              w.children[1].children[0].children[1].authName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tag</span>            <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tag</span> <span class="token attr-name">closable</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span>              <span class="token punctuation">></span></span>{ {scope.ro              w.children[1].children[0].children[2].authName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tag</span>            <span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span></code></pre><p>循环遍历所有层级角色</p><pre class=" language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!-- 折叠内容 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Layout 布局 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rowmargin<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item1 in scope.row.children<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item1.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 一级区域 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 一级内容展示 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tag</span> <span class="token attr-name">closable</span><span class="token punctuation">></span></span>{ {item1.authNam e}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tag</span><span class="token punctuation">></span></span> >          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 二级区域 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span>  <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item2 in item1.children<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item2.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  <span class="token comment" spellcheck="true">&lt;!-- 二级内容 --></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tag</span> <span class="token attr-name">closable</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{ {item2.authNam e}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tag</span><span class="token punctuation">></span></span> >              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  <span class="token comment" spellcheck="true">&lt;!-- 三级内容 --></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tag</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item3 in item2.children<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item3.id<span class="token punctuation">"</span></span> <span class="token attr-name">closable</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{ {item3.authNam e}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tag</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 判断没有权限 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.children.length<span class="token punctuation">=</span><span class="token punctuation">=</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tag</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>木有权限<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tag</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>…….el-tag{  margin-top: 10px;  margin-right:5px;}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="3-3-删除角色权限"><a href="#3-3-删除角色权限" class="headerlink" title="3.3 删除角色权限"></a>3.3 删除角色权限</h3><p>绑定 close 事件</p><p>页面元素删除</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 三级内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tag</span>  <span class="token attr-name">@close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>closeTag(item2,key3)<span class="token punctuation">"</span></span>  <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item3,key3) in item2.children<span class="token punctuation">"</span></span>  <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item3.id<span class="token punctuation">"</span></span>  <span class="token attr-name">closable</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>{ {item3.authNam e}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tag</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 删除角色权限</span><span class="token function">closeTag</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 数组引用传递，直接删除即可</span>    <span class="token comment" spellcheck="true">// console.log(item,key)</span>    item<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>服务器删除</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 三级内容 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tag</span>    <span class="token attr-name">@close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>closeTag(item2,key3,scope.row.id,item3.id)<span class="token punctuation">"</span></span>    <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item3,key3) in item2.children<span class="token punctuation">"</span></span>    <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item3.id<span class="token punctuation">"</span></span>    <span class="token attr-name">closable</span>    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>{ {item3.authNam e}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tag</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 删除角色权限</span><span class="token function">closeTag</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>key<span class="token punctuation">,</span>roleId<span class="token punctuation">,</span>rightId<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// item 要删除元素所在父级数组</span>    <span class="token comment" spellcheck="true">// key 要删除元素所在父级数组下标</span>    item<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// roleid 角色ID，rightId权限ID</span>    <span class="token comment" spellcheck="true">// console.log(roleId,rightId);</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$myHttp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`roles/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>roleId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/rights/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>rightId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span><span class="token string">'delete'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>back<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span>meta<span class="token punctuation">}</span>  <span class="token operator">=</span> back<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// console.log(meta);</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>meta<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>message<span class="token punctuation">:</span>meta<span class="token punctuation">.</span>msg<span class="token punctuation">,</span>type<span class="token punctuation">:</span><span class="token string">'success'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-修改角色权限"><a href="#3-4-修改角色权限" class="headerlink" title="3.4 修改角色权限"></a>3.4 修改角色权限</h3><p>展示面板：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-edit<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">circle</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span>    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span>    <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-check<span class="token punctuation">"</span></span>    <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span>    <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rightsShow<span class="token punctuation">"</span></span>    <span class="token attr-name">circle</span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 修改角色授权面板 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>修改角色权限<span class="token punctuation">"</span></span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isrightsShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialog-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tree</span>      <span class="token attr-name">show-checkbox</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>      <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rightsList<span class="token punctuation">"</span></span>      <span class="token attr-name">:props</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultProps<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tree</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 点击取消或确定修改dialogFormVisible=false关闭窗口 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isrightsShow <span class="token punctuation">=</span> false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取 消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rightsPut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确 定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 所有权限列表</span>    rightsList<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置展示内容</span>    defaultProps<span class="token punctuation">:</span> <span class="token punctuation">{</span>        children<span class="token punctuation">:</span> <span class="token string">'children'</span><span class="token punctuation">,</span>        label<span class="token punctuation">:</span> <span class="token string">'authName'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 展示修改角色权限面板</span><span class="token function">rightsShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取所有角色权限</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$myHttp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span><span class="token string">'rights/tree'</span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span><span class="token string">'get'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>back<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span>data<span class="token punctuation">,</span>meta<span class="token punctuation">}</span> <span class="token operator">=</span> back<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rightsList<span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isrightsShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>选中角色拥有的权限：</p><p>在点击按钮式，将所有角色的所有信息传入展示面板事件中：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-edit<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">circle</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span>    <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rightsShow(scope.row)<span class="token punctuation">"</span></span>    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span>    <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-check<span class="token punctuation">"</span></span>    <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span>    <span class="token attr-name">circle</span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 修改角色授权面板 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>修改角色权限<span class="token punctuation">"</span></span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isrightsShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialog-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--           default-expand-all 默认展开所有节点          node-key="id" 将id设置为节点的唯一主键          :default-checked-keys=[] 被选中主键的数组          :props="defaultProps" 设置显示的内容                      show-checkbox 节点可被选中          --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tree</span>      <span class="token attr-name">default-expand-all</span>      <span class="token attr-name">node-key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span>      <span class="token attr-name">:default-checked-keys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultChecked<span class="token punctuation">"</span></span>      <span class="token attr-name">show-checkbox</span>      <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rightsList<span class="token punctuation">"</span></span>      <span class="token attr-name">:props</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultProps<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tree</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 点击取消或确定修改dialogFormVisible=false关闭窗口 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isrightsShow <span class="token punctuation">=</span> false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取 消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rightsPut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确 定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 所有权限列表</span>      rightsList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 设置展示内容</span>      defaultProps<span class="token punctuation">:</span> <span class="token punctuation">{</span>        children<span class="token punctuation">:</span> <span class="token string">"children"</span><span class="token punctuation">,</span>        label<span class="token punctuation">:</span> <span class="token string">"authName"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 默认选中的节点数组</span>      defaultChecked<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 控制角色权限面板</span>      isrightsShow<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 所有角色数据列表</span>      roleList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>……<span class="token comment" spellcheck="true">// 展示修改角色权限面板</span>      <span class="token function">rightsShow</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取所有角色权限</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$myHttp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              url<span class="token punctuation">:</span> <span class="token string">"rights/tree"</span><span class="token punctuation">,</span>              method<span class="token punctuation">:</span> <span class="token string">"get"</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>back <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">let</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> meta <span class="token punctuation">}</span> <span class="token operator">=</span> back<span class="token punctuation">.</span>data<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 显示所有权限</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>rightsList <span class="token operator">=</span> data<span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 遍历row,获取当前角色选中的所有权限，写入数组</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>defaultChecked <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 在遍历赋值前，先清空数据，以免受其他数据影响</span>          <span class="token keyword">var</span> rr <span class="token operator">=</span> row<span class="token punctuation">.</span>children<span class="token punctuation">;</span>          rr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item1 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              item1<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item2<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                  item2<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item3<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">// 只获取第三季选中即可</span>                      <span class="token keyword">this</span><span class="token punctuation">.</span>defaultChecked<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item3<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultChecked<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 控制显示窗口</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>isrightsShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>提交数据入库：</p><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 提交修改角色权限</span>    <span class="token function">rightsPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 在树形控件 中添加 ref="tree" 的属性，在此使用</span>      <span class="token comment" spellcheck="true">// elUI 中提供两个方法getCheckedKeys、getHalfCheckedKeys</span>      <span class="token comment" spellcheck="true">// 获取已选中的节点key</span>      <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tree<span class="token punctuation">.</span><span class="token function">getCheckedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tree<span class="token punctuation">.</span><span class="token function">getHalfCheckedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// concat() 合并两个数组的元素</span>      <span class="token comment" spellcheck="true">// join() 将数组的值以逗号隔开转为字符串</span>      <span class="token keyword">var</span> checkedKeys <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$myHttp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 点击打开窗口是，保存角色id,在此获取使用</span>        url<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`roles/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>roleId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/rights`</span></span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span><span class="token string">'post'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>rids<span class="token punctuation">:</span>checkedKeys<span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>back<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span>data<span class="token punctuation">,</span>meta<span class="token punctuation">}</span> <span class="token operator">=</span> back<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>meta<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>isrightsShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关闭窗口</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getrolelist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 刷新数据</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>message<span class="token punctuation">:</span>meta<span class="token punctuation">.</span>msg<span class="token punctuation">,</span>type<span class="token punctuation">:</span><span class="token string">'success'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 提示成功</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h3 id="3-5-权限限制"><a href="#3-5-权限限制" class="headerlink" title="3.5 权限限制"></a>3.5 权限限制</h3><p>对角色分配了权限后，我们并没有做限制，其实接口文档中<code>左侧菜单权限</code> 已经提供了相应的接口：</p><p><code>src/components/home/home.vue</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu</span> <span class="token attr-name">unique-opened</span> <span class="token attr-name">:router</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-menu-vertical-demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span>    <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in menusList<span class="token punctuation">"</span></span>    <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span>    <span class="token attr-name">:index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id.toString()<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-location<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{ {item.authNam e}} { {item.i d}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span>      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item2 in item.children<span class="token punctuation">"</span></span>      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item2.id<span class="token punctuation">"</span></span>      <span class="token attr-name">:index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item2.path<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>      { {item2.authNam e}} { {item2.pat h}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用生命周期的钩子函数，判断token</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获取token</span>      <span class="token keyword">var</span> token <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 错误提示</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"请登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 跳转到登录页面</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"Login"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 登录后，获取左侧菜单权限</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$myHttp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          url<span class="token punctuation">:</span> <span class="token string">"menus"</span><span class="token punctuation">,</span>          method<span class="token punctuation">:</span> <span class="token string">"get"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>back <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> meta <span class="token punctuation">}</span> <span class="token operator">=</span> back<span class="token punctuation">.</span>data<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>meta<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>menusList <span class="token operator">=</span> data<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        menusList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        msg<span class="token punctuation">:</span> <span class="token string">"we"</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">loginOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          message<span class="token punctuation">:</span> <span class="token string">"您已经退出，继续操作请重新登录"</span><span class="token punctuation">,</span>          type<span class="token punctuation">:</span> <span class="token string">"success"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"Login"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="3-6-导航守卫"><a href="#3-6-导航守卫" class="headerlink" title="3.6 导航守卫"></a>3.6 导航守卫</h3><p>导航守卫: <a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/advanced/navigation-guards.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-27_22-15-01.png" alt=""></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 配置路由的导航守卫</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果访问登录的路由地址，放过</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'Login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果请求的不是登录页面，验证token</span>    <span class="token comment" spellcheck="true">// 1. 获取本地存储中的token</span>    <span class="token keyword">const</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 2. 如果没有token，跳转到登录</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'Login'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 3. 如果有token，继续往下执行</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span class="token punctuation">;</span></code></pre><h2 id="第-99-章-项目打包及加载优化"><a href="#第-99-章-项目打包及加载优化" class="headerlink" title="第 99 章 项目打包及加载优化"></a>第 99 章 项目打包及加载优化</h2><p>打包命令：<code>npm run build</code></p><p>打包完成后，直接将 dist 文件夹内容复制到服务器根目录即可；</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-27_11-43-51.png" alt=""></p><p>我们的项目是很多组件组成的页面，但是，每次发送请求不管请求的是哪个路由的那个组件，很明显的都会将所有内容一次性全部加载出来，影响网站加载速度；如果我们可以在用户请求不同路由时，根据请求加载不同的页面，就会很大程度上提高页面的加载速度；</p><p>路由懒加载： <a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/advanced/lazy-loading.html</a></p><p>路由懒加载的工作就是在打包时，将路由文件分离出来，在请求时，需要哪个路由，再去请求相关文件；</p><p>用法：将路由引入的组件分别打包到不同的 js 文件；</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-27_11-02-37.png" alt=""></p><p>打包完成后，很明显的在 JS 文件夹中多了一个 js 文件；</p><p>然后我们可以将所有的组件全部改为路由懒加载模式：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Login <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/login/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/home/home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> UserList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/userlist/user-list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> RoleList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/rolelist/role-list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> RightsList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/rightslist/rights-list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> GoodsList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/goodslist/goods-list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> GoodsCategories <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/goodscategories/goods-categories"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> GoodsAdd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/goodsadd/goods-add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Report <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/report/report"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Order <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/orders/orders"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Params <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/params/params"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-27_11-44-17.png" alt=""></p><p>但这是不够的，我们知道，很多组件都是可以用 CDN 加载的；</p><p>1：找到 cdn 地址，直接在 index.html 中加入地址，注意，cdn 引入版本要和项目中的版本保持一致；</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/vue/2.5.2/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- built files will be auto injected --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>2：修改 webpack 配置文件 <a href="https://www.webpackjs.com/configuration/externals/" target="_blank" rel="noopener">https://www.webpackjs.com/configuration/externals/</a></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-27_11-33-20.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-27_11-36-38.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-27_13-11-09.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
            <tag> Vuex </tag>
            
            <tag> VueRouter </tag>
            
            <tag> vue-cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node</title>
      <link href="/posts/decd.html"/>
      <url>/posts/decd.html</url>
      
        <content type="html"><![CDATA[<h1 id="Nodejs编程"><a href="#Nodejs编程" class="headerlink" title="Nodejs编程"></a>Nodejs编程</h1><hr><h2 id="第0章-Node介绍"><a href="#第0章-Node介绍" class="headerlink" title="第0章 Node介绍"></a>第0章 Node介绍</h2><h3 id="0-0-回顾-JavaScript"><a href="#0-0-回顾-JavaScript" class="headerlink" title="0.0 回顾 JavaScript"></a>0.0 回顾 JavaScript</h3><ul><li><p>*<em>历史及发展 *</em></p><p>1995年 网景公司的布兰登开发；</p><p>1997年7月，ECMA组织发布ECMAScript 1.0版;</p><p>2007年10月发布3.1版本后不久，ECMAScript 3.1改名为 ECMAScript 5。</p><p>2008年，为Chrome浏览器而开发的V8编译器诞生</p><p>2011年6月，ECMAscript 5.1版发布，现在使用最为广泛的版本;</p><p>2015年6月，ECMAScript 6正式发布，并且更名为“ECMAScript 2015”;</p></li><li><p><strong>如何学习JavaScript</strong></p><p>JavaScript 的核心语法部分相当精简，也就是语言本身，只包括两个部分:</p><ul><li><p>基本的语法构造(比如操作符、控制结构、语句)</p></li><li><p>标准库(就是一系列具有各种功能的对象比如Array、Date、Math等)。</p></li></ul></li></ul><p>  想要实现其他复杂的操作和效果，都要依靠 <strong>宿主环境</strong> 提供API，目前，已经嵌入 JavaScript 的宿主环境有多种，最常见的环境就是 <strong>浏览器</strong> 和 <strong>操作系统</strong> ;</p><ul><li><strong>回顾 JavaScript 语法特性</strong><ul><li>变量、数据类型、流程控制</li><li>函数(基本声明参数，作用域，回调函数)、面向对象(原型，构造函数，this的指向，new的过程)</li></ul></li></ul><h3 id="0-1-Node是什么"><a href="#0-1-Node是什么" class="headerlink" title="0.1 Node是什么"></a>0.1 Node是什么</h3><p><code>Node</code>  是一个基于<code>Chrome V8</code> 引擎的<code>JavaScript</code> 运行环境。  </p><p><code>Node</code>  不是一种独立的语言、<code>Node</code>不是 <code>JavaScript</code> 框架，</p><p><code>Node</code>是一个<strong>除了浏览器之外的、可以让<code>JavaScript</code> 运行的环境</strong></p><p>Node.js 是一个让 JavaScript 运行在服务端的开发平台，是使用 事件驱动， 异步非阻塞I/O，单线程，跨平台的 JS 运行环境；</p><h3 id="0-2-为什么要学习-Node"><a href="#0-2-为什么要学习-Node" class="headerlink" title="0.2. 为什么要学习 Node"></a>0.2. 为什么要学习 Node</h3><ul><li>打开服务器的黑盒子</li><li>企业需求</li><li>大前端必备技能</li><li>为了更好的学习前端框架</li></ul><h3 id="0-3-Node-能做什么"><a href="#0-3-Node-能做什么" class="headerlink" title="0.3. Node 能做什么"></a>0.3. Node 能做什么</h3><p><a href="https://www.zhihu.com/question/20796866" target="_blank" rel="noopener">知乎 - Node.js能做什么，该做什么？</a></p><ul><li>Web 服务器(重点)</li><li>命令行工具</li><li>网络爬虫:是一种按照一定的规则，自动地抓取网站信息的程序</li><li>桌面应用程序开发</li></ul><h3 id="0-4-一些资源"><a href="#0-4-一些资源" class="headerlink" title="0.4. 一些资源"></a>0.4. 一些资源</h3><ol><li><p>文档</p><p><a href="https://nodejs.org/en/docs/" target="_blank" rel="noopener">Node.js 官方文档</a><br><a href="http://nodejs.cn/" target="_blank" rel="noopener">Node.js 中文文档（非官方）</a></p></li><li><p>书籍</p><p><a href="https://read.douban.com/ebook/12053349/" target="_blank" rel="noopener">深入浅出 Node.js</a><br><a href="https://book.douban.com/subject/25892704/" target="_blank" rel="noopener">Node.js 权威指南</a><br><a href="https://book.douban.com/subject/25870705/" target="_blank" rel="noopener">Node.js 实战</a><br><a href="https://book.douban.com/subject/26642320/" target="_blank" rel="noopener">Node.js实战（第2季）</a></p></li><li><p>github资源</p><p><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="noopener">Node.js 包教不包会</a><br><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门</a><br><a href="https://github.com/nqdeng/7-days-nodejs" target="_blank" rel="noopener">七天学会 NodeJS</a> </p></li><li><p>社区</p><p><strong><a href="https://cnodejs.org/" target="_blank" rel="noopener">Node.js 中文社区</a></strong> </p></li></ol><h3 id="0-5-Node-发展历史"><a href="#0-5-Node-发展历史" class="headerlink" title="0.5. Node 发展历史"></a>0.5. Node 发展历史</h3><p><a href="https://gitbook.cn/books/58e796fd09012f0a48761eae/index.html" target="_blank" rel="noopener">聊聊 Node.js 的历史</a><br><a href="https://cnodejs.org/topic/555d3d54e684c4c8088a0d78" target="_blank" rel="noopener">来自朴灵大大的 – Node.js 简史</a></p><h2 id="第1章-NodeJS起步"><a href="#第1章-NodeJS起步" class="headerlink" title="第1章 NodeJS起步"></a>第1章 NodeJS起步</h2><h3 id="1-1-下载安装"><a href="#1-1-下载安装" class="headerlink" title="1.1 下载安装"></a>1.1 下载安装</h3><ul><li>下载 <a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/</a></li></ul><ul><li>历史版本：<a href="https://nodejs.org/en/download/releases/" target="_blank" rel="noopener">https://nodejs.org/en/download/releases/</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-16_18-20-26.png" alt=""></p><p>windows下安装过程：</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-16_18-20-59.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-16_18-29-26.png" alt=""></p><p>对于已经装过的，重新安装就会升级</p><p>安装成功后，打开命令行，输入 </p><p>node –version 或者 node -v  (显示node的版本号)</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-16_18-31-59.png" alt=""></p><p>表示安装成功</p><p>其他平台的安装方式：</p><p><a href="https://nodejs.org/zh-cn/download/package-manager/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/package-manager/</a></p><h3 id="1-2-REPL环境"><a href="#1-2-REPL环境" class="headerlink" title="1.2 REPL环境"></a>1.2 REPL环境</h3><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-16_18-40-26.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-16_18-41-36.png" alt=""></p><p>node中的REPL环境类似于浏览器中的 Console控制台 ，可以做一些代码测试。</p><p>按ctrl + 两次c 退出REPL环境</p><p>但是, 我们写代码肯定不是在控制台中写,而是写在一个单独的.js文件中.</p><h3 id="1-3-node运行js代码"><a href="#1-3-node运行js代码" class="headerlink" title="1.3 node运行js代码"></a>1.3 node运行js代码</h3><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-16_18-52-40.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-16_18-53-36.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-16_18-49-49.png" alt=""></p><h3 id="1-4-Node-中的模块"><a href="#1-4-Node-中的模块" class="headerlink" title="1.4 Node 中的模块"></a>1.4 Node 中的模块</h3><p><strong>浏览器(客户端)中的JS</strong></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-16_18-53-39.png" alt=""></p><p><strong>Node中的JS</strong></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-17_16-40-25.png" alt=""></p><h2 id="Buffer（二进制数据操作）"><a href="#Buffer（二进制数据操作）" class="headerlink" title="Buffer（二进制数据操作）"></a>Buffer（二进制数据操作）</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> buffer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span><span class="token string">'abc\r\nddasdfafd\r\ndfaerewtwert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> buffer2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>buffer2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Buffer.concat 可以传入一个装有buffer的数组，之后会自动拼接返回</span><span class="token comment" spellcheck="true">//buffer数据可以用toString、queryString模块的的parse 转换为看的懂的数据</span></code></pre><h2 id="第2章-核心模块的使用"><a href="#第2章-核心模块的使用" class="headerlink" title="第2章 核心模块的使用"></a>第2章 核心模块的使用</h2><h3 id="2-1-FS模块"><a href="#2-1-FS模块" class="headerlink" title="2.1 FS模块"></a>2.1 FS模块</h3><p>node核心模块之一，用于操作文件；</p><p>中文手册 : <a href="http://nodejs.cn/api/fs.html" target="_blank" rel="noopener">http://nodejs.cn/api/fs.html</a></p><ul><li>文件读写 </li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入模块</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// console.log(typeof fs); //object </span><span class="token comment" spellcheck="true">// 向文件中写入内容</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./2.1.txt'</span><span class="token punctuation">,</span><span class="token string">'itcast'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span>cb2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 回调函数 (写入成功后执行的函数)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cb2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 从文件中读取内容</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./2.1.txt'</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 回调函数 (读取成功后执行的函数)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>追加内容</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入模块</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 向文件中追加内容</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./2.1.txt'</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">{</span>    d<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'2344'</span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./2.1.txt'</span><span class="token punctuation">,</span>d<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入失败'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入成功'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Zilb模块"><a href="#Zilb模块" class="headerlink" title="Zilb模块"></a>Zilb模块</h4><h3 id="2-2-HTTP模块"><a href="#2-2-HTTP模块" class="headerlink" title="2.2 HTTP模块"></a>2.2 HTTP模块</h3><p>node核心模块之一，用于搭建HTTP服务器；</p><p>中文手册 <a href="http://nodejs.cn/api/http.html" target="_blank" rel="noopener">http://nodejs.cn/api/http.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-17_21-03-59.png" alt=""></p><h4 id="2-2-1-开启服务器"><a href="#2-2-1-开启服务器" class="headerlink" title="2.2.1 开启服务器"></a>2.2.1 开启服务器</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 导入http模块</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. 使用http这个模块中的createServer()创建一个服务器实例对象</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3. 绑定端口号,启动web服务器</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">' 请访问http://localhost:8000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4. 为这个服务器实例对象注册 request 请求处理函数</span><span class="token comment" spellcheck="true">// 请求处理函数function(形参1,形参2){}</span><span class="token comment" spellcheck="true">// 形参1:request请求对象 获取到当前请求的路径,方法等本次请求的所有信息</span><span class="token comment" spellcheck="true">// 形参2:response响应对象 发送响应数据</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务端收到客户端的请求啦!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 向客户端页面返回字符串</span>    response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello node"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 结束响应</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-17_21-18-39.png" alt=""></p><p>因为我们的服务器接受请求处理并响应数据时，并没有指定响应数据的类型，所以出现了乱码；</p><p>而在http中，我们可以通过服务器的响应头指定数据类型，在 <a href="http://nodejs.cn/api/http.html#http_class_http_serverresponse" target="_blank" rel="noopener">http.ServerResponse 类</a> 中为我们提供了setHeader 方法：</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-17_21-34-56.png" alt=""></p><h4 id="2-2-2-响应-HTML-页面"><a href="#2-2-2-响应-HTML-页面" class="headerlink" title="2.2.2 响应 HTML 页面"></a>2.2.2 响应 HTML 页面</h4><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-17_21-41-23.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-17_21-45-00.png" alt=""></p><p>但是，我们不能一直将html代码写到服务器的方法中，而是需要建一个xx.html的文件，将html文件中的内容返回给客户端；</p><p>2.2.2 .html :</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>你好，我是西岭老湿<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>另外，我还很帅……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>nodejs代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1:引入文件操作模块</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2：读取html文件中的内容</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./2.2.2.html'</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span>html_data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置响应头</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将html中的内容响应回客户端，结束响应</span>        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-2-3-响应图片"><a href="#2-2-3-响应图片" class="headerlink" title="2.2.3 响应图片"></a>2.2.3 响应图片</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>你好，我是西岭老湿<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>另外，我还很帅……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./img/03.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>野生脆脆.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js">server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// url 属性返回请求的URL字符串</span>    <span class="token keyword">var</span> urls <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> urls <span class="token operator">==</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./2.2.2.html'</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span>html_data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设置响应头</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将html中的内容响应回客户端，结束响应</span>            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'jpg'</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 判断请求图片</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./img/03.jpg'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span>html_data<span class="token punctuation">)</span><span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-4-响应其他静态资源"><a href="#2-2-4-响应其他静态资源" class="headerlink" title="2.2.4 响应其他静态资源"></a>2.2.4 响应其他静态资源</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./public/h.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>你好，我是西岭老湿<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>另外，我还很帅……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./img/03.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>野生脆脆.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./public/h.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js">server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// url 属性返回请求的URL字符串</span>    <span class="token keyword">var</span> urls <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> urls <span class="token operator">==</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./2.2.2.html'</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span>html_data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设置响应头</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将html中的内容响应回客户端，结束响应</span>            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token operator">+</span>urls<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span>html_data<span class="token punctuation">)</span><span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-3-服务器遍历文件及文件夹-案例"><a href="#2-3-服务器遍历文件及文件夹-案例" class="headerlink" title="2.3 服务器遍历文件及文件夹-案例"></a>2.3 服务器遍历文件及文件夹-案例</h3><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-22_16-03-32.png" alt=""></p><p>模仿Apache服务器，遍历文件及文件，显示时间及大小；</p><p>右键另存为，下载页面当作静态页面模板使用；</p><p>使用node载入静态页面：</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="./img%5CSnipaste_2018-09-22_16-08-10.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-22_16-14-00.png" alt=""></p><p>使用ajax技术在页面中发送请求到后台，apache.html</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token string">'/file_list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>node：</p><pre class=" language-js"><code class="language-js">server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// url 属性返回请求的URL字符串</span>    <span class="token keyword">var</span> urls <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> urls <span class="token operator">==</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./apache.html'</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span>html_data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设置响应头</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将html中的内容响应回客户端，结束响应</span>            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>urls <span class="token operator">==</span> <span class="token string">'/file_list'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>files<span class="token punctuation">)</span><span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token operator">+</span>urls<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span>html_data<span class="token punctuation">)</span><span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>apache.html –&gt; ajax</p><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> htmls <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            htmls<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'&lt;tr>&lt;td valign="top">'</span><span class="token punctuation">;</span>            htmls<span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;img src="./img/layout.gif" alt="[   ]">&lt;/td>'</span><span class="token punctuation">;</span>            htmls<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'&lt;td>&lt;a href="http://localhost/%e7%ac%94%e8%ae%b0-01.pdf">'</span><span class="token punctuation">;</span>            htmls<span class="token operator">+</span><span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'&lt;/a> &lt;/td>'</span><span class="token punctuation">;</span>            htmls<span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;td align="right">2018-04-26 10:31 &lt;/td>'</span><span class="token punctuation">;</span>            htmls<span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;td align="right">3.2M&lt;/td>&lt;td>&amp;nbsp;&lt;/td>&lt;/tr>'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> tb <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'tbody'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        tb<span class="token punctuation">.</span>innerHTML<span class="token operator">+</span><span class="token operator">=</span>htmls<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-动态展示文件的其他属性"><a href="#2-4-动态展示文件的其他属性" class="headerlink" title="2.4 动态展示文件的其他属性"></a>2.4 动态展示文件的其他属性</h3><p>获取文件的其他属性：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>files<span class="token punctuation">)</span><span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>er<span class="token punctuation">,</span>st<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>mtime<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改node代码</p><pre class=" language-js"><code class="language-js">server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// url 属性返回请求的URL字符串</span>    <span class="token keyword">var</span> urls <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>urls <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./apache.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> html_data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设置响应头</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将html中的内容响应回客户端，结束响应</span>            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>urls <span class="token operator">==</span> <span class="token string">'/file_list'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// response.end(JSON.stringify(files));</span>            <span class="token keyword">var</span> file_obj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//  判断条件：声明一个变量，这个变量用来记录两个数据的中数据的长度</span>            <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> files<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                file_obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 利用自调用匿名函数，保留i的变量值</span>                <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>er<span class="token punctuation">,</span> st<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        count <span class="token operator">++</span><span class="token punctuation">;</span>                        file_obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            file_obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'file'</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                            file_obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'dir'</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        file_obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>mtime <span class="token operator">=</span> st<span class="token punctuation">.</span>mtime<span class="token punctuation">;</span>                        file_obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">=</span> st<span class="token punctuation">.</span>size<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 当读取的文件个数与所有文件个数相等时</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> files<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>                            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>file_obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// console.log(file_obj);</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// console.log(files[i]);</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'.'</span> <span class="token operator">+</span> urls<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> html_data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改 ajax代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> htmls <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            htmls<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'&lt;tr>&lt;td valign="top">'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                htmls<span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;img src="./img/layout.gif" alt="[   ]">&lt;/td>'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                htmls<span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;img src="./img/folder.gif" alt="[   ]">&lt;/td>'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            htmls<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'&lt;td>&lt;a href="">'</span><span class="token punctuation">;</span>            htmls<span class="token operator">+</span><span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'&lt;/a> &lt;/td>'</span><span class="token punctuation">;</span>            htmls<span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;td align="right">'</span><span class="token operator">+</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>mtime <span class="token operator">+</span><span class="token string">'&lt;/td>'</span><span class="token punctuation">;</span>            htmls<span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;td align="right">'</span><span class="token operator">+</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">+</span><span class="token string">'&lt;/td>&lt;td>&amp;nbsp;&lt;/td>&lt;/tr>'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> tb <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'tbody'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        tb<span class="token punctuation">.</span>innerHTML<span class="token operator">+</span><span class="token operator">=</span>htmls<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token string">'/file_list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>循环后 i 丢失的问题：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// var arr = ['a', 'b', 'c'];</span><span class="token comment" spellcheck="true">// for (var i = 0; i &lt; arr.length; i++) {</span><span class="token comment" spellcheck="true">//     // 模拟延迟</span><span class="token comment" spellcheck="true">//     setTimeout(function () {</span><span class="token comment" spellcheck="true">//         console.log(arr[i]);</span><span class="token comment" spellcheck="true">//     }, 1000);</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">/* * ******************************************* * 上面的代码 全部输出 undefined * ******************************************* */</span> <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 模拟延迟</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> str<span class="token operator">=</span><span class="token string">'/root/a/b/1.txt'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 当前文件的上层目录console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 返回给定路径的最后一段console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 返回当前文件扩展名，没则空<span class="token comment" spellcheck="true">//console.log(path.resolve('/root/a/b', '../c', 'build', '..', 'strict'));</span><span class="token comment" spellcheck="true">//console.log(path.resolve(__dirname, 'build || 文件名'));</span>给定的路径序列从右到左进行处理，每个后续的 path 前置，直到构造出一个绝对路径。 例如，给定的路径片段序列：<span class="token operator">/</span>foo、 <span class="token operator">/</span>bar、 baz，调用 path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'/foo'</span><span class="token punctuation">,</span> <span class="token string">'/bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">)</span> 将返回 <span class="token operator">/</span>bar<span class="token operator">/</span>baz</code></pre><h2 id="process模块"><a href="#process模块" class="headerlink" title="process模块"></a>process模块</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> process<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//process能获取到本机的信息，方便于自动切换开发环境</span><span class="token keyword">let</span> mode<span class="token operator">=</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>OS<span class="token operator">==</span><span class="token string">'Windows_NT'</span><span class="token operator">?</span><span class="token string">'dev'</span><span class="token punctuation">:</span><span class="token string">'prod'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>  mode<span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token punctuation">(</span>mode<span class="token operator">==</span><span class="token string">'dev'</span><span class="token operator">?</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./config.dev'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./config.prod'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="第3章-包管理器npm"><a href="#第3章-包管理器npm" class="headerlink" title="第3章 包管理器npm"></a>第3章 包管理器npm</h2><h3 id="3-1-使用moment"><a href="#3-1-使用moment" class="headerlink" title="3.1 使用moment"></a>3.1 使用moment</h3><p>使用第三方包格式化时间</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-26_13-42-13.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-26_13-43-05.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="./img%5CSnipaste_2018-09-26_13-44-02.png" alt=""></p><h3 id="3-2-npm-命令的使用"><a href="#3-2-npm-命令的使用" class="headerlink" title="3.2 npm 命令的使用"></a>3.2 npm 命令的使用</h3><p>上面的代码，我们使用npm安装了moment来进行格式化时间的处理，这就是使用第三方模块；</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-26_13-51-35.png" alt=""></p><p>而我们使用的npm就是node中自带的包(模块)管理工具；</p><p>借助NPM可以帮助我们快速安装和管理依赖包，使Node与第三方模块之间形成了一个良好的生态系统；</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-26_14-05-00.png" alt=""></p><p>我们也可以直接输入npm，查看帮助引导：</p><pre class=" language-shell"><code class="language-shell">PS C:\xamp\htdocs\ceshi\09> npmUsage: npm <command>where <command> is one of:    access, adduser, audit, bin, bugs, c, cache, ci, cit,    completion, config, create, ddp, dedupe, deprecate,    dist-tag, docs, doctor, edit, explore, get, help,    help-search, hook, i, init, install, install-test, it, link,    list, ln, login, logout, ls, outdated, owner, pack, ping,    prefix, profile, prune, publish, rb, rebuild, repo, restart,    root, run, run-script, s, se, search, set, shrinkwrap, star,    stars, start, stop, t, team, test, token, tst, un,    uninstall, unpublish, unstar, up, update, v, version, view,    whoaminpm <command> -h  quick help on <command>npm -l            display full usage infonpm help <term>   search for help on <term>npm help npm      involved overviewSpecify configs in the ini-formatted file:    C:\Users\Administrator\.npmrcor on the command line via: npm <command> --key valueConfig info can be viewed via: npm help confignpm@6.4.1 C:\Program Files\nodejs\node_modules\npm</code></pre><h3 id="3-3-使用npm初始化项目"><a href="#3-3-使用npm初始化项目" class="headerlink" title="3.3 使用npm初始化项目"></a>3.3 使用npm初始化项目</h3><p>一个项目，不可能只是使用一个第三方包，而包越多，管理起来就越麻烦，</p><p>而 npm init 给我们提供了项目初始化的功能，也解决了多个包的管理问题：</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-26_14-38-00.png" alt=""></p><pre><code>&quot;name&quot;: &quot;usenpm&quot;, // 项目名&quot;version&quot;: &quot;1.0.0&quot;, // 版本号&quot;description&quot;: &quot;这是我们第一次使用npm&quot;,  // 描述信息&quot;main&quot;: &quot;index.js&quot;, // 入口文件&quot;scripts&quot;: { // npm 设置的一些指令    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;},&quot;keywords&quot;: [ // 关键字    &quot;第一次&quot;],&quot;author&quot;: &quot;itheima6期&quot;, // 作者&quot;license&quot;: &quot;ISC&quot; // 当前项目的协议</code></pre><h3 id="补充-npm-install-几种方式-及-区别-s-和-d"><a href="#补充-npm-install-几种方式-及-区别-s-和-d" class="headerlink" title="补充 npm install 几种方式 及 区别 -s 和 -d"></a>补充 npm install 几种方式 及 区别 -s 和 -d</h3><p>“dependencies” : 依赖模块   -s<br>“devDependncies”: 开发环境  -d<br>npm install axios -s 表示安装到依赖模块</p><h3 id="3-4-解决-npm-被墙问题"><a href="#3-4-解决-npm-被墙问题" class="headerlink" title="3.4 解决 npm 被墙问题"></a>3.4 解决 npm 被墙问题</h3><p>npm 存储包文件的服务器在国外，有时候会被墙，速度很慢，所以我们需要解决这个问题。</p><p><a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a>  淘宝的开发团队把 npm 在国内做了一个备份。</p><p>安装淘宝的 cnpm：</p><pre class=" language-shell"><code class="language-shell"># 在任意目录执行都可以# --global 表示安装到全局，而非当前目录# --global 不能省略，否则不管用npm install --global cnpm</code></pre><p>接下来你安装包的时候把之前的 <code>npm</code> 替换成 <code>cnpm</code>。</p><p>举个例子：</p><pre class=" language-shell"><code class="language-shell"># 这里还是走国外的 npm 服务器，速度比较慢npm install jquery# 使用 cnpm 就会通过淘宝的服务器来下载 jquerycnpm install jquery</code></pre><p>如果不想安装 <code>cnpm</code> 又想使用淘宝的服务器来下载：</p><pre class=" language-shell"><code class="language-shell">npm install jquery --registry=https://registry.npm.taobao.org</code></pre><p>但是每一次手动这样加参数很麻烦，所我们可以把这个选项加入配置文件中：</p><pre class=" language-shell"><code class="language-shell"># 配置到淘宝服务器npm config set registry https://registry.npm.taobao.org# 查看 npm 配置信息npm config list</code></pre><p>只要经过了上面命令的配置，则你以后所有的 <code>npm install</code> 都会默认通过淘宝的服务器来下载。</p><h3 id="3-5-package-json-与-package-lock-json-文件"><a href="#3-5-package-json-与-package-lock-json-文件" class="headerlink" title="3.5 package.json 与 package-lock.json 文件"></a>3.5 package.json 与 package-lock.json 文件</h3><p>如果后期开发过程中，需要项目迁移，我们只需要将package.json文件迁移即可，在新项目下执行</p><p><code>npm install</code> ，所有第三方包会自动安装；</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-26_14-44-19.png" alt=""></p><p>package.json的作用就是用来记录当前项目及包的使用情况；<code>不能在package.json中添加注释</code></p><p>package-lock.json  保存第三方包的版本和下载路径等详细信息；</p><p>当我们使用npm管理包时，package.json 及package-lock.json 的内容都会自动更新</p><h3 id="3-6-服务端页面渲染"><a href="#3-6-服务端页面渲染" class="headerlink" title="3.6 服务端页面渲染"></a>3.6 服务端页面渲染</h3><p>之前的案例中，我们时通过前端浏览器发送ajax请求获取服务器数据的，前端获取数据后进行遍历展示；</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-26_22-10-44.png" alt=""></p><p>缺点就是发送多次请求、不利于搜索引擎查找；我们修改改为后端渲染数据；</p><p>art-template：  <a href="https://www.npmjs.com/package/art-template" target="_blank" rel="noopener">https://www.npmjs.com/package/art-template</a></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> art <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'art-template'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>art<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token string">'./'</span><span class="token punctuation">;</span><span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">art</span><span class="token punctuation">(</span><span class="token string">'./art-test.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>data<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token number">123</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">345</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">678</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">987</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>nihoa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{data[0].name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>1：重新创建目录，并初始化项目： <code>npm init</code></p><p>2：将之前写好的后台文件 http.js 和 前台模板页面 apache.html 复制到新项目目录中；</p><p>3：安装时间处理模块： <code>npm   install   moment</code></p><p>4：安装模板引擎模块:    <code>npm  install   art-template</code></p><p>5： 修改 后台文件 http.js 和 前台模板页面 apache.html  文件</p><p> http.js  ：</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-26_20-56-03.png" alt=""></p><p>apache.html  ： </p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-26_20-57-11.png" alt=""></p><p>那么我们在项目中应该使用 客户端渲染还是服务端渲染：</p><p>答：两者都用，根据数据的不同作用而定；</p><blockquote><p>推举一个node开发时使用的小工具 nodemon</p><p>npm  install  nodemon  -g </p><p>安装成功后,使用 nodemon 运行代码,</p><p>代码一旦被保存,nodemon便会自动重新运行新代码</p></blockquote><h2 id="第4章-Node模块化及CommonJS规范"><a href="#第4章-Node模块化及CommonJS规范" class="headerlink" title="第4章 Node模块化及CommonJS规范"></a>第4章 Node模块化及CommonJS规范</h2><p>通过前面几个章节的学习, 我们基本掌握了NodeJS编程的基础知识, 但是我们也直观的发现了一个问题,和我们之前学习浏览器编程时JS, 差异还是很大的; 都是JavaScript编程, 为何有这种差异? 前面写过的防Apache服务器的案例中, 使用过内置fs模块, 使用过 moment 模块, 而这些模块都不是我们写的, 都是直接拿过来使用, 那么我们能不能自己写一个模块, 应该怎么写, 有哪些规矩, 如果我们自己写了一个模块, 能不能提供给其他编程人员直接使用, 应该怎么用? </p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-26_22-10-43.png" alt=""></p><blockquote><p>Electron  跨平台的桌面应用框架: <a href="https://electronjs.org/" target="_blank" rel="noopener">https://electronjs.org/</a></p></blockquote><h3 id="4-1-CommonJS规范的由来"><a href="#4-1-CommonJS规范的由来" class="headerlink" title="4.1 CommonJS规范的由来"></a>4.1 CommonJS规范的由来</h3><p>JS 的表现的表现能力取决于宿主环境提供的API, 在web1.0 时代, W3C 组织提供了浏览器的规范支持, 在web2.0 时代, 随着HTML5的发展, 更多的标准API 出现在了浏览器中, 但是, 在后端 JS 中标准的制定纹丝不动 ; </p><p>由 Mozilla 工程师Kevin Dangoor于2009年1月提出名为 <strong>ServerJS</strong> 的规范; 2009年8月，更名为<em>CommonJS，</em>以显示 API 的更广泛适用性。</p><blockquote><p>What I’m describing here is not a technical problem. It’s a matter of people getting together and making a decision to step forward and start building up something bigger and cooler together.      </p><p>我在这里描述的不是一个技术问题。这是一个人们聚在一起，决定向前一步，开始一起建立更大更酷的东西的问题。                                    </p><p>–Kevin Dangoor </p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="./img/Snipaste_2018-09-27_12-21-21.png" alt="深入浅出Node.js 图2-2"></p><h3 id="4-2-CommonJS-的模块规范"><a href="#4-2-CommonJS-的模块规范" class="headerlink" title="4.2 CommonJS 的模块规范"></a>4.2 CommonJS 的模块规范</h3><p>CommonJS对模块的定义十分简单，主要分为：</p><p>1、模块引用：</p><p>使用 <code>require()</code> 方法引入一个模块API ； </p><p>2、模块定义：</p><p>在模块中使用 exports 对象导出当前模块数据或方法；</p><p>在模块中还存在一个module对象，它代表模块自身，module对象有一个exports 属性，用于数据导出；</p><p> 其实exports 对象就是module.exports 的引用;   <code>exports === module.exports</code></p><p>3、模块标识：</p><p>其实就是模块的文件名，必须符合小驼峰法命名规则，使用<code>require()</code> 引入时使用 <code>. 或 ..</code> 开头的相对路径或绝对路径，引入时可以不写文件后缀名；</p><p><strong>重点注意</strong> ： 模块中的方法和变量的作用于尽在模块内部，每个模块具有独立的空间，互不干扰；</p><p>CommonJS 构建的模块机制中的引入与导出是我们完全不用考虑变量污染或者替换的问题，相比与<code>命名空间</code>的机制，简直就是天才和菜鸟的区别；</p><h3 id="4-3-Node对CommonJS的实现-Node模块化"><a href="#4-3-Node对CommonJS的实现-Node模块化" class="headerlink" title="4.3 Node对CommonJS的实现 (Node模块化)"></a>4.3 Node对CommonJS的实现 (Node模块化)</h3><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-27_13-34-04.png" alt=""></p><p>以上代码就是<strong>自定义模块</strong>的基本规则  这是<strong>重点</strong></p><h3 id="4-4-模块加载的顺序和规则"><a href="#4-4-模块加载的顺序和规则" class="headerlink" title="4.4 模块加载的顺序和规则"></a>4.4 模块加载的顺序和规则</h3><p>在 CommonJS 规范中，使用 <code>require()</code> 加载(引入) 模块时，模块标识必须使用相对路径或绝对路径指明模块位置，但是在node的实现中，我们可以不指明模块路径；如： <code>require(&#39;fs&#39;)、require(&#39;moment&#39;)</code> ;</p><p>如果没有指明路径，那就是加载核心模块或第三方模块，指明加载路径一般就是加载自定义模块；</p><p>不管加载什么模块，都是优先从缓存中加载：</p><blockquote><p> Node 加载模块时，如果这个模块已经被加载过了，则会直接缓存起来，将来再次引用时不会再次加加载这个模块（即：如果一个模块被加载两次，则模块中的代码只会被执行一次）</p></blockquote><p>而核心模块和第三方模块的的加载顺序就是：</p><blockquote><p>先加载核心模块，核心模块的内容都是在安装node时已经编译好的可执行的二进制代码，加载执行的速度，仅次于缓存加载，如果核心模块中没有，则加载第三方模块</p></blockquote><p>第三方模块的加载规则：</p><blockquote><ul><li>先在当前文件的模块所属目录去找 node_modules目录</li><li>如果找到，则去该目录中找 模块名的目录  如 : moment </li><li>如果找到 moment 目录， 则找该目录中的 package.json文件</li><li>如果找到 package.json 文件，则找该文件中的 main属性</li><li>如果找到main 属性，则拿到该属性对应的文件</li><li>如果找到 moment 目录之后，<ul><li>没有package.json</li><li>或者有 package.json 没有 main 属性</li><li>或者有 main 属性，但是指向的路径不存在 </li><li>则 node 会默认去看一下 moment 目录中有没有 index.js –&gt; index.json–&gt; index.node 文件</li></ul></li><li>如果找不到index 或者 找不到 moment 或者找不到 node_modules </li><li>则进入上一级目录找 node_moudles 查找（规则同上）</li><li>如果上一级还找不到，继续向上，一直到当前文件所属磁盘的根目录</li><li>如果到磁盘概目录还没有找到，直接报错</li></ul></blockquote><h3 id="4-5-模块化封装案例"><a href="#4-5-模块化封装案例" class="headerlink" title="4.5 模块化封装案例"></a>4.5 模块化封装案例</h3><p>修改 http.js — 服务器模块</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> luyou <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./luyou'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>luyou<span class="token punctuation">.</span><span class="token function">server</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请访问 127.0.0.1:8000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>添加自定义模块  luyou.js  – 路由模块 </p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> contrllor <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./contrllor'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">server</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span> <span class="token punctuation">{</span>    server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> urls <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>urls <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> html <span class="token operator">=</span> contrllor<span class="token punctuation">.</span>html<span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'.'</span> <span class="token operator">+</span> urls<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// response.end('123');</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>server <span class="token operator">=</span> server<span class="token punctuation">;</span></code></pre><p>contrllor.js — 业务模块</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'art-template'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>template<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token string">'./'</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> file_arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> cont <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> files<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        file_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// console.log(files[i]);</span>        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cont<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 闭包  </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    file_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'file'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    file_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'dir'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                file_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                file_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">=</span> data<span class="token punctuation">.</span>size<span class="token punctuation">;</span>                file_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>mtime <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>mtime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD hh:mm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cont <span class="token operator">==</span> files<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'./apache.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>data<span class="token punctuation">:</span>file_arr<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    exports<span class="token punctuation">.</span>html <span class="token operator">=</span> html<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="第5章-用户管理系统–项目"><a href="#第5章-用户管理系统–项目" class="headerlink" title="第5章 用户管理系统–项目"></a>第5章 用户管理系统–项目</h2><h3 id="5-1-连接MySQL数据库"><a href="#5-1-连接MySQL数据库" class="headerlink" title="5.1 连接MySQL数据库"></a>5.1 连接MySQL数据库</h3><h4 id="5-1-1-mysql基本CURD"><a href="#5-1-1-mysql基本CURD" class="headerlink" title="5.1.1 mysql基本CURD"></a>5.1.1 mysql基本CURD</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>users<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token number">1</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>users<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">value</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token keyword">value</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">UPDATE</span> <span class="token punctuation">`</span>users<span class="token punctuation">`</span> <span class="token keyword">SET</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'value'</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>users<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token keyword">value</span></code></pre><h4 id="5-1-2-安装连接MySQL"><a href="#5-1-2-安装连接MySQL" class="headerlink" title="5.1.2  安装连接MySQL"></a>5.1.2  安装连接MySQL</h4><p><code>npm install mysql</code></p><p>mysql.js :  </p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    database<span class="token punctuation">:</span> <span class="token string">'onepiece'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 查找操作</span><span class="token keyword">var</span> select <span class="token operator">=</span> <span class="token string">'select * from users'</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>select<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>results<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加操作</span><span class="token keyword">var</span> ins <span class="token operator">=</span> <span class="token string">"INSERT INTO users (`name`, `nengli`, `jituan`, `img`) VALUES ('娜美', '雷电', '草帽海贼团', '')"</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ins<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>results<span class="token punctuation">,</span>field<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">.</span>insertId<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="mysql-连接池"><a href="#mysql-连接池" class="headerlink" title="mysql 连接池"></a>mysql 连接池</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//连接池相比于上面的单次连接，更快速和更好管理，连接池可以设置并发连接数，一旦达到这个数，后续的连接只能等前面的连接执行完才能进行</span><span class="token keyword">var</span> Pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    database<span class="token punctuation">:</span> <span class="token string">'onepiece'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//池选项</span><span class="token comment" spellcheck="true">//connectionLimit要同时创建的最大连接数。(默认：10)</span><span class="token comment" spellcheck="true">//queueLimit：  排队最大数  在返回错误之前，池将排队的最大连接请求数getConnection..如果设置为0，对排队的连接请求的数量没有限制。(0不做限制)</span></code></pre><h4 id="co-mysql-异步执行"><a href="#co-mysql-异步执行" class="headerlink" title="co-mysql  异步执行"></a>co-mysql  异步执行</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//把所有mysql语句变为异步执行 可以使用 async\await  返回Promise对象</span><span class="token keyword">const</span> mysql<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> co<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'co-mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span>DB_HOST<span class="token punctuation">,</span> DB_PORT<span class="token punctuation">,</span> DB_USER<span class="token punctuation">,</span> DB_PASS<span class="token punctuation">,</span> DB_NAME<span class="token punctuation">}</span><span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> conn<span class="token operator">=</span>mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  host<span class="token punctuation">:</span> DB_HOST<span class="token punctuation">,</span>  port<span class="token punctuation">:</span> DB_PORT<span class="token punctuation">,</span>  user<span class="token punctuation">:</span> DB_USER<span class="token punctuation">,</span>  password<span class="token punctuation">:</span> DB_PASS<span class="token punctuation">,</span>  database<span class="token punctuation">:</span> DB_NAME<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token function">co</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// promise</span>p<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT 1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如：await db.query(`SELECT ID FROM user_table WHERE username='${username}'`);</span></code></pre><h3 id="5-2-项目初始化及安装第三方模块"><a href="#5-2-项目初始化及安装第三方模块" class="headerlink" title="5.2 项目初始化及安装第三方模块"></a>5.2 项目初始化及安装第三方模块</h3><p>新建目录 <code>haizei</code>  , 打开命令行执行 <code>npm init</code> 初始化项目;</p><p>一次性安装项目所需的所有模块;</p><p><code>npm install art-template mysql bootstrap jquery</code></p><h3 id="5-3-启动项目"><a href="#5-3-启动项目" class="headerlink" title="5.3 启动项目"></a>5.3 启动项目</h3><h4 id="5-3-1-创建http服务器并加载静态页面"><a href="#5-3-1-创建http服务器并加载静态页面" class="headerlink" title="5.3.1 创建http服务器并加载静态页面"></a>5.3.1 创建http服务器并加载静态页面</h4><p>http.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> http<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 加载路由模块</span><span class="token keyword">var</span> luyou <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./luyou'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>luyou<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'8080'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请打开浏览器访问 http://127.0.0.1:8080'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>luyou.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入业务模块使用模板引擎加载页面</span><span class="token keyword">var</span> yewu <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./yewu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>bind <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>server<span class="token punctuation">)</span> <span class="token punctuation">{</span>    server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> urls <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>urls <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> data <span class="token operator">=</span> yewu<span class="token punctuation">.</span>html_data<span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'.'</span> <span class="token operator">+</span> urls<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>yewu.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'art-template'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>template<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token string">'./'</span><span class="token punctuation">;</span><span class="token keyword">var</span> html_data <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'./index.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>data<span class="token punctuation">:</span><span class="token number">123</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>html_data <span class="token operator">=</span> html_data<span class="token punctuation">;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-09-27_22-36-36.png" alt=""></p><h4 id="5-3-2-动态获取数据"><a href="#5-3-2-动态获取数据" class="headerlink" title="5.3.2 动态获取数据"></a>5.3.2 动态获取数据</h4><p>yewu.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> linkdb <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./linkdb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'art-template'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>template<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token string">'./'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkdb<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> html_data <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'./index.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>data<span class="token punctuation">:</span>linkdb<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>html_data <span class="token operator">=</span> html_data<span class="token punctuation">;</span></code></pre><p>linkdb.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    database<span class="token punctuation">:</span> <span class="token string">'onepiece'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> sql <span class="token operator">=</span> <span class="token string">"select * from users "</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span>data<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    exports<span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过连接数据查找到的数据，对外导出时，导不出去，引入linkdb的业务模块，接不到数据；</p><p>关键：这个问题出现的原因很重；</p><h4 id="5-3-3-解决问题"><a href="#5-3-3-解决问题" class="headerlink" title="5.3.3 解决问题"></a>5.3.3 解决问题</h4><p>yewu.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> linkdb <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./linkdb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'art-template'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>template<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token string">'./'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用linkdb模块导出的方法</span>linkdb<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 利用回调函数获取数据</span>    <span class="token keyword">var</span> html_data <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'./index.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>data<span class="token punctuation">:</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    exports<span class="token punctuation">.</span>html_data <span class="token operator">=</span> html_data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>linkdb.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    database<span class="token punctuation">:</span> <span class="token string">'onepiece'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将原来导出数据的方式改为导出方法，供模块加载者调用</span>exports<span class="token punctuation">.</span>query <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> sql <span class="token operator">=</span> <span class="token string">"select * from users "</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span>data<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(data);</span>        <span class="token comment" spellcheck="true">// 数据是通过回调函数的方式返回</span>        <span class="token function">callback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>根据模板引擎语法 修改静态页面 </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tbody<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{each data}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{$value.id}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{$value.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{$value.nengli}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{$value.jituan}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    {{/each}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span></code></pre><h3 id="5-4-获取单个用户信息"><a href="#5-4-获取单个用户信息" class="headerlink" title="5.4 获取单个用户信息"></a>5.4 获取单个用户信息</h3><h4 id="5-4-1-接受前台请求"><a href="#5-4-1-接受前台请求" class="headerlink" title="5.4.1 接受前台请求"></a>5.4.1 接受前台请求</h4><p>修改 luyou.js 路由模块，获取单个用户信息</p><pre class=" language-js"><code class="language-js">server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> urls <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>urls <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> yewu<span class="token punctuation">.</span>html_data<span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>urls <span class="token operator">==</span> <span class="token string">'/getuser'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'getsssss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'.'</span> <span class="token operator">+</span> urls<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>但是，luyou模块，无法处理前台不同类型的请求, 需要我们在服务器端接受并处理客户端发送的 <strong>get 及 post</strong> 请求；</p><h4 id="5-4-2-获取请求类型及参数"><a href="#5-4-2-获取请求类型及参数" class="headerlink" title="5.4.2  获取请求类型及参数"></a>5.4.2  获取请求类型及参数</h4><p>GET 请求把所有的内容编码到访问路径中，POST  请求的内容全部都在请求体中。<br>http.ServerRequest   并没有一个属性内容为请求体，原因是等待请求体传输可能是一件<br>耗时的工作，譬如上传文件。而很多时候我们可能并不需要理会请求体的内容，恶意的 POST<br>请求会大大消耗服务器的资源。所以 Node.js  默认是不会解析请求体的，当我们需要的时候，<br>只能手动来做</p><blockquote><p>网络调试工具Postman，可以帮助我们发送各种HTTP请求，并接受服务器返回的数据；</p><p><a href="https://www.getpostman.com/" target="_blank" rel="noopener">https://www.getpostman.com/</a></p></blockquote><p><strong>获取请求类型</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取请求类型</span>    <span class="token keyword">var</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span>method<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">' 请访问http://localhost:8000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>获取 GET 的请求参数</strong></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/Snipaste_2018-10-07_12-56-34.png" alt=""></p><p><strong>获取Post请求参数</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// url_obj = url.parse(request.url,true);</span>        <span class="token comment" spellcheck="true">// console.log(url_obj.query); </span>        <span class="token comment" spellcheck="true">//以上代码 无内容，失败</span>        <span class="token comment" spellcheck="true">// POST请求的内容全部都在请求体中 </span><span class="token punctuation">}</span></code></pre><p>手册中明确说明：</p><p>为了支持各种可能的 HTTP 应用，Node.js 的 HTTP API 是非常底层的。 它只涉及流处理与消息解析。 它把一个消息解析成消息头和消息主体，但不解析具体的消息头或消息主体。</p><p>因此我们需要查找更底层的网络实现，node中的基础网络模块net模块： <a href="http://nodejs.cn/api/net.html：" target="_blank" rel="noopener">http://nodejs.cn/api/net.html：</a></p><pre class=" language-js"><code class="language-js"><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// url_obj = url.parse(request.url,true);</span>    <span class="token comment" spellcheck="true">// console.log(url_obj.query); </span>    <span class="token comment" spellcheck="true">//以上代码 无内容，失败</span>    <span class="token comment" spellcheck="true">// POST请求的内容全部都在请求体中 </span>    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// net 模块中的 net.Socket 提供的data及end事件 </span>    <span class="token comment" spellcheck="true">// 绑定data事件获取数据</span>    request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>che<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data <span class="token operator">+</span><span class="token operator">=</span> che<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 绑定end事件，监听数据接受完成</span>    request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(data);</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="5-5-获取单个用户信息"><a href="#5-5-获取单个用户信息" class="headerlink" title="5.5 获取单个用户信息"></a>5.5 获取单个用户信息</h3><p><strong>1： 修改路由逻辑，优先判断请求类型：</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入业务模块使用模板引擎加载页面</span><span class="token keyword">var</span> yewu <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./yewu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>bind <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>server<span class="token punctuation">)</span> <span class="token punctuation">{</span>    server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 优先判断请求方式</span>        <span class="token keyword">var</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span>method<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析URL参数</span>        <span class="token keyword">var</span> url_obj <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// console.log(url_obj.query);//参数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>url_obj<span class="token punctuation">.</span>pathname <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> data <span class="token operator">=</span> yewu<span class="token punctuation">.</span>html_data<span class="token punctuation">;</span>                response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断 获取单个用户信息路由 </span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>url_obj<span class="token punctuation">.</span>pathname <span class="token operator">==</span> <span class="token string">'/getuser'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'.'</span> <span class="token operator">+</span> url_obj<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>2： 修改静态模板，添加查看连接</strong></p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/getuser?id<span class="token punctuation">=</span>{{$value.id}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></code></pre><p><strong>3：修改路由，获取get请求参数，并将id参数传入业务模块</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 判断 获取单个用户信息路由 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>url_obj<span class="token punctuation">.</span>pathname <span class="token operator">==</span> <span class="token string">'/getuser'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取id参数</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> url_obj<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在yewu模块中封装方法，传递id参数。</span>    <span class="token comment" spellcheck="true">// 使用回掉函数获取数据</span>    yewu<span class="token punctuation">.</span><span class="token function">gets</span><span class="token punctuation">(</span>url_obj<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>4：修改业务模块，添加gets方法</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 封装gets方法并导出,接受id参数及回调函数</span>exports<span class="token punctuation">.</span>gets <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用数据库模块的getone方法,并传入id参数</span>    linkdb<span class="token punctuation">.</span><span class="token function">getone</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 利用回调函数获取数据</span>        <span class="token keyword">var</span> user_data <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'./users.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>data<span class="token punctuation">:</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">callback</span><span class="token punctuation">(</span>user_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>5：添加users.html静态模板</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    {{data[0].name}}    {{data[0].nengli}}    {{data[0].jituan}}    {{data[0].name}}    {{data[0].name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p><strong>6：修改数据库模块，添加getone方法</strong></p><pre class=" language-js"><code class="language-js">exports<span class="token punctuation">.</span>getone <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> sql <span class="token operator">=</span> <span class="token string">"select * from users where id="</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// console.log(sql);</span>    connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span>data<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数据是通过回调函数的方式返回</span>        <span class="token function">callback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// connection.end();</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：将数据库模块中的所有 connection.end(); 删除，因为我们有多个方法，不能在方法调用中停止数据库的连接，否则，其他方法在后续调用中无法连接数据；</p></blockquote><h3 id="5-6-链式操作原理解析"><a href="#5-6-链式操作原理解析" class="headerlink" title="5.6 链式操作原理解析"></a>5.6 链式操作原理解析</h3><p><strong>链式操作的核心原理：</strong></p><p>test.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./chained1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// c.select();</span>c<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'id=2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>chained.js</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    where<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>wh<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>whe <span class="token operator">=</span> wh<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 链式操作的核心就是保存数据并返回本对象</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    select<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>whe <span class="token operator">==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> sql <span class="token operator">=</span> <span class="token string">"select * from users "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> sql <span class="token operator">=</span> <span class="token string">"select * from users where "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>whe<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>whe <span class="token operator">=</span> undefined<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    update<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>whe <span class="token operator">==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'更新数据时，请填写where条件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> sql <span class="token operator">=</span> <span class="token string">"update xx from  set () where "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>whe<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>whe <span class="token operator">=</span> undefined<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-7-使用链式操作灵活操作数据库"><a href="#5-7-使用链式操作灵活操作数据库" class="headerlink" title="5.7 使用链式操作灵活操作数据库"></a>5.7 使用链式操作灵活操作数据库</h3><p><strong>1：新建数据操作模块 db.js</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    database<span class="token punctuation">:</span> <span class="token string">'onepiece'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    that<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>    where<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>wh<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>whe <span class="token operator">=</span> wh<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    select<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>whe <span class="token operator">==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> sql <span class="token operator">=</span> <span class="token string">"select * from users "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> sql <span class="token operator">=</span> <span class="token string">"select * from users where "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>whe<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 用完后重置where条件，以免后续操作的数据重复</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>whe <span class="token operator">=</span> undefined<span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">callback</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">callback</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2：修改业务模块(yewu.js)的调用</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// var linkdb = require('./linkdb');</span><span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./db'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'art-template'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>template<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token string">'./'</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    getall<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        db<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 利用回调函数获取数据</span>            <span class="token keyword">var</span> html_data <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'./index.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">callback</span><span class="token punctuation">(</span>html_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    getone<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>        db<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'id='</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> user_data <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'./users.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>data<span class="token punctuation">:</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">callback</span><span class="token punctuation">(</span>user_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>3：修改路由模块(luyou.js)的调用</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入业务模块使用模板引擎加载页面</span><span class="token keyword">var</span> yewu <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./yewu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>bind <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>server<span class="token punctuation">)</span> <span class="token punctuation">{</span>    server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 优先判断请求方式</span>        <span class="token keyword">var</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span>method<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析URL参数</span>        <span class="token keyword">var</span> url_obj <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// console.log(url_obj.query);//参数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>url_obj<span class="token punctuation">.</span>pathname <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                yewu<span class="token punctuation">.</span><span class="token function">getall</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 判断 获取单个用户信息路由 </span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>url_obj<span class="token punctuation">.</span>pathname <span class="token operator">==</span> <span class="token string">'/getuser'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取id参数</span>                <span class="token keyword">var</span> id <span class="token operator">=</span> url_obj<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 在yewu模块中封装方法，传递id参数。</span>                <span class="token comment" spellcheck="true">// 使用回掉函数获取数据</span>                yewu<span class="token punctuation">.</span><span class="token function">getone</span><span class="token punctuation">(</span>url_obj<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'.'</span> <span class="token operator">+</span> url_obj<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="5-8-修改用户信息"><a href="#5-8-修改用户信息" class="headerlink" title="5.8 修改用户信息"></a>5.8 修改用户信息</h3><h4 id="5-8-1-修改模板代码，添加链接"><a href="#5-8-1-修改模板代码，添加链接" class="headerlink" title="5.8.1 修改模板代码，添加链接"></a>5.8.1 修改模板代码，添加链接</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tbody<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{each data}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{$value.id}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{$value.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{$value.nengli}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{$value.jituan}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/getuser?id<span class="token punctuation">=</span>{{$value.id}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/upuser?id<span class="token punctuation">=</span>{{$value.id}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    {{/each}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span></code></pre><h4 id="5-8-2-获取用户信息并填入表单"><a href="#5-8-2-获取用户信息并填入表单" class="headerlink" title="5.8.2 获取用户信息并填入表单"></a>5.8.2 获取用户信息并填入表单</h4><p><strong>1：添加路由判断(luyou.js)</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 修改用户信息，先获取用户信息    </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>url_obj<span class="token punctuation">.</span>pathname <span class="token operator">==</span> <span class="token string">'/upuser'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取id参数</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> url_obj<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在yewu模块中封装方法，传递id参数。</span>    <span class="token comment" spellcheck="true">// 使用回掉函数获取数据</span>    yewu<span class="token punctuation">.</span><span class="token function">upuser_get</span><span class="token punctuation">(</span>url_obj<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span></code></pre><p><strong>2：添加业务逻辑（yewu.js），获取用户信息</strong></p><pre class=" language-js"><code class="language-js">upuser_get<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    db<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'id='</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> user_data <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'./upuser.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>data<span class="token punctuation">:</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">callback</span><span class="token punctuation">(</span>user_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>3：添加表单模板（upuser.html）</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">table </span><span class="token punctuation">{</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>        <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">800</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">td </span><span class="token punctuation">{</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/upuser?id<span class="token punctuation">=</span>{{data[0].id}}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{data[0].name}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>能力<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nengli<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{data[0].nengli}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>团体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tuanti<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{data[0].jituan}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>上传图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>修改<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h4 id="5-8-3-获取并处理post提交数据，修改数据库"><a href="#5-8-3-获取并处理post提交数据，修改数据库" class="headerlink" title="5.8.3 获取并处理post提交数据，修改数据库"></a>5.8.3 获取并处理post提交数据，修改数据库</h4><p><strong>路由模块(luyou.js)</strong></p><pre class=" language-js"><code class="language-js"> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 只要是POST请求，则优先获取数据</span>     <span class="token comment" spellcheck="true">// 后处理路由逻辑</span>     <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>     request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>che<span class="token punctuation">)</span> <span class="token punctuation">{</span>         data <span class="token operator">+</span><span class="token operator">=</span> che<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 绑定end事件，监听数据接受完成</span>     request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// console.log(data);</span>         <span class="token comment" spellcheck="true">// 获取Post传输的数据</span>         <span class="token keyword">var</span> post_data <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 路由判断</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>url_obj<span class="token punctuation">.</span>pathname <span class="token operator">==</span> <span class="token string">'/upuser'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 调用业务层方法</span>             yewu<span class="token punctuation">.</span><span class="token function">upuser_post</span><span class="token punctuation">(</span>url_obj<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span> post_data<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><p><strong>业务模块（yewu.js）</strong></p><pre class=" language-js"><code class="language-js">upuser_post<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>data<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用数据模块修改用户信息</span>    db<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'id='</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>changedRows<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// http服务器相应要求必须是字符串</span>        <span class="token function">callback</span><span class="token punctuation">(</span>changedRows<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>数据库模块（db.js）</strong></p><pre class=" language-js"><code class="language-js">update<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 没where条件，则停止所有操作</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>where <span class="token operator">==</span> undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 拼接sql语句的set部分</span>    <span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>v <span class="token keyword">in</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token operator">+</span><span class="token operator">=</span> v <span class="token operator">+</span><span class="token string">"='"</span><span class="token operator">+</span> data<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"',"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> sets <span class="token operator">=</span> <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">set</span><span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> sql <span class="token operator">=</span> <span class="token string">"UPDATE `users` SET "</span><span class="token operator">+</span>sets <span class="token operator">+</span> <span class="token string">' where '</span><span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>whe<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// console.log(sql);</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>whe <span class="token operator">=</span> undefined<span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span>res<span class="token punctuation">,</span>fields<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(error)</span>        <span class="token comment" spellcheck="true">// 返回受影响行数</span>        <span class="token function">callback</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>changedRows<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><blockquote><p>作业： 自己完成添加及删除操作</p></blockquote><h2 id="第7章-express-框架"><a href="#第7章-express-框架" class="headerlink" title="第7章 express 框架"></a>第7章 express 框架</h2><h3 id="7-1-简介"><a href="#7-1-简介" class="headerlink" title="7.1 简介"></a>7.1 简介</h3><p>Express 是基于  Node.js  平台，快速、开放、极简的 Web 开发框架, 提供一系列强大特性帮助你创建各种Web应用。Express 不对 node.js 已有的特性进行二次抽象，我们只是在它之上扩展了Web应用所需的功能。丰富的HTTP工具以及来自Connect框架的中间件随取随用，创建强健、友好的API变得快速又简单</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="/./img/Snipaste_2018-10-12_08-38-02.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="./img/Snipaste_2018-10-12_08-38-13.png" alt=""></p><h3 id="7-2-安装使用"><a href="#7-2-安装使用" class="headerlink" title="7.2 安装使用"></a>7.2 安装使用</h3><p>就像一个普通的第三方模块一样安装即可；</p><p><code>npm init</code>   <code>npm install express</code>  </p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello world !'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'8000'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1：8000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>其中 <a href="http://www.expressjs.com.cn/4x/api.html" target="_blank" rel="noopener">Request、Response – API</a>   我们需要重点关注</p><h2 id="第8章-项目的重构"><a href="#第8章-项目的重构" class="headerlink" title="第8章 项目的重构"></a>第8章 项目的重构</h2><p>将我们之前的海贼王项目使用express框架进行重写，重写过程中，学习框架提供的各种API，并完善项目功能；</p><h3 id="8-1-启动服务器"><a href="#8-1-启动服务器" class="headerlink" title="8.1 启动服务器"></a>8.1 启动服务器</h3><p>创建http.js </p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'8000'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1：8000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="8-2-重写路由模块"><a href="#8-2-重写路由模块" class="headerlink" title="8.2 重写路由模块"></a>8.2 重写路由模块</h3><p>之前我们写了一个独立的模块（luyou.js）来处理请求，而在 express 中已经帮我们写好了路由的请求处理规则，不需要我们进行判断；</p><p><strong><em>路由</em></strong> 是指确定应用程序如何响应对特定端点的客户端请求，该请求是URI（或路径）和特定HTTP请求方法（GET，POST等）。</p><p>每个路由都可以有一个或多个处理函数，这些函数在路由匹配时执行。</p><h4 id="8-2-1-express-中的基本路由"><a href="#8-2-1-express-中的基本路由" class="headerlink" title="8.2.1 express 中的基本路由"></a>8.2.1 express 中的基本路由</h4><p>路径定义采用以下结构：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> handler<span class="token punctuation">)</span></code></pre><p>以下示例定义了简单路由。</p><p><code>Hello World!</code>在主页上回复：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在根路由（<code>/</code>），应用程序的主页上响应POST请求：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Got a POST request'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>响应对<code>/user</code>路由的PUT请求：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Got a PUT request at /user'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>响应对<code>/user</code>路由的DELETE请求：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Got a DELETE request at /user'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="8-2-2-外置路由"><a href="#8-2-2-外置路由" class="headerlink" title="8.2.2. 外置路由"></a>8.2.2. 外置路由</h4><p>设置 外置路由 rout.js </p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/edit'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'post_edit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导出 router</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p>写好路由规则，一定要记得将 路由对象(router) 导出</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入外置路由</span><span class="token keyword">var</span> rout <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./rout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>rout<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用引入外置的路由</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'8000'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1：8000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>将外置路由引入后，使用 app.use() 进行加载使用； </p><h4 id="8-2-3-使用外置路由修改项目"><a href="#8-2-3-使用外置路由修改项目" class="headerlink" title="8.2.3 使用外置路由修改项目"></a>8.2.3 使用外置路由修改项目</h4><p>在 luyou.js 中，注释以前的代码，添加新代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> yewu <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./yewu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    yewu<span class="token punctuation">.</span><span class="token function">getall</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p>在 http.js 中，使用 express 启动服务，并引入使用新修改的 luyou.js 模块</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> luyou <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./luyou'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>luyou<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'8080'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1:8080'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p> <img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="./img/Snipaste_2018-10-12_11-03-13.png" alt=""></p><h4 id="8-2-4-使用链式操作添加路由"><a href="#8-2-4-使用链式操作添加路由" class="headerlink" title="8.2.4 使用链式操作添加路由"></a>8.2.4 使用链式操作添加路由</h4><p>luyou.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> yewu <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./yewu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// express的路由支持链式操作</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    yewu<span class="token punctuation">.</span><span class="token function">getall</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/getuser'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// req 提供了query属性获取请求参数</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在yewu模块中封装方法，传递id参数。</span>    <span class="token comment" spellcheck="true">// 使用回掉函数获取数据</span>    yewu<span class="token punctuation">.</span><span class="token function">getone</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><h4 id="8-2-5-优化路由模块"><a href="#8-2-5-优化路由模块" class="headerlink" title="8.2.5 优化路由模块"></a>8.2.5 优化路由模块</h4><p>路由模块 (luyou.js) 中只负责调用，调用时，将req  res 传入业务模块</p><pre class=" language-js"><code class="language-js">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    yewu<span class="token punctuation">.</span><span class="token function">getall</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// yewu.getall(function (data) {</span>    <span class="token comment" spellcheck="true">//     res.end(data);</span>    <span class="token comment" spellcheck="true">// })</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/getuser'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    yewu<span class="token punctuation">.</span><span class="token function">getone</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// req 提供了query属性获取请求参数</span>    <span class="token comment" spellcheck="true">// var id = req.query.id;</span>    <span class="token comment" spellcheck="true">// // 在yewu模块中封装方法，传递id参数。</span>    <span class="token comment" spellcheck="true">// // 使用回掉函数获取数据</span>    <span class="token comment" spellcheck="true">// yewu.getone(id, function (data) {</span>    <span class="token comment" spellcheck="true">//     res.end(data);</span>    <span class="token comment" spellcheck="true">// });</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>业务模块接受 req  res  负责处理请求并响应数据</p><pre class=" language-js"><code class="language-js">getall<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    db<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 利用回调函数获取数据</span>        <span class="token keyword">var</span> html_data <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'./index.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// console.log(html_data);</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>getone<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    db<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'id='</span><span class="token operator">+</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> user_data <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'./users.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>data<span class="token punctuation">:</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>user_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p><strong>继续简化路由模块</strong></p><pre class=" language-js"><code class="language-js">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>yewu<span class="token punctuation">.</span>getall<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/getuser'</span><span class="token punctuation">,</span>yewu<span class="token punctuation">.</span>getone<span class="token punctuation">)</span></code></pre><p>原理：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">callback</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> pros <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">pros</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// fn(pros);</span></code></pre><h3 id="8-3-重写模板引擎"><a href="#8-3-重写模板引擎" class="headerlink" title="8.3 重写模板引擎"></a>8.3 重写模板引擎</h3><p><a href="https://github.com/aui/art-template/issues/369" target="_blank" rel="noopener">art-template@4 新特性</a></p><p><a href="https://github.com/aui/express-art-template" target="_blank" rel="noopener">express-art-template</a> </p><p>安装：</p><pre class=" language-shell"><code class="language-shell">npm install --save art-templatenpm install --save express-art-template</code></pre><p>官方示例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'art'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-art-template'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view options'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    debug<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index.art'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        user<span class="token punctuation">:</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">'aui'</span><span class="token punctuation">,</span>            tags<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'art'</span><span class="token punctuation">,</span> <span class="token string">'template'</span><span class="token punctuation">,</span> <span class="token string">'nodejs'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改 http.js 将 express-art-template 注册为express框架的模板引擎，并设置模板后缀为 html</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="./img/Snipaste_2018-10-12_13-52-28.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="./img/Snipaste_2018-10-12_13-54-53.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="./img/Snipaste_2018-10-12_14-03-20.png" alt=""></p><p>在项目中新建views目录，将所有静态页面放入views目录</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="./img/Snipaste_2018-10-12_14-05-30.png" alt=""></p><h3 id="8-4-利用-Express-托管静态文件"><a href="#8-4-利用-Express-托管静态文件" class="headerlink" title="8.4 利用 Express 托管静态文件"></a>8.4 利用 Express 托管静态文件</h3><p><a href="http://www.expressjs.com.cn/starter/static-files.html" target="_blank" rel="noopener">http://www.expressjs.com.cn/starter/static-files.html</a></p><p>在项目中新建 public 文件夹并将bootstrap.css移入， 修改 index.html 加载 css  静态文件 ，在http.js中引入并设置静态资源加载路径：</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="./img/Snipaste_2018-10-12_14-25-19.png" alt=""></p><p>如果要使用多个静态资源目录，请多次调用 <code>express.static</code> 函数：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'files'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>访问静态资源文件时，<code>express.static</code> 函数会根据目录的添加顺序查找所需的文件。</p><h3 id="8-5-完成项目重构"><a href="#8-5-完成项目重构" class="headerlink" title="8.5 完成项目重构"></a>8.5 完成项目重构</h3><p>修改所有路由及业务模块代码</p><p>luyou.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> yewu <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./yewu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>yewu<span class="token punctuation">.</span>getall<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/getuser'</span><span class="token punctuation">,</span>yewu<span class="token punctuation">.</span>getone<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/upuser'</span><span class="token punctuation">,</span>yewu<span class="token punctuation">.</span>upuser_get<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/upuser'</span><span class="token punctuation">,</span>yewu<span class="token punctuation">.</span>upuser_post<span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p>yewu.js</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// var linkdb = require('./linkdb');</span><span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./db'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// template.defaults.root = './';</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    getall<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        db<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    getone<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        db<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'id='</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'./users.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    upuser_get<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        db<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'id='</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'./upuser.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    upuser_post<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>che<span class="token punctuation">)</span> <span class="token punctuation">{</span>            data <span class="token operator">+</span><span class="token operator">=</span> che<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 绑定end事件，监听数据接受完成</span>        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// console.log(data);</span>            <span class="token comment" spellcheck="true">// 获取Post传输的数据</span>            <span class="token keyword">var</span> post_data <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 调用数据模块修改用户信息</span>            db<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'id='</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>post_data<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>changedRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// http服务器相应要求必须是字符串</span>                res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>changedRows<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="8-6-展示用户头像"><a href="#8-6-展示用户头像" class="headerlink" title="8.6 展示用户头像"></a>8.6 展示用户头像</h3><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="./img/Snipaste_2018-10-12_14-57-04.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="./img/Snipaste_2018-10-12_14-57-40.png" alt=""></p><h3 id="8-7-修改用户头像"><a href="#8-7-修改用户头像" class="headerlink" title="8.7 修改用户头像"></a>8.7 修改用户头像</h3><h4 id="8-7-1-测试文件上传"><a href="#8-7-1-测试文件上传" class="headerlink" title="8.7.1 测试文件上传"></a>8.7.1 测试文件上传</h4><p>创建服务器：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/upfile'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>che<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data <span class="token operator">+</span><span class="token operator">=</span> che<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 直接打印post传过来的数据</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'8000'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1：8000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>使用postman工具上传文件：</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="./img/Snipaste_2018-10-12_15-39-27.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="./img/Snipaste_2018-10-12_15-42-24.png" alt=""></p><h4 id="8-7-2-借助第三方插件处理文件上传"><a href="#8-7-2-借助第三方插件处理文件上传" class="headerlink" title="8.7.2 借助第三方插件处理文件上传"></a>8.7.2 借助第三方插件处理文件上传</h4><p><a href="https://www.npmjs.com/package/formidable" target="_blank" rel="noopener">https://www.npmjs.com/package/formidable</a></p><p>安装模块  <code>npm install formidable</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> formidable <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'formidable'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/upfile'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">formidable<span class="token punctuation">.</span>IncomingForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// form.uploadDir = './img'; // 设置上传路径</span>    <span class="token comment" spellcheck="true">// form.keepExtensions = true; // 保留文件扩展名</span>    form<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> times <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 组装上传路径</span>        <span class="token keyword">var</span> file_path <span class="token operator">=</span> <span class="token string">'./img/'</span><span class="token operator">+</span>times<span class="token operator">+</span>files<span class="token punctuation">.</span>imgs<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将缓存文件移动至制定目录</span>        fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span>imgs<span class="token punctuation">.</span>path<span class="token punctuation">,</span>file_path<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'8000'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1：8000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="8-7-3-在项目中实现文件上传"><a href="#8-7-3-在项目中实现文件上传" class="headerlink" title="8.7.3 在项目中实现文件上传"></a>8.7.3 在项目中实现文件上传</h4><p>修改 upuser.html</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="./img/Snipaste_2018-10-12_17-23-49.png" alt=""></p><p>修改业务模块 yewu.js 使用 formidable 获取 post 数据，实现文件上传 </p><pre class=" language-js"><code class="language-js">upuser_post<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">formidable<span class="token punctuation">.</span>IncomingForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    form<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> times <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 组装上传路径</span>        <span class="token keyword">var</span> file_path <span class="token operator">=</span> <span class="token string">'./public/img/'</span> <span class="token operator">+</span> times <span class="token operator">+</span> files<span class="token punctuation">.</span>imgs<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将缓存文件移动至指定的public目录</span>        fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span>imgs<span class="token punctuation">.</span>path<span class="token punctuation">,</span> file_path<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 因为设置静态资源时，已经时public文件夹，写入数据库时，不要加public</span>                fields<span class="token punctuation">.</span>img <span class="token operator">=</span> <span class="token string">'./img/'</span> <span class="token operator">+</span> times <span class="token operator">+</span> files<span class="token punctuation">.</span>imgs<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                db<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'id='</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>fields<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>changedRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// http服务器相应要求必须是字符串</span>                    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>changedRows<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件上传失败'</span><span class="token operator">+</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="8-8-用户登陆"><a href="#8-8-用户登陆" class="headerlink" title="8.8 用户登陆"></a>8.8 用户登陆</h3><h4 id="8-8-1-登陆逻辑及cookie-session-的使用"><a href="#8-8-1-登陆逻辑及cookie-session-的使用" class="headerlink" title="8.8.1 登陆逻辑及cookie-session 的使用"></a>8.8.1 登陆逻辑及cookie-session 的使用</h4><p>express官方资源中，为我们提供了一个中间件，<a href="http://www.expressjs.com.cn/en/resources/middleware/cookie-session.html" target="_blank" rel="noopener">cookie-session</a> </p><p> <code>npm install cookie-session</code> </p><p>测试代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cookieSession <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-session'</span><span class="token punctuation">)</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注册中间件 </span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieSession</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'session'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 客户端cookie的名称</span>    keys<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'ss'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 用于加密的关键字</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取并判断session</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>sess_data<span class="token punctuation">)</span><span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'已经登陆'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果没有session,跳转到登陆页面</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("没登陆");window.location.href="/up"&lt;/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/up'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 展示登陆页面，获取用户数据并写入session </span>    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>sess_data <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">89</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'已写入session'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="8-8-2-完成项目登陆功能"><a href="#8-8-2-完成项目登陆功能" class="headerlink" title="8.8.2 完成项目登陆功能"></a>8.8.2 完成项目登陆功能</h4><p><strong>修改http模块，注册 cookie-session 中间件；</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cookieSession <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-session'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注册中间件 </span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieSession</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'session'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 客户端cookie的名称</span>    keys<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'xilingzuishuai'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 用于加密的关键字</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>在业务模块 (yewu.js) 中 添加逻辑判断，只有登陆后才能展示首页：</strong></p><pre class=" language-js"><code class="language-js">getall<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取并判断session</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>sess_data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        db<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果没有session,跳转到登陆页面</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("没登陆");window.location.href="/upload"&lt;/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// res.send('没登陆');</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p><strong>在路由模块(luyou.js) 中添加以下两个路由，get 展示静态登陆页面，post 获取用户提交的数据并写入 session ,写入成功后，跳转到首页；在业务模块(yewu.js)中添加响应的方法</strong></p><p><code>.get(&#39;/upload&#39;,yewu.upload_get)</code>  <code>.post(&#39;/upload&#39;,yewu.upload_post)</code></p><pre class=" language-js"><code class="language-js">upload_get<span class="token punctuation">:</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 展示登陆页面</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'./upload.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>upload_post<span class="token punctuation">:</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">formidable<span class="token punctuation">.</span>IncomingForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    form<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(fields);</span>        <span class="token comment" spellcheck="true">// 获取用户提交数据，判断用户名密码是否正确</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fields<span class="token punctuation">.</span>userName <span class="token operator">==</span> <span class="token string">"admin"</span> <span class="token operator">&amp;&amp;</span> fields<span class="token punctuation">.</span>pwd <span class="token operator">==</span> <span class="token string">"123"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 数据正确，写入session</span>            req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>sess_data <span class="token operator">=</span> fields<span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("登陆成功");window.location.href="/"&lt;/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 数据错误，重新跳回登陆页面</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("登陆失败");window.location.href="/upload"&lt;/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="express另外附加使用技巧"><a href="#express另外附加使用技巧" class="headerlink" title="express另外附加使用技巧"></a>express另外附加使用技巧</h3><ol><li>处理get数据，使用express自带的req.query()</li><li>处理post数据，除了原生自带的，还可以借助第三方模块body-parser(在第三方模块中有介绍)，作为中间加工步骤来处理post请求</li><li>处理文件请求，原生处理起来比较乏力，借助第三方可以快速便捷，如：formidable 在以上案例（用户头像中有介绍使用，文件请求和字段都可以一并处理）、multiparty(在第三方模块中有介绍,同样文件请求和字段都可以一并处理)、multer（在第三方模块中有介绍）只能处理文件，可以做为中间件使用</li><li>cookie和seesion，可以使用第三方模块cookie-session（在用户登录中有介绍）、cookie-parser（在第三方模块中有介绍） 专门用来处理cookie,可以用来加密cookie，以上都可以作为中间件使用</li></ol><h2 id="第9章-Express的中间件"><a href="#第9章-Express的中间件" class="headerlink" title="第9章 Express的中间件"></a>第9章 Express的中间件</h2><h3 id="9-1-什么是中间件"><a href="#9-1-什么是中间件" class="headerlink" title="9.1 什么是中间件"></a>9.1 什么是中间件</h3><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="./img/Snipaste_2018-10-12_22-08-40.png" alt=""></p><p>在一个整体的流程中的某个环节，因为某些原因加入了额外的处理环节；</p><h3 id="9-2-中间件的使用"><a href="#9-2-中间件的使用" class="headerlink" title="9.2    中间件的使用"></a>9.2    中间件的使用</h3><h4 id="9-2-1-应用中间件"><a href="#9-2-1-应用中间件" class="headerlink" title="9.2.1 应用中间件"></a>9.2.1 应用中间件</h4><p>语法：</p><blockquote><ul><li><p>app.use()</p><ul><li><p>app.use(function(){}) </p><p>无论发送任何请求都会执行的中间件</p></li><li><p>app.use(‘/path’, function(){})</p><p>只要在请求path路由时才会执行的中间件（无论GET/POST）</p></li></ul></li><li><p>app.method()</p><ul><li><p>app.get()</p><p>在get请求时会执行的中间件</p></li><li><p>app.post()</p><p>在post请求时会执行的中间件</p></li></ul></li></ul></blockquote><p><strong>app.use() 的用法</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在中间件之前，不受中间件影响</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 应用中间件</span><span class="token comment" spellcheck="true">// 请求 '/user' 时，会先调用中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用之前先调用中间件</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'8000'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1：8000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>app.method() 的用法</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在中间件之前，不受中间件影响</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 应用中间件</span><span class="token comment" spellcheck="true">// 只有在 post 请求user 时才起作用</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用之前先调用中间件</span><span class="token comment" spellcheck="true">// 接受所有请求方式请求user</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'8000'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1：8000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="9-2-2-路由中间件"><a href="#9-2-2-路由中间件" class="headerlink" title="9.2.2 路由中间件"></a>9.2.2 路由中间件</h4><p>路由器层中间件的工作方式与应用层中间件基本相同，差异之处在于它绑定到 <code>express.Router()</code> 的实例。</p><p>使用 <code>router.use()</code> 和 <code>router.METHOD()</code> 函数装入路由器层中间件；</p><p>我们之前项目的代码，就是在使用路由中间件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>yewu<span class="token punctuation">.</span>getall<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/getuser'</span><span class="token punctuation">,</span>yewu<span class="token punctuation">.</span>getone<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/upuser'</span><span class="token punctuation">,</span>yewu<span class="token punctuation">.</span>upuser_get<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/upuser'</span><span class="token punctuation">,</span>yewu<span class="token punctuation">.</span>upuser_post<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span>yewu<span class="token punctuation">.</span>upload_get<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span>yewu<span class="token punctuation">.</span>upload_post<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="9-2-3-内置中间件"><a href="#9-2-3-内置中间件" class="headerlink" title="9.2.3 内置中间件"></a>9.2.3 内置中间件</h4><p> 除 <code>express.static</code> 外，先前 Express 随附的所有中间件函数现在以单独模块的形式提供：<a href="https://github.com/senchalabs/connect#middleware" target="_blank" rel="noopener">中间件函数的列表</a></p><p>Express 中唯一内置的中间件函数是 <code>express.static</code>。此函数基于 <a href="https://github.com/expressjs/serve-static" target="_blank" rel="noopener">serve-static</a>，负责提供 Express 应用程序的静态资源。</p><p>对于每个应用程序，可以有多个静态目录：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'uploads'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'files'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="9-2-4-第三方中间件"><a href="#9-2-4-第三方中间件" class="headerlink" title="9.2.4 第三方中间件"></a>9.2.4 第三方中间件</h4><p>使用第三方中间件向 Express 应用程序添加功能。</p><p>安装具有所需功能的 Node.js 模块，然后在应用层或路由器层的应用程序中将其加装入。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> cookieSession <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-session'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注册中间件 </span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieSession</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'session'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 客户端cookie的名称</span>    keys<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'xilingzuishuai'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 用于加密的关键字</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="第10章-Koa-框架"><a href="#第10章-Koa-框架" class="headerlink" title="第10章 Koa 框架"></a>第10章 Koa 框架</h2><blockquote><p>Koa框架是express原帮人马打造，小且精干，express有的Koa都有，甚至比express还更有优势，如：在express中回调是必不可少的，语法大多停止在ES5版本，而Koa则使用generator、async等新特性解决了回调套回调，语法上也紧跟ECMAScript版本，是当下流行的框架</p></blockquote><h3 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h3><p>1.安装 koa框架</p><p>npm   init    </p><p>npm install koa </p><p>提示：在express中路由自带，koa中没有自带路由，需自行下载（koa-router）</p><h3 id="嵌套路由："><a href="#嵌套路由：" class="headerlink" title="嵌套路由："></a>嵌套路由：</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> koa<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//加载koa</span><span class="token keyword">const</span> Router<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//加载koa路由框架</span><span class="token keyword">let</span> server<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在koa中可以嵌套路由</span><span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//最顶级</span>UserRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//用户路由</span>    <span class="token comment" spellcheck="true">//用户路由中子路由</span> HomeRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> AdminRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//路由函数有两个参数 一个是ctx上下文（什么都有） next中间函数（可以省略）</span><span class="token comment" spellcheck="true">//函数前都加async,使用next也同样要加await</span>HomeRouter<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span><span class="token keyword">async</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'前台用户'</span><span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'前台用户'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>AdminRouter<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span><span class="token keyword">async</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'后台用户'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'后台用户'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>UserRouter<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">async</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用户模块'</span><span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'User'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用户路由添加两个子路由</span>UserRouter<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span>HomeRouter<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>UserRouter<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">,</span>AdminRouter<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//最顶级的路由添加用户路由作为子路由</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span>UserRouter<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后添加到服务器上</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*当前嵌套路由层级router=>         UserRouter => HomeRouter                     AdminRouter*/</span><span class="token comment" spellcheck="true">//上面是把路由写在一个文件，正常情况是分开写然后引入</span></code></pre><h3 id="嵌套路由（分开版）图片展示："><a href="#嵌套路由（分开版）图片展示：" class="headerlink" title="嵌套路由（分开版）图片展示："></a>嵌套路由（分开版）图片展示：</h3><p>1.服务器页面（总页面）</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/koa1.PNG" alt=""></p><p>2.路由文件：router/user/index.js</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/koa5.PNG" alt=""></p><p>3.路由目录</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/koa2.PNG" alt=""></p><p>4.子路由页面</p><p> 4.1 admin</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/koa3.PNG" alt=""></p><p>4.2 company</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/koa4.PNG" alt=""></p><p><strong>提示：可以在总页面上添加和user同级的多个路由</strong></p><h3 id="路由传参："><a href="#路由传参：" class="headerlink" title="路由传参："></a>路由传参：</h3><p><strong>koa路由传参新方式</strong>（也可以使用旧方式）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Koa<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Router<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> router<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//路由传参   :字段 想传多少传多少 </span><span class="token comment" spellcheck="true">//也可以  ?字段=值方式传值，只不过获取方式不同</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/news/:id/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token operator">=</span>ctx<span class="token punctuation">.</span>params<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// :字段方式传参的数据在ctx.params中</span><span class="token comment" spellcheck="true">//启动后，访问/news/34 id就是34</span>  ctx<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">'新闻id='</span><span class="token operator">+</span>id<span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/news/1/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> ctx<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token operator">=</span>ctx<span class="token punctuation">.</span>params<span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>body<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'aaa'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当定义的函数像以上情况有点混淆的时候，谁在前，谁先执行，和express一样从上往下执行</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*用?id=xxx传参和/:id有什么区别？倾向于用/:id吗？urlencoded      http://aaa.com/user?a=12&amp;b=5params          http://aaa.com/user/12/5    urlencoded      params    顺序灵活         死的    可省略           死的    不利于SEO        利于SEO*/</span></code></pre><h3 id="ctx对象属性介绍"><a href="#ctx对象属性介绍" class="headerlink" title="ctx对象属性介绍"></a>ctx对象属性介绍</h3><pre class=" language-js"><code class="language-js">ctx<span class="token punctuation">.</span>params  <span class="token comment" spellcheck="true">//获取路由 ：字段方式的数据</span>ctx<span class="token punctuation">.</span>query    <span class="token comment" spellcheck="true">//获取路由 ？字段 = 值 方式的数据</span>ctx<span class="token punctuation">.</span>method <span class="token comment" spellcheck="true">//请求方式</span>ctx<span class="token punctuation">.</span>url<span class="token comment" spellcheck="true">//请求地址url</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>server<span class="token punctuation">.</span>context：<span class="token comment" spellcheck="true">// 相当于ctx的prototype</span>server<span class="token punctuation">.</span>coconst Koa<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Router<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span>context<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//在ctx原型添加属性</span><span class="token keyword">let</span> router<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/news/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> ctx<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token operator">=</span>ctx<span class="token punctuation">.</span>query<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">'bbb'</span><span class="token operator">+</span>ctx<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//实例里获取</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>ctx<span class="token punctuation">.</span>request <span class="token comment" spellcheck="true">//请求</span>ctx<span class="token punctuation">.</span>response<span class="token comment" spellcheck="true">//响应</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>ctx<span class="token punctuation">.</span>path        <span class="token comment" spellcheck="true">//路径</span>ctx<span class="token punctuation">.</span>ip         <span class="token comment" spellcheck="true">// 客户端的IP</span>ctx<span class="token punctuation">.</span>headers     <span class="token comment" spellcheck="true">//请求头</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>ctx<span class="token punctuation">.</span><span class="token keyword">throw</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>   ctx<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>条件<span class="token punctuation">,</span> code<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>ctx<span class="token punctuation">.</span><span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">'username is required'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ctx<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>query<span class="token punctuation">.</span>pass<span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">'password is required'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一旦触发，会把错误信息响应到客户端</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>ctx<span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token number">305</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//状态码</span>ctx<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重定向</span>ctx<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//下载文件</span></code></pre><h3 id="koa-static管理静态文件"><a href="#koa-static管理静态文件" class="headerlink" title="koa-static管理静态文件"></a>koa-static管理静态文件</h3><p>koa-static 需自行下载，不自带</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Koa<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Router<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">static</span><span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-static'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> router<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> ctx<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以配合koa-router使用</span><span class="token keyword">let</span> staticRouter<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>staticRouter<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token regex">/(\.jpg|\.png|\.gif)$/i</span><span class="token punctuation">,</span> <span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./static'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  maxage<span class="token punctuation">:</span> <span class="token number">60</span><span class="token operator">*</span><span class="token number">86400</span><span class="token operator">*</span><span class="token number">1000</span> <span class="token comment" spellcheck="true">//静态文件缓存时间  这里2个月</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>staticRouter<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token regex">/(\.css)$/i</span><span class="token punctuation">,</span> <span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./static'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  maxage<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">86400</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>staticRouter<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token regex">/(\.html|\.htm|\.shtml)$/i</span><span class="token punctuation">,</span> <span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./static'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  maxage<span class="token punctuation">:</span> <span class="token number">20</span><span class="token operator">*</span><span class="token number">86400</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>staticRouter<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./static'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  maxage<span class="token punctuation">:</span> <span class="token number">30</span><span class="token operator">*</span><span class="token number">86400</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加载static中间件</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>staticRouter<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类似express的方式</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//指定文件</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    index<span class="token punctuation">:</span><span class="token string">'index.html'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="koa-better-body处理post请求和文件请求（可以一并处理，需自行下载）"><a href="#koa-better-body处理post请求和文件请求（可以一并处理，需自行下载）" class="headerlink" title="koa-better-body处理post请求和文件请求（可以一并处理，需自行下载）"></a>koa-better-body处理post请求和文件请求（可以一并处理，需自行下载）</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Koa<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Router<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> body<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-better-body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  uploadDir<span class="token punctuation">:</span> <span class="token string">'./static/upload'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> ctx<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//文件和post数据</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>fields<span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">'aaa'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="koa中的-cookie、session"><a href="#koa中的-cookie、session" class="headerlink" title="koa中的 cookie、session"></a>koa中的 cookie、session</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//在koa中cookie自带，session则没有，需要下载一个叫：koa-session模块</span><span class="token comment" spellcheck="true">//----------cookie  注意：如果在设置cookie的时候设置了签名，获取的时候也要开签名  (signed) 否则被串改，服务器获取的数据将会是被串改的</span>server<span class="token punctuation">.</span>keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'sadasdasdasdasdvvvvvvvvvsadasdasd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置cookie签名的循环密匙</span><span class="token comment" spellcheck="true">//设置和获取cookie在ctx上下文对象中</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span><span class="token string">'xuyuxin'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    signed<span class="token punctuation">:</span><span class="token boolean">true</span>  <span class="token comment" spellcheck="true">//开启签名 </span>    <span class="token comment" spellcheck="true">//cookie中可以设置的属性，在这就可以设置如：domain、maxAge</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>signed<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//---------------------session</span><span class="token keyword">const</span> Koa<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Router<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> session<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-session'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span>keys<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">//跟cookie相同</span>  <span class="token string">'asdfasdfasdfasdfasdf'</span><span class="token punctuation">,</span>  <span class="token string">'hghjfgjghjkyggfytyurt'</span><span class="token punctuation">,</span>  <span class="token string">'hjghjkfguig8ygyi8t78i8'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  maxAge<span class="token punctuation">:</span> <span class="token number">20</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//有效期</span>  renew<span class="token punctuation">:</span> <span class="token boolean">true</span>           <span class="token comment" spellcheck="true">//自动续期</span><span class="token punctuation">}</span><span class="token punctuation">,</span> server<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> ctx<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'view'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'view'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  ctx<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'view'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token template-string"><span class="token string">`欢迎你第</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>view<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">次来访`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="koa中的mysql"><a href="#koa中的mysql" class="headerlink" title="koa中的mysql"></a>koa中的mysql</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//一般在koa中，会把常用的模块或中间件放在 ctx.prototype(server.context)中，以便在任何地方使用</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>database<span class="token punctuation">.</span>js<span class="token keyword">const</span> mysql<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> co<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'co-mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> conn<span class="token operator">=</span>mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>  user<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>  password<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  database<span class="token punctuation">:</span> <span class="token string">'20181101'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> db<span class="token operator">=</span><span class="token function">co</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span>db<span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>引入<span class="token keyword">const</span> Koa<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Router<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span>context<span class="token punctuation">.</span>db<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./libs/database'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引入后，就可在ctx中使用</span>server<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">async</span> ctx<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>   <span class="token keyword">let</span> data <span class="token operator">=</span>  <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT * FROM tbale'</span><span class="token punctuation">)</span>；   ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="在koa中如何处理错误"><a href="#在koa中如何处理错误" class="headerlink" title="在koa中如何处理错误"></a>在koa中如何处理错误</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Koa<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Router<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以中间件方式处理</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">'错了'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//也可以用Router方式处理  * 代表全部，只要请求就会触发</span><span class="token keyword">let</span> router<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> ctx<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">'错了-router'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> ctx<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  ctx<span class="token punctuation">.</span>body<span class="token operator">=</span>div<span class="token punctuation">.</span>title<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="koa-ejs模板引擎"><a href="#koa-ejs模板引擎" class="headerlink" title="koa-ejs模板引擎"></a>koa-ejs模板引擎</h3><p> <a href="https://ejs.bootcss.com/" target="_blank" rel="noopener">ejs 文档</a></p><pre class=" language-ejs"><code class="language-ejs"><% if (user) { %> <%= user.name %><% } %>用法var template = ejs.compile(str, options);template(data);// => 输出绘制后的 HTML 字符串ejs.render(str, data, options);// => 输出绘制后的 HTML 字符串ejs.renderFile(filename, data, options, function(err, str){    // str => 输出绘制后的 HTML 字符串});你可能需要能够输出原始内容的标签 (<%-) 用于 include 指令，避免对输出的 HTML 代码做转义处理。<ul>  <% users.forEach(function(user){ %>    <%- include('user/show', {user: user}); %>  <% }); %></ul>自定义分隔符可针对单个模板或全局使用自定义分隔符：var ejs = require('ejs'),    users = ['geddy', 'neil', 'alex'];// 单个模板文件ejs.render('<?= users.join(" | "); ?>', {users: users},    {delimiter: '?'});// => 'geddy | neil | alex'// 全局ejs.delimiter = '$';ejs.render('<$= users.join(" | "); $>', {users: users});// => 'geddy | neil | alex'//语法大多跟js一样</code></pre><ul><li><p>参数<br>cache 缓存编译后的函数，需要提供 filename<br>filename 被 cache 参数用做键值，同时也用于 include 语句<br>context 函数执行时的上下文环境<br>compileDebug 当为 false 时不编译调试语句<br>client 返回独立的编译后的函数<br>delimiter 放在角括号中的字符，用于标记标签的开与闭<br>debug 将生成的函数体输出<br>_with 是否使用 with() {} 结构。如果为 false，所有局部数据将存储在 locals 对象上。<br>localsName 如果不使用 with ，localsName 将作为存储局部变量的对象的名称。默认名称是 locals<br>rmWhitespace 删除所有可安全删除的空白字符，包括开始与结尾处的空格。对于所有标签来说，它提供了一个更安全版本的 -%&gt; (在一行的中间并不会剔除标签后面的换行符)。<br>escape 为 &lt;%= 结构设置对应的转义（escape）函数。它被用于输出结果以及在生成的客户端函数中通过 .toString() 输出。(默认转义 XML)。</p></li><li><p>标签含义<br>&lt;% ‘脚本’ 标签，用于流程控制，无输出。<br>&lt;%_ 删除其前面的空格符<br>&lt;%= 输出数据到模板（输出是转义 HTML 标签）<br>&lt;%- 输出非转义的数据到模板<br>&lt;%# 注释标签，不执行、不输出内容<br>&lt;%% 输出字符串 ‘&lt;%’<br>%&gt; 一般结束标签<br>-%&gt; 删除紧随其后的换行符<br>_%&gt; 将结束标签后面的空格符删除<br>包含（include）<br>通过 include 指令将相对于模板路径中的模板片段包含进来。(需要提供 ‘filename’ 参数。) 例如，如果存在 “./views/users.ejs” 和 “./views/user/show.ejs” 两个模板文件，你可以通过 &lt;%- include(‘user/show’); %&gt; 代码包含后者。</p></li></ul><h4 id="在koa中使用"><a href="#在koa中使用" class="headerlink" title="在koa中使用"></a>在koa中使用</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Koa<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ejs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//语法</span><span class="token function">ejs</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> <span class="token punctuation">{</span>  root<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'template'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//根路径  文件夹名称</span>  layout<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//模板在根目录中是否要再封装一个文件夹， 是的话写对应的文件名，否则放在根目录指定位置 默认是 true 自动在根目录加上一层文件夹 </span>  viewExt<span class="token punctuation">:</span> <span class="token string">'ejs'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//模板后缀</span>  cache<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否缓存</span>  debug<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 是否将渲染好文件展示</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="附加章-第三方模块"><a href="#附加章-第三方模块" class="headerlink" title="附加章 第三方模块"></a>附加章 第三方模块</h2><h3 id="forever：node启动器-，发生错误时也会重启，挂在后台"><a href="#forever：node启动器-，发生错误时也会重启，挂在后台" class="headerlink" title="forever：node启动器 ，发生错误时也会重启，挂在后台"></a>forever：node启动器 ，发生错误时也会重启，挂在后台</h3><pre class=" language-js"><code class="language-js">npm i forever <span class="token operator">-</span>g  npm安装<span class="token comment" spellcheck="true">//语法</span>forever start xxx<span class="token punctuation">.</span>js   开启forever restart xxx<span class="token punctuation">.</span>js 重启forever stop xxx<span class="token punctuation">.</span>js  停止forever stopall  停止全部forever start xxx<span class="token punctuation">.</span>js <span class="token operator">-</span>l c<span class="token punctuation">:</span><span class="token operator">/</span>a<span class="token punctuation">.</span>log <span class="token operator">-</span>e c<span class="token punctuation">:</span><span class="token operator">/</span>err<span class="token punctuation">.</span>log <span class="token operator">-</span>a </code></pre><h3 id="body-parser：用来处理post数据的模块之一"><a href="#body-parser：用来处理post数据的模块之一" class="headerlink" title="body-parser：用来处理post数据的模块之一"></a>body-parser：用来处理post数据的模块之一</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> body<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server<span class="token operator">=</span><span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在express中作为中间件使用</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  extended<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后在req的body中</span>server<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/reg'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意，此模块不能处理上传文件请求</span><span class="token comment" spellcheck="true">//用原生node封装一个类似body-parser的简易版</span><span class="token keyword">const</span> express<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server<span class="token operator">=</span><span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> querystring<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跟以上相同</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> buffer<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">let</span> post<span class="token operator">=</span>querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span>body<span class="token operator">=</span>post<span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/reg'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把以上的中间件函数封装</span><span class="token keyword">const</span> express<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> body<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./libs/body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server<span class="token operator">=</span><span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/reg'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//即可自己实现一个简易的中间件</span></code></pre><h3 id="multiparty：处理post中文件上传请求和字段请求（可以一并处理也可单一）"><a href="#multiparty：处理post中文件上传请求和字段请求（可以一并处理也可单一）" class="headerlink" title="multiparty：处理post中文件上传请求和字段请求（可以一并处理也可单一）"></a>multiparty：处理post中文件上传请求和字段请求（可以一并处理也可单一）</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> http<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> multiparty<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'multiparty'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">let</span> form<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">multiparty<span class="token punctuation">.</span>Form</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    uploadDir<span class="token punctuation">:</span> <span class="token string">'./upload'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  form<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>  form<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'field'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'字段：'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  form<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件：'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  form<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'表单解析完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//请求到响应，中间如果出错，就算文件已经上传成功也会被删除</span></code></pre><h3 id="multer：专门用来处理文件的模块，其他不行"><a href="#multer：专门用来处理文件的模块，其他不行" class="headerlink" title="multer：专门用来处理文件的模块，其他不行"></a>multer：专门用来处理文件的模块，其他不行</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> multer<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'multer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server<span class="token operator">=</span><span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//作为中间件使用</span><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token function">multer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dest<span class="token punctuation">:</span> <span class="token string">'./static/upload'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后处理完的数据存在req的files中</span>server<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/reg'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'upload successed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="cookie-parser-专门处理cookie的模块"><a href="#cookie-parser-专门处理cookie的模块" class="headerlink" title="cookie-parser:专门处理cookie的模块"></a>cookie-parser:专门处理cookie的模块</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> cookieParser<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server<span class="token operator">=</span><span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//签名加密</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieParser</span><span class="token punctuation">(</span>  <span class="token string">'fasdgfhsrtyredfbfd56te5645sdter76tytutyi456ythgfgerrhdfghfdg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'cookie:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//未签名的</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'signed:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>signedCookies<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//签名的</span>  res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">'amount'</span><span class="token punctuation">,</span> <span class="token number">99.8</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//httpOnly: true,   是否只能在服务端使用</span>    maxAge<span class="token punctuation">:</span> <span class="token number">14</span><span class="token operator">*</span><span class="token number">86400</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//secure: true,         只有https</span>    signed<span class="token punctuation">:</span> <span class="token boolean">true</span>     <span class="token comment" spellcheck="true">//是否启用签名</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="uuid生成唯一标识符"><a href="#uuid生成唯一标识符" class="headerlink" title="uuid生成唯一标识符"></a>uuid生成唯一标识符</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//注意：此模块不能使用require('uuid')直接引入，uuid有很多个版本，因此直接引入会出错，需要指定对应版本引入 require('uuid/[v1|v3|v4|v5]')</span>版本<span class="token number">1</span>（时间戳）：<span class="token keyword">const</span>  uuidv1  <span class="token operator">=</span>  require（<span class="token string">' uuid / v1 '</span>）<span class="token punctuation">;</span>uuidv1（）<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ⇨'2c5ea4c0-4067-11e9-8bad-9b1deb4d3b7d'</span>版本<span class="token number">3</span>（命名空间）：<span class="token keyword">const</span>  uuidv3  <span class="token operator">=</span>  require（<span class="token string">' uuid / v3 '</span>）<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ...使用预定义的DNS命名空间（域名）</span>uuidv3（ <span class="token string">' hello.example.com '</span>， uuidv3。 DNS）<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ⇨'9125a8dc-52ee-365b-a5aa-81b0b3681cf6'</span><span class="token comment" spellcheck="true">// ...使用预定义的URL命名空间（，好了，URL）的</span>uuidv3（ <span class="token string">' http://example.com/hello '</span>， uuidv3。网址）<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ⇨'c6235813-3ba4-3801-ae84-e0a6ebb7d138'</span><span class="token comment" spellcheck="true">// ...使用自定义名称空间</span><span class="token comment" spellcheck="true">// // </span><span class="token comment" spellcheck="true">//注意：自定义名称空间应为特定于您的应用程序的UUID字符串！</span><span class="token comment" spellcheck="true">//例如，这里的一个是使用uuid CLI模块生成的。</span><span class="token keyword">const</span>  MY_NAMESPACE  <span class="token operator">=</span>  <span class="token string">' 1b671a64-40d5-491e-99b0-da01ff1f3341 '</span> <span class="token punctuation">;</span>uuidv3（ <span class="token string">' Hello，World！'</span>， MY_NAMESPACE）<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ⇨'e8b5a51d-11c8-3310-a6ab-367563f20686'</span>版本<span class="token number">4</span>（随机）：<span class="token keyword">const</span>  uuidv4  <span class="token operator">=</span>  require（<span class="token string">' uuid / v4 '</span>）<span class="token punctuation">;</span>uuidv4（）<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ⇨'1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'</span>版本<span class="token number">5</span>（命名空间）：<span class="token keyword">const</span>  uuidv5  <span class="token operator">=</span>  require（<span class="token string">' uuid / v5 '</span>）<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ...使用预定义的DNS命名空间（域名）</span>uuidv5（ <span class="token string">' hello.example.com '</span>， uuidv5。 DNS）<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ⇨'fdda765f-fc57-5604-a269-52a7df8164ec'</span><span class="token comment" spellcheck="true">// ...使用预定义的URL命名空间（，好了，URL）的</span>uuidv5（ <span class="token string">' http://example.com/hello '</span>， uuidv5。网址）<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ⇨'3bbcee75-cecc-5b56-8031-b6641c1ed1f1'</span><span class="token comment" spellcheck="true">// ...使用自定义名称空间</span><span class="token comment" spellcheck="true">// // </span><span class="token comment" spellcheck="true">//注意：自定义名称空间应为特定于您的应用程序的UUID字符串！</span><span class="token comment" spellcheck="true">//例如，这里的一个是使用uuid CLI模块生成的。</span><span class="token keyword">const</span>  MY_NAMESPACE  <span class="token operator">=</span>  <span class="token string">' 1b671a64-40d5-491e-99b0-da01ff1f3341 '</span> <span class="token punctuation">;</span>uuidv5（ <span class="token string">' Hello，World！'</span>， MY_NAMESPACE）<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ⇨'630eb68f-e0fa-5ecc-887a-7c7a62614681'</span></code></pre><h3 id="jsonwebtoken-检验-生成token"><a href="#jsonwebtoken-检验-生成token" class="headerlink" title="jsonwebtoken 检验/生成token"></a>jsonwebtoken 检验/生成token</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Token <span class="token operator">=</span> <span class="token punctuation">{</span>  encrypt<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//data加密数据，time过期时间</span>    <span class="token keyword">return</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'token'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>expiresIn<span class="token punctuation">:</span>time<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  decrypt<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        token<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        id<span class="token punctuation">:</span>data<span class="token punctuation">.</span>id      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        token<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span>e      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Token<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1. 首先安装jsonwebtoken  </span>npm install jsonwebtoken<span class="token comment" spellcheck="true">//2. 引入jsonwebtoken</span><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3. encrypt加密函数</span><span class="token comment" spellcheck="true">//jsonwebtoken提供了一个函数sign用于加密生成jwt,格式jwt.sign(data,str,options)</span><span class="token comment" spellcheck="true">//参数data 表示要加密的数据</span><span class="token comment" spellcheck="true">//参数str 自定义字符串，这个字符串在解密时需要用到，在这里我随便写了一个‘token’。这相当于一个密钥secret，服务器端需要妥善保管。</span><span class="token comment" spellcheck="true">//参数options 其他内容，可以设置令牌有效时间{expiresIn:time}。time的取值，'15d'表示15天,'2h'表示2小时，……</span><span class="token comment" spellcheck="true">//4.decrypt解密函数</span><span class="token comment" spellcheck="true">//jsonwebtoken提供了一个函数verify用于解密jwt,格式jwt.verify(token,str)</span><span class="token comment" spellcheck="true">//参数token 表示需要解密的令牌 </span><span class="token comment" spellcheck="true">//参数str 表示加密时用到的自定义字符串，即密钥</span><span class="token comment" spellcheck="true">//5.用法</span><span class="token keyword">const</span> Token <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/token'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//code……</span><span class="token keyword">const</span> token <span class="token operator">=</span> Token<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span>user<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'15d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将user.id加密，设置有效期15天，返回token</span><span class="token comment" spellcheck="true">//code……</span><span class="token comment" spellcheck="true">//解密</span><span class="token keyword">let</span> data <span class="token operator">=</span> Token<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>header<span class="token punctuation">.</span>authorization<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将请求头的token取出解密</span><span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//有效token</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//无效token</span><span class="token punctuation">}</span></code></pre><blockquote><p>本文档大量参考相关书籍、文档、博客、手册等资源，最终解释权归 <a href="https://zhuanlan.zhihu.com/xilinglaoshi" target="_blank" rel="noopener"><strong>西岭老湿</strong></a> 个人所有；</p><p>参考资源相关列表:</p><p><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a>   node.js官网 </p><p><a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a>  node.js中文网 </p><p>《深入浅出Node.js》  朴灵著 ，人民邮电出版社</p><p><a href="https://en.wikipedia.org/wiki/CommonJS" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/CommonJS</a>  维基百科 </p><p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">《ECMAScript 6 入门》(第三版)</a>  阮一峰著 ，电子工业出版社</p><p>《你不知道的JavaScript》(上、中、下卷)   [美] Kyle Simpson 著 ，人民邮电出版社</p><p><a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">http://www.expressjs.com.cn/</a>   express中文网</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Back </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node </tag>
            
            <tag> express </tag>
            
            <tag> Koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas</title>
      <link href="/posts/7c26.html"/>
      <url>/posts/7c26.html</url>
      
        <content type="html"><![CDATA[<h1 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h1><blockquote><p>canvas 是HTML5新出的标签，可以用来做小游戏，特效，作图等，自己并没有作画能力，只能通过Javascript脚本来操控</p></blockquote><h2 id="Canvas标准"><a href="#Canvas标准" class="headerlink" title="Canvas标准"></a>Canvas标准</h2><p><a href="http://www.w3c.org/TR/2dcontext/" target="_blank" rel="noopener">http://www.w3c.org/TR/2dcontext/</a><br><a href="https://html.spec.whatwg.org/" target="_blank" rel="noopener">https://html.spec.whatwg.org/</a></p><h2 id="创建Canvas"><a href="#创建Canvas" class="headerlink" title="创建Canvas"></a>创建Canvas</h2><p>创建canvas几个主要的问题：</p><p>1.不能通过CSS设置画布的大小，否则会造成画布拉伸变形等问题，只能设置本身自带width、height属性,也可以在js里设置</p><p>2.兼容性：对一些不支持的浏览器，可以在标签内输入提示，不支持的浏览器会显示此提示、支持的浏览器会自动忽略掉</p><p>3.创建并设置好宽高后，通过js获取，还要设置其getContext，成功返回一个对象后即可作画，这里用js也可判断其是否支持canvas</p><p>语法格式：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1024<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>570<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>由于您的浏览器版本过低，此图片不能加载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".canvas"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d|3d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><a href="http://www.w3school.com.cn/tags/html_ref_canvas.asp" target="_blank" rel="noopener">手册参考网址</a></p><h2 id="线"><a href="#线" class="headerlink" title="线"></a>线</h2><p>画布的x、y起点默认在右上角的位置（0，0）， 分别对应的最大值是画布的宽和高</p><p>绘制线条的函数：</p><p>moveTo(x,y) ： 开始位置</p><p>lineTo(x,y)：结束位置</p><p>stroke ：准备好后，开始画线条</p><p>设置线条样式的函数：</p><p>lineWidth：设置线条粗细</p><p>strokeStyle：设置线条的颜色</p><p>lineCap：设置线条首尾处的形状  俗称帽子</p><p>lineJoin：设置连接处的样式</p><p>miterLimit：内角与外角的距离。默认值是10，此属性只有在lineJoin = “miter”并且有设置线条粗细情况下才有效，且斜接长度大于miterLimit ，线条连接处自动斜切（lineJoin =”bevel”)</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/miterlimit.gif" alt=""></p><p>另起一条路径的函数： </p><p>beginPath：起始一条路径，或重置当前路径</p><p>closePath：创建从当前点回到起始点的路径</p><p>语法格式：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1024<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>760<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>由于您的浏览器版本过低，此图片不能加载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token keyword">var</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".canvas"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d|3d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">700</span><span class="token punctuation">,</span><span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>lineCap <span class="token operator">=</span> <span class="token string">"round"</span> <span class="token comment" spellcheck="true">//butt(default) round圆头 square方头</span>    <span class="token comment" spellcheck="true">//lineCap 有时可以填补连接处的空缺</span>    ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"yellow"</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>===============================================================ctx.lineWidth = 15;DrawStart(ctx, 100, 20, 400, 400, -30);      ctx.lineJoin = "miter"; //可以设置的样式有：miter(default)、 bevel斜接、 round圆角      ctx.miterLimit = 7; //如果斜接长度超过 miterLimit 的值，边角会以 lineJoin 的 "bevel" 类型来显示。,这里等于7时,边角会以lineJoin的bevel显示，等于8时则会以miter显示    //斜接长度指的是在两条线交汇处内角和外角之间的距离。      ctx.stroke();      function DrawStart(context, R, r, x, y, rotate) {        //绘画对象 大圆的半径 小圆半径  x轴 y轴        ctx.beginPath();        for (var i = 0; i &lt; 5; i++) {          ctx.lineTo(            Math.cos(((18 + 72 * i - rotate) / 180) * Math.PI) * R + x,            -Math.sin(((18 + 72 * i - rotate) / 180) * Math.PI) * R + y          );          ctx.lineTo(            Math.cos(((54 + 72 * i - rotate) / 180) * Math.PI) * r + x,            -Math.sin(((54 + 72 * i - rotate) / 180) * Math.PI) * r + y          );        }        ctx.closePath();      }</code></pre><h2 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h2><p>填充函数：</p><p>fill ：填充当前路径 （注意：如果路径未关闭，那么 fill() 方法会从路径结束点到开始点之间添加一条线，以关闭该路径，然后填充该路径）</p><p>填充样式：</p><p>fillStyle：填充颜色</p><p>语法格式：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1024<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>760<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>由于您的浏览器版本过低，此图片不能加载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token keyword">var</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".canvas"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d|3d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">700</span><span class="token punctuation">,</span><span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"yellow"</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="案例：四个正方形组成的大方形"><a href="#案例：四个正方形组成的大方形" class="headerlink" title="案例：四个正方形组成的大方形"></a>案例：四个正方形组成的大方形</h2><pre class=" language-html"><code class="language-html">   var ctx = document.querySelector(".canvas").getContext("2d");let box = [        {p:[{x:0,y:0},{x:512,y:0},{x:512,y:380},{x:0,y:380},{x:0,y:0}],color:"red"},        {p:[{x:512,y:0},{x:1024,y:0},{x:1024,y:380},{x:512,y:380},{x:512,y:0}],color:"green"},        {p:[{x:0,y:380},{x:512,y:380},{x:512,y:760},{x:0,y:760},{x:0,y:380}],color:"blue"},        {p:[{x:512,y:380},{x:1024,y:380},{x:1024,y:760},{x:512,y:760},{x:512,y:380}],color:"yellow"},      ]      for(let i=0;i&lt;box.length;i++)      {        draw(box[i],ctx);      }      function draw(p,c)      {        c.beginPath();          c.moveTo(p.p[0].x,p.p[0].y);          for(let i=1;i&lt;p.p.length;i++)          {            c.lineTo(p.p[i].x,p.p[i].y);          }          c.lineWidth = 5;          c.strokeStyle = p.color;          c.fillStyle = p.color;        c.stroke();        c.fill();        c.closePath();      }</code></pre><p>注意点：</p><ol><li>closePath可以解决闭合图形的空隙问题，也有自动闭合的作用。</li><li>当边框或者填充被遮挡掉的时候，这时可以先填充在画边框，或者先画边框再画线</li><li>后绘制的图形会顶替掉前面的图形</li></ol><h2 id="圆"><a href="#圆" class="headerlink" title="圆"></a>圆</h2><p>画圆的函数：</p><p>arc(x,y,r,start,end,true|false)：画圆\弧</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5b21faf60001e79412800720.jpg" alt=""></p><p>arcTo(x1,y1,x2,y2,r)：绘制圆弧</p><p>语法格式：</p><pre class=" language-html"><code class="language-html"> var ctx = document.querySelector(".canvas").getContext("2d");      var i = 0;      setInterval(() => {        i++;        ctx.fillStyle = "yellow";        ctx.strokeStyle = "red";        ctx.beginPath();                               ctx.arc(512, 380, 100, 0, Math.PI * 2 - (Math.PI * 2 * i / 30), true);            //  x    y  半径 开始位置  结束位置                      是否逆时针旋转        ctx.lineWidth = 10;        ctx.stroke();        ctx.fill();      }, 1);//顺时针：Math.PI * 2 * i / 30//逆时针：Math.PI * 2 - (Math.PI * 2 * i / 30)//使用arcTo绘圆角矩形var ctx = document.querySelector("canvas").getContext("2d");      // ctx.translate(200,200)      // ctx.beginPath();      // ctx.moveTo(100,0);      // ctx.arcTo(400,0,400,800,100);      // ctx.lineTo(400,400);      // ctx.arcTo(400,500,350,500,100);      // ctx.lineTo(100,500);      // ctx.arcTo(0,500,0,450,100);      // ctx.lineTo(0,100);      // ctx.arcTo(0,0,100,0,100)      // ctx.closePath();      function RoundRect(ctx, width, height, r)       {        ctx.beginPath();        ctx.moveTo(r, 0);        ctx.arcTo(width, 0, width, height - r, r);        ctx.lineTo(width, height);        ctx.arcTo(width, height + r, width - 50, height + r, r);        ctx.lineTo(r, height + r);        ctx.arcTo(0, height + r, 0, height - 50, r);        ctx.lineTo(0, r);        ctx.arcTo(0, 0, r, 0, r);        ctx.closePath();      }      RoundRect(ctx, 200, 100, 10);      ctx.stroke();</code></pre><h2 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h2><p>矩形函数：</p><p>reac：绘制矩形附带填充和边框</p><p>fillRect：绘制只填充的矩形</p><p>strokeRect：绘制只带边框的矩形</p><p>语法格式：</p><pre class=" language-html"><code class="language-html">//  参数：  x ， y ， width ， height  var ctx = document.querySelector(".canvas").getContext("2d");      ctx.fillStyle = "red";      ctx.strokeStyle = "yellow";      ctx.lineWidth = 5;      var x = 0;      ctx.beginPath();      ctx.rect(100, 100, 300, 300);      ctx.stroke();      ctx.fill();      ctx.beginPath();      ctx.fillStyle = "rgba(0,255,155,0.5)";      ctx.strokeStyle = "yellow";      ctx.fillRect(150, 150, 300, 300);      ctx.strokeRect(100, 100, 400, 400);</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="案例：绘制五角星"><a href="#案例：绘制五角星" class="headerlink" title="案例：绘制五角星"></a>案例：绘制五角星</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>          Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//步骤：先求出角度在转弧度</span>                    <span class="token comment" spellcheck="true">//cos(18deg)*R   sin(18deg)*R</span>                    <span class="token comment" spellcheck="true">//角度转弧度公式：角度/180*r</span>                    <span class="token comment" spellcheck="true">//由于数学中的坐标系与canvas的坐标不同所以y轴要为负</span>          <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">200</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>          Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">54</span> <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">50</span> <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">,</span>          <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">54</span> <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">50</span> <span class="token operator">+</span> <span class="token number">200</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span>         <span class="token comment" spellcheck="true">//五角星封装函数</span>      <span class="token function">DrawStart</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span> <span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">DrawStart</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> R<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span>rotate<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//绘画对象 大圆的半径 小圆半径  x轴 y轴  旋转角度</span>        ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>            Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> i <span class="token operator">-</span>rotate<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> R <span class="token operator">+</span> x<span class="token punctuation">,</span>            <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> i <span class="token operator">-</span>rotate<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> R <span class="token operator">+</span> y          <span class="token punctuation">)</span><span class="token punctuation">;</span>          ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>            Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">54</span> <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> i <span class="token operator">-</span>rotate<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> r <span class="token operator">+</span> x<span class="token punctuation">,</span>            <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">54</span> <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> i <span class="token operator">-</span>rotate<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> r <span class="token operator">+</span> y          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>参考链接：<a href="">https://www.baidu.com/link?url=3j7UmP9XbkLh0ww6tMOChL_7CATbIoQ15GBatuaJdx2_yCn-jcdshTRF9-l6kMmbONf5cgLEviZEpV4QhjLf2q&amp;wd=&amp;eqid=e9fcd7b0000436fd000000065d2e7488</a></p><h3 id="随机不重复、不切边五角星"><a href="#随机不重复、不切边五角星" class="headerlink" title="随机不重复、不切边五角星"></a>随机不重复、不切边五角星</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas width=&quot;800&quot; height=&quot;800&quot; class=&quot;canvas&quot;&gt;&lt;/canvas&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      ctx.fillStyle = &quot;black&quot;;      ctx.fillRect(        0,        0,        document.querySelector(&quot;canvas&quot;).width,        document.querySelector(&quot;canvas&quot;).height      );      ctx.fillStyle = &quot;#fc1&quot;;      ctx.strokeStyle = &quot;#fb5&quot;;      ctx.lineWidth = 5;      ctx.lineJoin = &quot;round&quot;;      var ele = [];      start(ele);      end(ele);      function start(arr) {        for (var i = 0; i &lt; 200; i++) {          var flag = true,            ran = Math.random() * 10 + 10,            x =              Math.random() *                (document.querySelector(&quot;canvas&quot;).width - ran * 2) +              ran,            y =              Math.random() *                (document.querySelector(&quot;canvas&quot;).height - ran * 2) +              ran,            rotate = Math.random() * 360;          for (var j = 0; j &lt; ele.length; j++) {            var oldx = Math.pow(x - arr[j][1], 2);            var oldy = Math.pow(y - arr[j][2], 2);            var oldr = Math.pow(ran + arr[j][0], 2);            if (oldx + oldy &lt; oldr) {              flag = false;            }          }          flag ? arr.push([ran, x, y, rotate]) : i--;        }      }      function end(arr) {        for (var i = 0; i &lt; arr.length; i++) {          DrawStart(            ctx,            arr[i][0],            arr[i][0] / 2,            arr[i][1],            arr[i][2],            arr[i][3]          );          ctx.fill();          ctx.stroke();        }      }      function DrawStart(context, R, r, x, y, rotate) {        //绘画对象 大圆的半径 小圆半径  x轴 y轴        ctx.beginPath();        for (var i = 0; i &lt; 5; i++) {          ctx.lineTo(            Math.cos(((18 + 72 * i - rotate) / 180) * Math.PI) * R + x,            -Math.sin(((18 + 72 * i - rotate) / 180) * Math.PI) * R + y          );          ctx.lineTo(            Math.cos(((54 + 72 * i - rotate) / 180) * Math.PI) * r + x,            -Math.sin(((54 + 72 * i - rotate) / 180) * Math.PI) * r + y          );        }        ctx.closePath();      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="绘画状态保存与还原"><a href="#绘画状态保存与还原" class="headerlink" title="绘画状态保存与还原"></a>绘画状态保存与还原</h2><blockquote><p>状态的保存与还原可以使操作更加简便，快速，主要作用于将绘画的状态来回快速切换，状态保存，可以保存如：线条的样式、颜色、填充、图形变换等，特别是配合图形变换，两者可以互补长短</p></blockquote><p>状态保存和还原的对应函数：</p><p>save：保存当前的状态，以便restore还原</p><p>restore：还原到之前sava保存的状态</p><p>语法格式：</p><pre><code>//这里配合图形变换来演示//图形变换系列的函数，重复使用是叠加效果，而不是替换，所以使用图形变换+状态保存还原可以更快速简便//正常方式  var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      ctx.beginPath();      ctx.fillStyle = &quot;red&quot;;      ctx.translate(100, 100);      ctx.fillRect(0, 0, 400, 400);      ctx.translate(-100, -100);      ctx.fillStyle = &quot;red&quot;;      ctx.fillRect(400, 400, 400, 400);      ctx.closePath();      //图形变换函数连续使用会进行叠加效果，会影响到下面绘制的图形，为了不影响，必须再次使用变换函数来还原//这里运用了canvas的状态保存还原后，可以更方便使用变换函数var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      ctx.beginPath();      ctx.fillStyle = &quot;red&quot;;      ctx.save();      ctx.translate(100, 100);      ctx.fillRect(0, 0, 400, 400);      ctx.restore();      ctx.fillRect(400, 400, 400, 400);      ctx.closePath();</code></pre><h2 id="图形变换"><a href="#图形变换" class="headerlink" title="图形变换"></a>图形变换</h2><p>图形变换系列函数：</p><p>translate(x,y)：偏移、移动</p><p>rotate(?deg)：旋转</p><p>scale(sx,sy)：缩放</p><p>变换矩阵：</p><p>transform(a,b,c,d,e,f)：图形变换矩阵函数是一个把所有变换效果结于一身的函数，连续使用会造成链集和叠加效果</p><p>setTransform(a,b,c,d,e,f)：可以重置transform函数，使之前的失效</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5ca8747e0001734712800720.jpg" alt=""></p><p>语法格式：</p><pre><code>//改用图形变换函数 translate rotate scale 后的无重复五角星//scale 会有许多副作用如：边框将会变大、长宽比也好增大、x、y也会随之增大&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas width=&quot;800&quot; height=&quot;800&quot; class=&quot;canvas&quot;&gt;&lt;/canvas&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      ctx.fillStyle = &quot;black&quot;;      ctx.fillRect(        0,        0,        document.querySelector(&quot;canvas&quot;).width,        document.querySelector(&quot;canvas&quot;).height      );      ctx.fillStyle = &quot;#fc1&quot;;      ctx.strokeStyle = &quot;#fb5&quot;;      ctx.lineWidth = 5;      ctx.lineJoin = &quot;round&quot;;      var ele = [];      start(ele);      end(ele);      function start(arr) {        for (var i = 0; i &lt; 200; i++) {          var flag = true,            ran = Math.random() * 10 + 10,            x =              Math.random() *                (document.querySelector(&quot;canvas&quot;).width - ran * 2) +              ran,            y =              Math.random() *                (document.querySelector(&quot;canvas&quot;).height - ran * 2) +              ran,            rotate = Math.random() * 360;          for (var j = 0; j &lt; ele.length; j++) {            var oldx = Math.pow(x - arr[j][1], 2);            var oldy = Math.pow(y - arr[j][2], 2);            var oldr = Math.pow(ran + arr[j][0], 2);            if (oldx + oldy &lt; oldr) {              flag = false;            }          }          flag ? arr.push([ran, x, y, rotate]) : i--;        }      }      function end(arr) {        for (var i = 0; i &lt; arr.length; i++) {          ctx.save();          ctx.beginPath();          ctx.translate(arr[i][1], arr[i][2]);          ctx.rotate(arr[i][3]);          ctx.scale(0.5,0.5)          DrawStart(ctx, arr[i][0]);          ctx.fill();          ctx.stroke();          ctx.closePath();          ctx.restore();        }      }      function DrawStart(context, r) {        //绘画对象 大圆的半径 小圆半径  x轴 y轴        for (var i = 0; i &lt;= 5; i++) {          ctx.lineTo(            Math.cos(((18 + 72 * i) / 180) * Math.PI) * r,            -Math.sin(((18 + 72 * i) / 180) * Math.PI) * r          );          ctx.lineTo(            (Math.cos(((54 + 72 * i) / 180) * Math.PI) * r) / 2,            (-Math.sin(((54 + 72 * i) / 180) * Math.PI) * r) / 2          );        }      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;//transform var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      ctx.beginPath();      ctx.fillStyle = &quot;red&quot;;      ctx.save();      ctx.transform(1.5,0,0,1.5,200,100);                  a：水平缩放 b：水平倾斜 c:垂直倾斜 d:垂直缩放 e:水平位移 f：垂直位移      ctx.fillRect(0, 0, 400, 400);      ctx.restore();      ctx.fillRect(400, 400, 400, 400);      ctx.closePath();</code></pre><h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><p>渐变系列函数：</p><p>createLinearGradient（x,y,EndX,EndY）：创建渐变</p><p>addColorStop(0-1,color) ：添加颜色</p><p>createRadialGradient（x1，y1，r1，x2，y2，r2）：创建一个径向的渐变，整个径向渐变发生在俩个圆中间</p><p>语法格式：</p><pre><code>var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      document.querySelector(&quot;canvas&quot;).width = document.body.clientWidth;      document.querySelector(&quot;canvas&quot;).height = document.body.clientHeight;      //创建渐变对象      var grd = ctx.createLinearGradient(        0,   //x        0,    //y        0,    //endX        document.querySelector(&quot;canvas&quot;).height //endY        //这里的渐变方向是从上往下      );      //下面的是径向渐变，在定义的两个圆之间产生渐变      //第一个圆是外圆，内圆则是第二个      //var grd =             ctx.createRadialGradient(document.querySelector(&quot;canvas&quot;).width/2,document.querySelector(&quot;canvas&quot;).height/2,400,document.querySelector(&quot;canvas&quot;).width/2,document.querySelector(&quot;canvas&quot;).height/2,0)      //添加颜色，取值范围（0,1），必须有起点，终点      grd.addColorStop(0, &quot;black&quot;);      grd.addColorStop(1, &quot;#035&quot;);      //最后把渐变对象添加到要应用的样式填充上      ctx.fillStyle = grd;      ctx.fillRect(        0,        0,        document.querySelector(&quot;canvas&quot;).width,        document.querySelector(&quot;canvas&quot;).height      );</code></pre><h2 id="三角函数讲解"><a href="#三角函数讲解" class="headerlink" title="三角函数讲解"></a>三角函数讲解</h2><p>绘制圆形</p><p>1角度 = 1* Math.PI/ 180弧度</p><p>1弧度 = 1* 180 / Math.PI 角度</p><p>arc(x,y,r,0,360,false) </p><p>x,y  圆心坐标位置</p><p> r 圆半径 </p><p>0,360 </p><p>从0度到360度所对应的弧度 (弧度: 角度值*Math.PI/180)      true/false 逆时针/顺时针绘图</p><h2 id="添加图片、视频、canvas"><a href="#添加图片、视频、canvas" class="headerlink" title="添加图片、视频、canvas"></a>添加图片、视频、canvas</h2><p>相关函数：</p><p>createPattern(ele，repeat|repeat-x|repeat-y|no-repeat)：添加图片、视频、画布到指定的场景</p><p>语法格式：</p><pre><code>//添加图片 var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      var img = new Image();      img.src = &quot;../newIMg.png&quot;;      img.onload = () =&gt; {        var createImg = ctx.createPattern(img, &quot;repeat&quot;);        ctx.fillStyle = createImg;        ctx.fillRect(0, 0, 800, 800);      }; //添加图片时注意：必须图片加载完后在载入createPattern，否则载入失败 //添加画布 function createImgCanvas() {        var c = document.createElement(&quot;canvas&quot;);        var ctx = c.getContext(&quot;2d&quot;);        c.width = 400;        c.height = 400;        ctx.fillStyle = &quot;yellow&quot;;        ctx.transform(1, 0, 0, 1, c.width / 2, c.height / 2);        DrawStart(ctx, 200);        ctx.fill();        return c;      }      var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      document.querySelector(&quot;canvas&quot;).width = 1400;      document.querySelector(&quot;canvas&quot;).height = 1400;      ctx.fillStyle = ctx.createPattern(createImgCanvas(), &quot;repeat&quot;);      ctx.fillRect(0, 0, 1400, 1400);</code></pre><h2 id="案例：绘制圆角矩形"><a href="#案例：绘制圆角矩形" class="headerlink" title="案例：绘制圆角矩形"></a>案例：绘制圆角矩形</h2><pre><code>      /*          把圆分为4份，顺时针顺序绘制           Math.PI / 2 半圆分1为2          Math.PI 一个圆中的一半          Math.PI*3/2 || Math.PI*1.5  1个半圆加一个1分为2的半圆          Math.PI*2 完整的圆       */var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      ctx.beginPath();      ctx.arc(400 - 50, 400 - 50, 50, 0, Math.PI / 2);      ctx.lineTo(50, 400);      ctx.arc(50, 400 - 50, 50, Math.PI / 2, Math.PI);      ctx.lineTo(0, 50);      ctx.arc(50, 50, 50, Math.PI, (Math.PI * 3) / 2);      ctx.lineTo(400 - 50, 0);      ctx.arc(400 - 50, 50, 50, (Math.PI * 3) / 2, Math.PI * 2);      ctx.closePath();      ctx.stroke();  //封装函数  function PathRoundRect(ctx, width, height, r)       {        ctx.beginPath();        ctx.arc(width - r, height - r, r, 0, Math.PI / 2);        ctx.lineTo(r, height);        ctx.arc(r, height - r, r, Math.PI / 2, Math.PI);        ctx.lineTo(0, r);        ctx.arc(r, r, r, Math.PI, Math.PI * 1.5);        ctx.lineTo(width - r, 0);        ctx.arc(width - r, r, r, (Math.PI * 3) / 2, Math.PI * 2);        ctx.closePath();      }  //升级版  function PathRoundRect(ctx, width, height, r,optionColor,optionStyle)      {        if(r*2&gt;width||r*2&gt;height)return;        if(optionStyle)        {        optionStyle.stroke === true ? (optionColor.stroke ? (ctx.strokeStyle =optionColor.stroke ):null) : null;        optionStyle.fill === true ?(optionColor.fill ? (ctx.fillStyle =optionColor.fill):null) : null;        }        ctx.beginPath();        ctx.arc(width - r, height - r, r, 0, Math.PI / 2);        ctx.lineTo(r, height);        ctx.arc(r, height - r, r, Math.PI / 2, Math.PI);        ctx.lineTo(0, r);        ctx.arc(r, r, r, Math.PI, Math.PI * 1.5);        ctx.lineTo(width - r, 0);        ctx.arc(width - r, r, r, (Math.PI * 3) / 2, Math.PI * 2);        ctx.closePath();      }   //最终版    function RoundRect(ctx, width, height, r, optionColor, optionStyle) {        var flagfill,flagstroke;        if (r*2 &gt; width || r*2 &gt; height) return;        if (optionStyle) {          optionStyle.stroke === true            ? optionColor.stroke              ? (ctx.strokeStyle = optionColor.stroke)              : null            : null;          optionStyle.fill === true            ? optionColor.fill              ? (ctx.fillStyle = optionColor.fill)              : null            : null;          flagfill = optionColor.fill ?true:false;          flagstroke = optionColor.stroke ?true:false;        }        ctx.beginPath();        ctx.arc(width - r, height - r, r, 0, Math.PI / 2);        ctx.lineTo(r, height);        ctx.arc(r, height - r, r, Math.PI / 2, Math.PI);        ctx.lineTo(0, r);        ctx.arc(r, r, r, Math.PI, Math.PI * 1.5);        ctx.lineTo(width - r, 0);        ctx.arc(width - r, r, r, (Math.PI * 3) / 2, Math.PI * 2);        ctx.closePath();        flagstroke ? ctx.stroke() : null;        flagfill ? ctx.fill() : null;      }</code></pre><h2 id="案例：2048九宫格"><a href="#案例：2048九宫格" class="headerlink" title="案例：2048九宫格"></a>案例：2048九宫格</h2><pre><code> var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      ctx.translate(800/4,800/4)      RoundRect(        ctx,        480,        470,        10,        { fill: &quot;red&quot;, stroke: &quot;green&quot; },        { fill: true, stroke: true }      );      for (var i = 0; i &lt; 4; i++) {        ctx.save();        ctx.translate(10, i * 15);        for (var j = 0; j &lt; 4; j++) {          ctx.save();          ctx.translate(j * 120, i * 100 +15);          RoundRect(            ctx,            100,            100,            10,            { fill: &quot;green&quot;, stroke: &quot;green&quot; },            { fill: true, stroke: true }          );          ctx.restore();        }        ctx.restore();      }      function RoundRect(ctx, width, height, r, optionColor, optionStyle) {        var flagfill, flagstroke;        if (r &gt; width || r &gt; height) return;        if (optionStyle) {          optionStyle.stroke === true            ? optionColor.stroke              ? (ctx.strokeStyle = optionColor.stroke)              : null            : null;          optionStyle.fill === true            ? optionColor.fill              ? (ctx.fillStyle = optionColor.fill)              : null            : null;          flagfill = optionColor.fill ? true : false;          flagstroke = optionColor.stroke ? true : false;        }        ctx.beginPath();        ctx.arc(width - r, height - r, r, 0, Math.PI / 2);        ctx.lineTo(r, height);        ctx.arc(r, height - r, r, Math.PI / 2, Math.PI);        ctx.lineTo(0, r);        ctx.arc(r, r, r, Math.PI, Math.PI * 1.5);        ctx.lineTo(width - r, 0);        ctx.arc(width - r, r, r, (Math.PI * 3) / 2, Math.PI * 2);        ctx.closePath();        flagstroke ? ctx.stroke() : null;        flagfill ? ctx.fill() : null;      }</code></pre><h2 id="案例：绘制弯月"><a href="#案例：绘制弯月" class="headerlink" title="案例：绘制弯月"></a>案例：绘制弯月</h2><pre><code> pathMoon(ctx, 2, 300, 300, 200);      function pathMoon(ctx, d, x, y, r, deg, color) {        ctx.save();        ctx.translate(x, y);        ctx.scale(r, r);        ctx.rotate(deg || 0);        ctx.beginPath();        Moon(d, ctx);        ctx.fillStyle = color ? color : &quot;yellow&quot;;        ctx.fill();        ctx.closePath();        ctx.restore();        function Moon(d, ctx) {          ctx.arc(0, 0, 1, Math.PI * 0.5, Math.PI * 1.5, true);          ctx.moveTo(0, -1);          ctx.arcTo(d, 0, 0, 1, dis(0, -1, d, 0) / d);        }        function dis(x1, y1, x2, y2) {          return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));        }      }</code></pre><h2 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h2><p>贝塞尔曲线相关函数：</p><p>quadraticCurveTo(x1,y1,x2,y2)：二次贝塞尔曲线  一个控制点 1</p><p>bezierCurveTo(x1,y1,x2,y2,x3,y3)：三次贝塞尔曲线  两个控制点 1 2</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5d08c7450001a8de12800720.jpg" alt=""></p><pre><code>//起始点不由函数来定，可以用moveTo等画路径的函数来定//二次贝塞尔曲线        ctx.moveTo(0, 0);          ctx.quadraticCurveTo(800,400,400,800)          ctx.stroke()&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      html,      body {        width: 100%;        height: 100%;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas class=&quot;canvas&quot;&gt;&lt;/canvas&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      document.querySelector(&quot;canvas&quot;).width = document.body.clientWidth;      document.querySelector(&quot;canvas&quot;).height = document.body.clientHeight;        ctx.save();        var grd = ctx.createLinearGradient(0,0,0,document.querySelector(&quot;canvas&quot;).height);        grd.addColorStop(0,&quot;black&quot;);        grd.addColorStop(1,&quot;#035&quot;);        ctx.fillStyle = grd;        ctx.fillRect(0,0,document.querySelector(&quot;canvas&quot;).width,document.querySelector(&quot;canvas&quot;).height);        ctx.restore();      ctx.fillStyle = &quot;#fc1&quot;;      ctx.strokeStyle = &quot;#fb5&quot;;      ctx.lineWidth = 5;      ctx.lineJoin = &quot;round&quot;;      var ele = [];      start(ele,200);      end(ele);      pathMoon(ctx, 2, document.querySelector(&quot;canvas&quot;).width*0.85, document.querySelector(&quot;canvas&quot;).height/4,80,0,&quot;#fc1&quot;);      RectLoda(ctx);      function RectLoda(ctx)      {        ctx.save();        ctx.beginPath();        ctx.moveTo(0,document.querySelector(&quot;canvas&quot;).height*0.65);//三次贝塞尔曲线应用       ctx.bezierCurveTo(document.querySelector(&quot;canvas&quot;).width/2,650,document.querySelector(&quot;canvas&quot;).width/2,document.querySelector(&quot;canvas&quot;).height/3,document.querySelector(&quot;canvas&quot;).width,document.querySelector(&quot;canvas&quot;).height-200);        ctx.lineTo(document.querySelector(&quot;canvas&quot;).width,document.querySelector(&quot;canvas&quot;).height)        ctx.lineTo(0,document.querySelector(&quot;canvas&quot;).height)       var bgcolor = ctx.createLinearGradient(0,document.querySelector(&quot;canvas&quot;).height,0,0);        bgcolor.addColorStop(0,&quot;#030&quot;);        bgcolor.addColorStop(1,&quot;#580&quot;);        ctx.fillStyle = bgcolor;        ctx.fill();        ctx.closePath();        ctx.restore();      }      function pathMoon(ctx, d, x, y, r, deg, color) {        ctx.save();        ctx.translate(x, y);        ctx.scale(r, r);        ctx.rotate(deg || 0);        ctx.beginPath();        Moon(d, ctx);        ctx.fillStyle = color ? color : &quot;yellow&quot;;        ctx.fill();        ctx.closePath();        ctx.restore();        function Moon(d, ctx) {          ctx.arc(0, 0, 1, Math.PI * 0.5, Math.PI * 1.5, true);          ctx.moveTo(0, -1);          ctx.arcTo(d, 0, 0, 1, dis(0, -1, d, 0) / d);        }        function dis(x1, y1, x2, y2) {          return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));        }      }      function start(arr,num) {        for (var i = 0; i &lt; num; i++) {          var flag = true,            ran = Math.random() * 10 + 5,            x =              Math.random() *                (document.querySelector(&quot;canvas&quot;).width - ran * 2) +              ran,            y =              (Math.random() *                (document.querySelector(&quot;canvas&quot;).height - ran * 2) +                ran) *              0.65,            rotate = Math.random() * 360;          for (var j = 0; j &lt; ele.length; j++) {            var oldx = Math.pow(x - arr[j][1], 2);            var oldy = Math.pow(y - arr[j][2], 2);            var oldr = Math.pow(ran + arr[j][0], 2);            if (oldx + oldy &lt; oldr) {              flag = false;            }            if(x&gt;document.querySelector(&quot;canvas&quot;).width*0.85&amp;&amp;x&lt;document.querySelector(&quot;canvas&quot;).width*0.85+80*1.15)            {              flag = false;            }          }          flag ? arr.push([ran, x, y, rotate]) : i--;        }      }      function end(arr) {        for (var i = 0; i &lt; arr.length; i++) {          ctx.save();          ctx.beginPath();          ctx.translate(arr[i][1], arr[i][2]);          ctx.rotate(arr[i][3]);          ctx.scale(0.7, 0.7);          DrawStart(ctx, arr[i][0]);          ctx.fill();          ctx.stroke();          ctx.closePath();          ctx.restore();        }      }      function DrawStart(ctx, r) {        //绘画对象 大圆的半径 小圆半径  x轴 y轴        for (var i = 0; i &lt;= 5; i++) {          ctx.lineTo(            Math.cos(((18 + 72 * i) / 180) * Math.PI) * r,            -Math.sin(((18 + 72 * i) / 180) * Math.PI) * r          );          ctx.lineTo(            (Math.cos(((54 + 72 * i) / 180) * Math.PI) * r) / 2,            (-Math.sin(((54 + 72 * i) / 180) * Math.PI) * r) / 2          );        }      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>字体绘制相关函数：</p><p>font：设置字体样式属性  五个参数依次是font-style(italic oblique)、font-variant(small-caps)、font-weight(bold lighter bolder)、font-size、font-family</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5d08d16c0001026b12800720.jpg" alt=""></p><p>fillText(string,x,y,length)：绘制带填充字体</p><p>strokeText(string,x,y,length)：绘制带边框的字体</p><p>textAlign：设置字体水平对齐 参数有：right    center   left</p><p>textBaseline：设置字体垂直对齐 参数有：top   middle bottom  alphabetic(defalut)  ideographic  hanging</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5d08fdb00001fe6512800720.jpg" alt=""></p><p>measureText(String).width：获取文本宽度（会根据font设置的字体、字号来决定）</p><p>语法格式：</p><pre><code> var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);    var grd = ctx.createLinearGradient(0,0,800,0);    grd.addColorStop(0,&quot;red&quot;);    grd.addColorStop(0.5,&quot;yellow&quot;);    grd.addColorStop(1,&quot;green&quot;);    ctx.fillStyle = grd;    ctx.font = &quot;bold 40px 微软雅黑 &quot;;    ctx.fillText(&quot;How are you!&quot;,100,100,300);    //字体可以填充渐变色、图形纹理、另一个画布  ===================================================================  //只带边框的字体   var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);    var grd = ctx.createLinearGradient(0,0,800,0);    grd.addColorStop(0,&quot;red&quot;);    grd.addColorStop(0.5,&quot;yellow&quot;);    grd.addColorStop(1,&quot;green&quot;);    ctx.lineWidth =2;    ctx.strokeStyle = grd;    ctx.font = &quot;bold 40px 微软雅黑 &quot;;    ctx.strokeText(&quot;How are you!&quot;,100,100,300);    ===============================================   //带纹理的字体    var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      // var grd = ctx.createLinearGradient(0,0,800,0);      // grd.addColorStop(0,&quot;red&quot;);      // grd.addColorStop(0.5,&quot;yellow&quot;);      // grd.addColorStop(1,&quot;green&quot;);      var img = new Image();      img.src = &quot;../newIMg.png&quot;;      img.onload = function() {        var pattern = ctx.createPattern(img, &quot;repeat&quot;);        ctx.fillStyle = pattern;        ctx.strokeStyle = &quot;red&quot;;        ctx.lineWidth =1;        ctx.font = &quot;bold 40px 微软雅黑 &quot;;        ctx.strokeText(&quot;How are you!&quot;, 100, 100, 300);        ctx.fillText(&quot;How are you!&quot;, 100, 100, 300);      };</code></pre><p>水平对齐效果：</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/59f31bf70001286f12800720.jpg" alt=""></p><p>垂直对齐效果：</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/59992ffd0001f1dd12800720.jpg" alt=""></p><h2 id="案例：水平垂直居中"><a href="#案例：水平垂直居中" class="headerlink" title="案例：水平垂直居中"></a>案例：水平垂直居中</h2><pre><code> var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      ctx.fillStyle = &quot;red&quot;;      ctx.strokeStyle = &quot;red&quot;;      ctx.moveTo(400, 0);      ctx.lineTo(400, 800);      ctx.moveTo(0, 400);      ctx.lineTo(800, 400);      ctx.stroke();      ctx.textAlign = &quot;center&quot;;      ctx.textBaseline = &quot;middle&quot;;      ctx.font = &quot;bold 100px 微软雅黑 &quot;;      ctx.strokeText(&quot;How are you!&quot;, 400, 400);</code></pre><h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><p>阴影相关属性：</p><p>shadowColor：设置阴影颜色</p><p>shadowOffsetX：设置阴影X偏移</p><p>shadowOffsetY：设置阴影Y偏移</p><p>shadowBlur：设置阴影模糊扩散程度</p><p>语法格式：</p><pre><code>  var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      ctx.shadowColor = &quot;black&quot;;     ctx.fillStyle = &quot;red&quot;      var num = 0;      var flag = true;      setInterval(function() {        ctx.shadowOffsetX = -20+num;      ctx.shadowOffsetY = -20+num;        num == 100 ? (flag = false) : num == 0 ? (flag = true) : null;        flag ? num++ : num--;        ctx.shadowBlur = num;        ctx.clearRect(0, 0, 800, 800);        ctx.fillRect(100, 100, 400, 400);      }, 50);</code></pre><h2 id="透明"><a href="#透明" class="headerlink" title="透明"></a>透明</h2><p>透明相关函数：</p><p>在canvas中要实现透明，可以使用rgba颜色，也可以使用以下方法</p><p>globalAlpha：设置透明度   范围（1-0） 全局透明</p><p>语法格式：</p><pre><code>  var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      var color = [&quot;red&quot;,&quot;green&quot;,&quot;yellow&quot;,&quot;blue&quot;,&quot;black&quot;]     for(var i=0;i&lt;200;i++)     {       var randomX = Math.random()*800;       var randomY = Math.random()*800;       var randomR = Math.random()*30;      var R = Math.floor(Math.random()*255),G = Math.floor(Math.random()*255),B = Math.floor(Math.random()*255);       ctx.save();       ctx.beginPath();       ctx.globalAlpha = 0.7;       ctx.fillStyle = `rgb(${R},${G},${B})`;       ctx.arc(randomX,randomY,randomR,0,Math.PI*2);       ctx.fill();       ctx.closePath();       ctx.restore();     }</code></pre><h2 id="遮盖顺序"><a href="#遮盖顺序" class="headerlink" title="遮盖顺序"></a>遮盖顺序</h2><blockquote><p>xx.globalCompositeOperation = “source-over” (默认，后绘制的图形会压在先绘制的图形上) / “destination-over”(先绘制的图形压在后绘制的图形上)</p></blockquote><p>相关属性：</p><p>globalCompositeOperation ：改变元素显示效果与遮盖顺序</p><p>各个参数的实现效果可以参考菜鸟，或有canvas手册的网址，或以下链接</p><p><a href="">https://blog.csdn.net/fe_dev/article/details/81985367</a></p><p>此链接，有水滴扩散、刮刮卡案例参考</p><p>参数：</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/59f24de30001e3ab12800720.jpg" alt=""></p><p>语法格式：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      html,      body {        width: 100%;        height: 100%;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas class=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      var color = [&quot;red&quot;,&quot;green&quot;,&quot;yellow&quot;,&quot;blue&quot;,&quot;black&quot;]      var Balls = [];     for(var i=0;i&lt;200;i++)     {      var randomR = Math.random()*30+10;       var randomX = Math.random()*(800-randomR*2)+randomR;       var randomY = Math.random()*(800-randomR*2)+randomR;      var R = Math.floor(Math.random()*255),G = Math.floor(Math.random()*255),B = Math.floor(Math.random()*255);        let balls ={          x:randomX,          y:randomY,          r:randomR,          color:`rgb(${R},${G},${B})`,          vx:(Math.random()*5+5)*(Math.pow(-1,Math.floor(Math.random()*100))),          vy:(Math.random()*5+5)*(Math.pow(-1,Math.floor(Math.random()*100))),        }      Balls.push(balls);     }     setInterval(()=&gt;{       draw(ctx)     },50)     function draw(ctx)     {       ctx.clearRect(0,0,800,800)       for(let i=0;i&lt;Balls.length;i++)       {       ctx.save();       ctx.beginPath();      ctx.globalCompositeOperation = &quot;xor&quot;;       ctx.fillStyle = Balls[i].color;       ctx.arc(Balls[i].x,Balls[i].y,Balls[i].r,0,Math.PI*2);       ctx.fill();       ctx.closePath();       ctx.restore();       Balls[i].x+=Balls[i].vx;       Balls[i].y+=Balls[i].vy;       if(Balls[i].x-Balls[i].r&lt;=0)       {         Balls[i].vx = -Balls[i].vx;          Balls[i].x = Balls[i].r;       }       if(Balls[i].x+Balls[i].r &gt;= 800)       {         Balls[i].vx = -Balls[i].vx;         Balls[i].x = 800-Balls[i].r;       }       if(Balls[i].y-Balls[i].r&lt;=0)       {         Balls[i].vy = -Balls[i].vy;         Balls[i].y = Balls[i].r;       }       if(Balls[i].y+Balls[i].r&gt;=800)       {         Balls[i].vy = -Balls[i].vy;         Balls[i].y = 800-Balls[i].r;       }       }     }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h2><p>相关函数：</p><p>clip：相对于上个填充路径做剪切效果</p><p>语法格式：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      html,      body {        width: 100%;        height: 100%;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas class=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      var r = 150;      ctx.fillStyle = &quot;black&quot;;      ctx.fillRect(0, 0, 800, 800);      ctx.canvas.onmousemove = e =&gt; {        ctx.clearRect(0, 0, 800, 800);        ctx.beginPath();        ctx.fillStyle = &quot;black&quot;;        ctx.fillRect(0, 0, 800, 800);        ctx.closePath();        ctx.save();        ctx.beginPath();        ctx.fillStyle = &quot;rgba(255,255,255,1)&quot;;        var x = e.pageX - r &lt;= 0 ? r : e.pageX;        var y = e.pageY - r &lt;= 0 ? r : e.pageY;        x = e.pageX + r &gt; 800 ? 800 - r : x;        y = e.pageY + r &gt; 800 ? 800 - r : y;        ctx.arc(x, y, r, 0, Math.PI * 2);        ctx.fill();        ctx.clip();        ctx.closePath();        ctx.beginPath();        ctx.fillStyle = &quot;red&quot;;        ctx.font = &quot;200px bold 微软雅黑&quot;;        ctx.textAlign = &quot;center&quot;;        ctx.textBaseline = &quot;middle&quot;;        ctx.fillText(&quot;Canvas&quot;, 400, 400);        ctx.closePath();        ctx.restore();        document.onkeyup = ev =&gt; {          ev.keyCode === 38 ? (r += 20) : null;          ev.keyCode === 40 ? (r -= 20) : null;          if (r &gt;= 390) r = 390;          ctx.canvas.onmousemove(e);          return false;        };      };      ctx.canvas.onmouseout = () =&gt; {        ctx.fillStyle = &quot;black&quot;;        ctx.fillRect(0, 0, 800, 800);        document.onkeyup = null;      };    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="实现剪纸效果"><a href="#实现剪纸效果" class="headerlink" title="实现剪纸效果"></a>实现剪纸效果</h2><blockquote><p>剪纸效果参考非零环绕原侧，自动识别里、外、面，一个面不同时出现顺时针和逆时针就填充，如果同时出现顺时针和逆时针就不填充，这也就说明了图形的绘制方向，会影响其是否填充</p></blockquote><p>语法格式：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      html,      body {        width: 100%;        height: 100%;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas class=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      ctx.beginPath();      ctx.rect(200, 200, 400, 200);      drawRect(ctx, 220, 220, 100, 100);      ctx.arc(400, 270, 50, Math.PI * 2, 0, true);      Triangle(ctx, 510, 220, 460, 320, 560, 320);      ctx.closePath();      ctx.fillStyle = &quot;red&quot;;      ctx.shadowColor = &quot;black&quot;;      ctx.shadowOffsetX = 10;      ctx.shadowOffsetY = 10;      ctx.fill();      function drawRect(ctx, x, y, w, h) {        ctx.moveTo(x, y);        ctx.lineTo(x, y + h);        ctx.lineTo(x + w, y + h);        ctx.lineTo(x + w, y);        ctx.lineTo(x, y);      }      function Triangle(ctx, x1, y1, x2, y2, x3, y3) {        ctx.moveTo(x1, y1);        ctx.lineTo(x2, y2);        ctx.lineTo(x3, y3);        ctx.lineTo(x1, y1);      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><p>canvas交互相关函数：</p><p>isPointInPath(x,y)：检测指定的坐标是否在绘制元素内，<strong>只能判断最后一个绘制的封闭路径</strong></p><p>语法格式：</p><pre><code>//点击填充颜色&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      * {        padding: 0;        margin: 0;      }      html,      body {        width: 100%;        height: 100%;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas class=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      var Balls = [];      for (var i = 0; i &lt; 10; i++) {        ctx.beginPath();        Balls.push({          x: Math.random() * 800,          y: Math.random() * 800,          r: Math.random() * 100        });      }      Draw(ctx);      function Draw(ctx) {        for (let i = 0; i &lt; Balls.length; i++) {          ctx.beginPath();          ctx.arc(Balls[i].x, Balls[i].y, Balls[i].r, 0, Math.PI * 2);          ctx.stroke();        }        ctx.canvas.addEventListener(&quot;click&quot;, function(event) {          for (let i = 0; i &lt; Balls.length; i++) {            ctx.beginPath();            ctx.arc(Balls[i].x, Balls[i].y, Balls[i].r, 0, Math.PI * 2);            if (ctx.isPointInPath(event.pageX, event.pageY)) {              ctx.fillStyle = &quot;yellow&quot;;              ctx.fill();            }          }        });      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;//鼠标滑入填充颜色，滑出清空颜色&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      * {        padding: 0;        margin: 0;      }      html,      body {        width: 100%;        height: 100%;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas class=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;canvas&quot;).getContext(&quot;2d&quot;);      var Balls = [];      for (var i = 0; i &lt; 10; i++) {        ctx.beginPath();        Balls.push({          x: Math.random() * 800,          y: Math.random() * 800,          r: Math.random() * 100        });      }      Draw(ctx);      function Draw(ctx) {        for (let i = 0; i &lt; Balls.length; i++) {          ctx.beginPath();          ctx.arc(Balls[i].x, Balls[i].y, Balls[i].r, 0, Math.PI * 2);          ctx.stroke();        }        ctx.canvas.addEventListener(&quot;mousemove&quot;, function(event) {          ctx.clearRect(0, 0, 800, 800);          for (let i = 0; i &lt; Balls.length; i++) {            ctx.beginPath();            ctx.arc(Balls[i].x, Balls[i].y, Balls[i].r, 0, Math.PI * 2);            if (ctx.isPointInPath(event.pageX, event.pageY)) {              ctx.fillStyle =                &quot;rgb(&quot; +                Math.random() * 255 +                &quot;,&quot; +                Math.random() * 255 +                &quot;,&quot; +                Math.random() * 255 +                &quot;)&quot;;              ctx.fill();            } else ctx.stroke();          }        });      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="案例：小球滚动（面向对象-控制面板）"><a href="#案例：小球滚动（面向对象-控制面板）" class="headerlink" title="案例：小球滚动（面向对象+控制面板）"></a>案例：小球滚动（面向对象+控制面板）</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      html,      body {        width: 100%;        height: 100%;      }      .canvasBox {        width: 800px;        height: 800px;        position: relative;      }      .canvasBox &gt; .SetupPanel {        width: 300px;        height: 200px;        background: #99b4e487;        border-radius: 30px;        position: absolute;        left: 0;        top: 0;        color: white;      }      .canvasBox &gt; .SetupPanel &gt; h1 {        text-align: center;        line-height: 25px;      }      .canvasBox &gt; .SetupPanel &gt; a {        float: left;        color: #478aff87;        background: #e5eeff;        border-radius: 5px;        padding: 10px 0;        margin: 3px 0;        text-decoration: none;        text-align: center;        line-height: 15px;        width: 100%;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;div class=&quot;canvasBox&quot;&gt;      &lt;canvas class=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;      &lt;div class=&quot;SetupPanel&quot;&gt;        &lt;h1&gt;控制面板&lt;/h1&gt;        &lt;a href=&quot;javascript:void(0)&quot;&gt;点击停止&lt;/a&gt;        &lt;a href=&quot;javascript:void(0)&quot;&gt;点击切换背景颜色&lt;/a&gt;        &lt;a href=&quot;javascript:void(0)&quot;&gt;点击切换覆盖模式&lt;/a&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      class Animate {        constructor(canvas) {          this.canvas = document.querySelector(canvas);          this.ctx = this.canvas.getContext(&quot;2d&quot;);          this.initAttr();          this.initDraw();          this.initEvent();        }        initAttr() {          this.color = [&quot;red&quot;, &quot;green&quot;, &quot;yellow&quot;, &quot;blue&quot;, &quot;black&quot;];          this.bgcolor = null;          this.Balls = [];          this.flag = true;          this.module = [&quot;xor&quot;, &quot;lighter&quot;, null];          this.option = null;          this.time = null;        }        initEvent() {          document.querySelectorAll(            &quot;.canvasBox&gt;.SetupPanel&gt;a&quot;          )[0].onclick = () =&gt; {            if (this.flag) {              clearInterval(this.time);              this.flag = false;              document.querySelectorAll(                &quot;.canvasBox&gt;.SetupPanel&gt;a&quot;              )[0].innerHTML = &quot;点击开始&quot;;              document.querySelectorAll(                &quot;.canvasBox&gt;.SetupPanel&gt;a&quot;              )[0].style.background = &quot;red&quot;;            } else {              this.time = setInterval(() =&gt; {                this.draw(this.bgcolor);              }, 50);              this.flag = true;              document.querySelectorAll(                &quot;.canvasBox&gt;.SetupPanel&gt;a&quot;              )[0].innerHTML = &quot;点击停止&quot;;              document.querySelectorAll(                &quot;.canvasBox&gt;.SetupPanel&gt;a&quot;              )[0].style.background = &quot;&quot;;            }          };          document.querySelectorAll(            &quot;.canvasBox&gt;.SetupPanel&gt;a&quot;          )[1].onclick = () =&gt; {            this.bgcolor = this.color[              parseInt(Math.random() * this.color.length - 1)            ];          };          document.querySelectorAll(            &quot;.canvasBox&gt;.SetupPanel&gt;a&quot;          )[2].onclick = () =&gt; {            this.option = this.module[              Math.ceil(Math.random() * this.module.length - 1)            ];          };        }        initDraw() {          for (let i = 0; i &lt; 200; i++) {            let randomR = Math.random() * 30 + 10;            let randomX = Math.random() * (800 - randomR * 2) + randomR;            let randomY = Math.random() * (800 - randomR * 2) + randomR;            let R = Math.floor(Math.random() * 255),              G = Math.floor(Math.random() * 255),              B = Math.floor(Math.random() * 255);            let balls = {              x: randomX,              y: randomY,              r: randomR,              color: `rgb(${R},${G},${B})`,              vx:                (Math.random() * 5 + 5) *                Math.pow(-1, Math.floor(Math.random() * 100)),              vy:                (Math.random() * 5 + 5) *                Math.pow(-1, Math.floor(Math.random() * 100))            };            this.Balls.push(balls);          }        }        draw(bgcolor) {          this.ctx.clearRect(0, 0, 800, 800);          this.bgDraw(bgcolor);          for (let i = 0; i &lt; this.Balls.length; i++) {            this.ctx.save();            this.ctx.beginPath();            this.ctx.globalCompositeOperation = this.option;            this.ctx.fillStyle = this.Balls[i].color;            this.ctx.arc(              this.Balls[i].x,              this.Balls[i].y,              this.Balls[i].r,              0,              Math.PI * 2            );            this.ctx.fill();            this.ctx.closePath();            this.ctx.restore();            this.Balls[i].x += this.Balls[i].vx;            this.Balls[i].y += this.Balls[i].vy;            if (this.Balls[i].x - this.Balls[i].r &lt;= 0) {              this.Balls[i].vx = -this.Balls[i].vx;              this.Balls[i].x = this.Balls[i].r;            }            if (this.Balls[i].x + this.Balls[i].r &gt;= 800) {              this.Balls[i].vx = -this.Balls[i].vx;              this.Balls[i].x = 800 - this.Balls[i].r;            }            if (this.Balls[i].y - this.Balls[i].r &lt;= 0) {              this.Balls[i].vy = -this.Balls[i].vy;              this.Balls[i].y = this.Balls[i].r;            }            if (this.Balls[i].y + this.Balls[i].r &gt;= 800) {              this.Balls[i].vy = -this.Balls[i].vy;              this.Balls[i].y = 800 - this.Balls[i].r;            }          }        }        bgDraw(bgcolor) {          this.ctx.beginPath();          this.ctx.fillStyle = bgcolor;          this.ctx.fillRect(0, 0, 800, 800);          this.ctx.closePath();        }      }      //初始化对象      let animate = new Animate(&quot;canvas&quot;);      var ctx = animate.ctx;      //开始执行动画      animate.time = setInterval(() =&gt; {        animate.draw(animate.bgcolor);      }, 50);    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="清除"><a href="#清除" class="headerlink" title="清除"></a>清除</h2><blockquote><p>清除也称重绘，在动画应用当中是不可分割的，动画是一帧一帧的播放，中间少不了清除的步骤，否则将达不到动画的播放帧数标准</p></blockquote><p>清除画布相关函数：</p><p>clearRect(startX,startY,endX,endY)：清除参数指定范围内绘制的元素</p><p>语法格式：</p><pre><code>ctx.clearRect(0,0,canvas.width,canvas.height);</code></pre><h2 id="扩充Canvas-2d方法"><a href="#扩充Canvas-2d方法" class="headerlink" title="扩充Canvas 2d方法"></a>扩充Canvas 2d方法</h2><blockquote><p>在有些时候，我们自定义的函数，不能像canvas自带的函数一样，不用传入绘制上下午对象，而我们自定义的必须把绘制对象传入函数里才可以使用，那么有没有方法可以解决呢，在canvas实例对象的原型上添加方法即可</p></blockquote><p>语法格式：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      html,      body {        width: 100%;        height: 100%;      }      .canvasBox {        width: 800px;        height: 800px;        position: relative;      }      .canvasBox &gt; .SetupPanel {        width: 300px;        height: 200px;        background: #99b4e487;        border-radius: 30px;        position: absolute;        left: 0;        top: 0;        color: white;      }      .canvasBox &gt; .SetupPanel &gt; h1 {        text-align: center;        line-height: 25px;      }      .canvasBox &gt; .SetupPanel &gt; a {        float: left;        color: #478aff87;        background: #e5eeff;        border-radius: 5px;        padding: 10px 0;        margin: 3px 0;        text-decoration: none;        text-align: center;        line-height: 15px;        width: 100%;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;div class=&quot;canvasBox&quot;&gt;      &lt;canvas class=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;    &lt;/div&gt;    &lt;script src=&quot;../node/jquery.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      let ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      ctx.__proto__.fillStar = function(r)        //ctx.__proto__ === CanvasRenderingContext2D.prototype      {          this.beginPath();        for(let i=0;i&lt;=5;i++)        {          this.lineTo(            Math.cos((18+i*72)/180*Math.PI)*r+this.lastMoveTo.x,            -Math.sin((18+i*72)/180*Math.PI)*r+this.lastMoveTo.y          );          this.lineTo(            Math.cos((54+i*72)/180*Math.PI)*r/2+this.lastMoveTo.x,            -Math.sin((54+i*72)/180*Math.PI)*r/2+this.lastMoveTo.y          );        }          this.closePath();          this.fill();      }      ctx.lastMoveTo = {};      CanvasRenderingContext2D.prototype.oldMoveTo = CanvasRenderingContext2D.prototype.moveTo;      CanvasRenderingContext2D.prototype.moveTo = function(x,y)      {        this.oldMoveTo(x,y);        this.lastMoveTo.x = x;        this.lastMoveTo.y = y;      }      ctx.moveTo(400,400)      ctx.fillStar(100);    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h2><blockquote><p>图像不同于图形，图像是位图是由无数个彩色像素点组成，图形是点线面结合而成，两者的处理方式也不相同，所干涉的区域也不相同</p></blockquote><p>图形处理相关函数：</p><p>drawImage(img,sx,sy,sw,sh,dx,dy,dw,dh)  ：导入指定图片到canvas当中。 九个参数  首个是图片资源，s开头的是原图像的参数，d开头的是指在canvas绘制的参数</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5c7d480800018e1a12800720.jpg" alt=""></p><p>语法格式：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas      class=&quot;canvas&quot;      width=&quot;800&quot;      height=&quot;800&quot;      style=&quot;border:1px solid blue&quot;    &gt;&lt;/canvas&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      var img = new Image();      img.src = &quot;../PHP操作MySQL.png&quot;;      img.onload = () =&gt; {        ctx.drawImage(img, 740, 450, 260, 70, 0, 0, 800, 800);      };    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="案例：图像放大"><a href="#案例：图像放大" class="headerlink" title="案例：图像放大"></a>案例：图像放大</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      body,      html {        background: black;      }input[type=range] {    -webkit-appearance: none;    width: 300px;    border-radius: 10px; /*这个属性设置使填充进度条时的图形为圆角*/    margin-top: 10px;}input[type=range]::-webkit-slider-thumb {    -webkit-appearance: none;} input[type=range]::-webkit-slider-runnable-track {    height: 10px;    border-radius: 10px; /*将轨道设为圆角的*/    box-shadow: 0 1px 1px #def3f8, inset 0 .125em .125em #0d1112; /*轨道内置阴影效果*/}input[type=range]::-webkit-slider-thumb {    -webkit-appearance: none;    height: 25px;    width: 25px;    margin-top: -5px; /*使滑块超出轨道部分的偏移量相等*/    background: #ffffff;     border-radius: 50%; /*外观设置为圆形*/    border: solid 0.125em rgba(205, 224, 230, 0.5); /*设置边框*/    box-shadow: 0 .125em .125em #3b4547; /*添加底部阴影*/}    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas      class=&quot;canvas&quot;      style=&quot;border:1px solid blue;margin: 0 auto;display: block&quot;    &gt;&lt;/canvas&gt;    &lt;input      type=&quot;range&quot;      style=&quot;display:block;width:100%;&quot;      max=&quot;3.0&quot;      min=&quot;0.5&quot;      step=&quot;0.1&quot;      value=&quot;1&quot;      class=&quot;scale&quot;    /&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      var img = new Image();      var scale = document.querySelector(&quot;.scale&quot;);      img.src = &quot;../1.jpg&quot;;      img.onload = () =&gt; {        ctx.canvas.width = img.width;        ctx.canvas.height = img.height;        drawImageByScale(ctx, scale.value, img.width, img.height);        // scale.onchange = function() {        //   ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);        //   drawImageByScale(ctx, scale.value, img.width, img.height);        // };        scale.onmousemove = function() {          ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);          drawImageByScale(ctx, scale.value, img.width, img.height);        };      };      function drawImageByScale(ctx, scale, w, h) {        var imageWidth = w * scale;        var imageHeight = h * scale;        let x = ctx.canvas.width / 2 - imageWidth / 2,          y = ctx.canvas.height / 2 - imageHeight / 2;        ctx.drawImage(img, x, y, imageWidth, imageHeight);      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;//水印版&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      body,      html {        background: black;      }      .bottom {        width: 100%;        position: fixed;        bottom: 30px;      }      input[type=&quot;range&quot;] {        -webkit-appearance: none;        width: 300px;        border-radius: 10px; /*这个属性设置使填充进度条时的图形为圆角*/        margin-top: 10px;        position: relative;      }      input[type=&quot;range&quot;]::-webkit-slider-thumb {        -webkit-appearance: none;      }      input[type=&quot;range&quot;]::-webkit-slider-runnable-track {        height: 10px;        border-radius: 10px; /*将轨道设为圆角的*/        box-shadow: 0 1px 1px #def3f8, inset 0 0.125em 0.125em #0d1112; /*轨道内置阴影效果*/      }      input[type=&quot;range&quot;]::-webkit-slider-thumb {        -webkit-appearance: none;        height: 25px;        width: 25px;        margin-top: -5px; /*使滑块超出轨道部分的偏移量相等*/        background: #ffffff;        border-radius: 50%; /*外观设置为圆形*/        border: solid 0.125em rgba(205, 224, 230, 0.5); /*设置边框*/        box-shadow: 0 0.125em 0.125em #3b4547; /*添加底部阴影*/      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas      class=&quot;canvas&quot;      style=&quot;border:1px solid blue;margin: 0 auto;display: block&quot;    &gt;&lt;/canvas&gt;    &lt;div class=&quot;bottom&quot;&gt;      &lt;input        type=&quot;range&quot;        style=&quot;display:block;width:100%;&quot;        max=&quot;3.0&quot;        min=&quot;0.5&quot;        step=&quot;0.1&quot;        value=&quot;1&quot;        class=&quot;scale&quot;      /&gt;    &lt;/div&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      var img = new Image();      var scale = document.querySelector(&quot;.scale&quot;);      img.src = &quot;./img.jpg&quot;;      var shuiying = document.createElement(&quot;canvas&quot;).getContext(&quot;2d&quot;);      shuiying.canvas.width = 400;      shuiying.canvas.height = 100;      shuiying.font = &quot;bold 50px 微软雅黑&quot;;      shuiying.fillStyle = &quot;white&quot;;      shuiying.textAlign = &quot;center&quot;;      shuiying.textBaseline = &quot;middle&quot;;      shuiying.fillText(&quot;xuyuxin&quot;, 200, 50, 400);      img.onload = () =&gt; {        ctx.canvas.width = img.width;        ctx.canvas.height = img.height;        drawImageByScale(ctx, scale.value, img.width, img.height,shuiying);        // scale.onchange = function() {        //   ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);        //   drawImageByScale(ctx, scale.value, img.width, img.height);        // };        scale.onmousemove = function() {          ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);          drawImageByScale(ctx, scale.value, img.width, img.height, shuiying);        };      };      function drawImageByScale(ctx, scale, w, h, c) {        var imageWidth = w * scale;        var imageHeight = h * scale;        let x = ctx.canvas.width / 2 - imageWidth / 2,          y = ctx.canvas.height / 2 - imageHeight / 2;        ctx.drawImage(img, x, y, imageWidth, imageHeight);        if(scale&gt;=1)        {        ctxdrawImage(c.canvas, -40, ctx.canvas.height - 100);        }        else        {        ctx.drawImage(c.canvas, x, imageHeight-50);        }      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="案例：放大镜"><a href="#案例：放大镜" class="headerlink" title="案例：放大镜"></a>案例：放大镜</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      body,      html {        background: black;      }      .bottom {        width: 100%;        position: fixed;        bottom: 30px;      }      input[type=&quot;range&quot;] {        -webkit-appearance: none;        width: 300px;        border-radius: 10px; /*这个属性设置使填充进度条时的图形为圆角*/        margin-top: 10px;        position: relative;      }      input[type=&quot;range&quot;]::-webkit-slider-thumb {        -webkit-appearance: none;      }      input[type=&quot;range&quot;]::-webkit-slider-runnable-track {        height: 10px;        border-radius: 10px; /*将轨道设为圆角的*/        box-shadow: 0 1px 1px #def3f8, inset 0 0.125em 0.125em #0d1112; /*轨道内置阴影效果*/      }      input[type=&quot;range&quot;]::-webkit-slider-thumb {        -webkit-appearance: none;        height: 25px;        width: 25px;        margin-top: -5px; /*使滑块超出轨道部分的偏移量相等*/        background: #ffffff;        border-radius: 50%; /*外观设置为圆形*/        border: solid 0.125em rgba(205, 224, 230, 0.5); /*设置边框*/        box-shadow: 0 0.125em 0.125em #3b4547; /*添加底部阴影*/      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas      class=&quot;canvas&quot;      style=&quot;border:1px solid blue;margin: 0 auto;display: block&quot;    &gt;&lt;/canvas&gt;    &lt;script&gt;      var ctx = document.querySelector(&quot;.canvas&quot;).getContext(&quot;2d&quot;);      var offsetCanvas = document.createElement(&quot;canvas&quot;).getContext(&quot;2d&quot;);      var img = new Image();      var scale;      img.src = &quot;./img-lg.jpg&quot;;      img.onload = () =&gt; {        ctx.canvas.width = 1152;        ctx.canvas.height = 768;        offsetCanvas.canvas.width = img.width;        offsetCanvas.canvas.height = img.height;        scale = offsetCanvas.canvas.width / ctx.canvas.width;        ctx.drawImage(img, 0, 0, ctx.canvas.width, ctx.canvas.height);        offsetCanvas.drawImage(img, 0, 0);      };      ctx.canvas.onmousedown = function(e) {        var x = e.clientX - this.getBoundingClientRect().left,            y = e.clientY - this.getBoundingClientRect().top;          Draw(ctx, true, x, y);        this.onmousemove = e =&gt; {          var x = e.clientX - this.getBoundingClientRect().left,            y = e.clientY - this.getBoundingClientRect().top;          Draw(ctx, true, x, y);        };        this.onmouseup = () =&gt; {          ctx.canvas.onmousemove = null;          Draw(ctx, false);        };        this.onmouseout = () =&gt; {          ctx.canvas.onmousemove = null;          Draw(ctx, false);        };      };      function Draw(ctx, flag, x, y) {        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);        ctx.drawImage(img, 0, 0, ctx.canvas.width, ctx.canvas.height);        if (flag) {          drawImageRect(ctx, x, y);        }      }      function drawImageRect(ctx, x, y) {        var imageLgX = x * scale,          imageLgY = y * scale;        var r = 200;        var sx = imageLgX - r,          sy = imageLgY - r;        var dx = x - r,          dy = y - r;        ctx.save();        ctx.beginPath();        ctx.arc(x,y,r,0,Math.PI*2);        ctx.stroke();        ctx.clip()        ctx.drawImage(offsetCanvas.canvas, sx, sy, r * 2, r * 2, dx, dy, r * 2, r * 2);        ctx.closePath();        ctx.restore();      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="像素处理"><a href="#像素处理" class="headerlink" title="像素处理"></a>像素处理</h2><p>相关函数：</p><p>getImageData(x,y,w,h)：获取指定图像像素数据   返回一个对象，里面有 data像素数据  </p><p>putImageData(img,dx,dy,dirtx,dirty,dirtw,dirth)：输出处理后的图像到指定位置</p><p>createImageData(w,h)：创建一个空的图像</p><p>像素处理算法：</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5c06264f0001f9fe12800720.jpg" alt=""></p><p>语法格式：</p><pre><code>//像素自动变紫&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      body,      html {        /* background: black; */        height: 2000px;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas      class=&quot;canvas&quot;      style=&quot;border:1px solid blue;float:left&quot;      width=&quot;500&quot;      height=&quot;500&quot;    &gt;&lt;/canvas&gt;    &lt;canvas      class=&quot;canvas&quot;      style=&quot;border:1px solid blue;float:right&quot;      width=&quot;500&quot;      height=&quot;500&quot;    &gt;&lt;/canvas&gt;    &lt;div class=&quot;btnbox&quot; style=&quot;display: block;&quot;&gt;      &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;fillter()&quot;&gt;fillter&lt;/a&gt;    &lt;/div&gt;    &lt;script&gt;      var ctx1 = document.querySelectorAll(&quot;.canvas&quot;)[0].getContext(&quot;2d&quot;);      var ctx2 = document.querySelectorAll(&quot;.canvas&quot;)[1].getContext(&quot;2d&quot;);var n =0;      var imageData;      var data;      var img = new Image();      img.src = &quot;./img.jpg&quot;;      img.onload = function() {        ctx1.drawImage(img, 0, 0, 500, 500);      };      function fillter() {        imageData = ctx1.getImageData(0, 0, 500, 500);        data = imageData.data;        for (let i = 0; i &lt; ctx2.canvas.width * ctx2.canvas.height; i++) {          data[4 * i + 0] += n;          // data[4 * i + 1] += n;          data[4 * i + 2] += n;          // data[4 * i + 3] = Math.ceil(Math.random()*255);        }        ctx2.putImageData(imageData, 0, 0, 0, 0, 500, 500);      }      setInterval(function(){        n++;        if(n===255)        {          n=Math.ceil(Math.random()*255)        }        fillter(n);      },1);    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="案例：像素滤镜"><a href="#案例：像素滤镜" class="headerlink" title="案例：像素滤镜"></a>案例：像素滤镜</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      body,      html {        /* background: black; */        height: 2000px;      }      .btnbox &gt; a {        float: left;        margin: 10px 20px;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas class=&quot;canvas&quot; style=&quot;float:left&quot; width=&quot;500&quot; height=&quot;500&quot;&gt;&lt;/canvas&gt;    &lt;canvas      class=&quot;canvas&quot;      style=&quot;float:right&quot;      width=&quot;500&quot;      height=&quot;500&quot;    &gt;&lt;/canvas&gt;    &lt;div class=&quot;btnbox&quot; style=&quot;display: block;&quot;&gt;      &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;grey()&quot;&gt;灰度 Grey Effect&lt;/a&gt;      &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;black()&quot;&gt;黑白 black&amp;white Effect&lt;/a&gt;      &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;revers()&quot;&gt;反色 revers Effect&lt;/a&gt;      &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;Blur()&quot;&gt;模糊 blur Effect&lt;/a&gt;      &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;mosaice()&quot;&gt;马赛克 mosaice Effect&lt;/a&gt;    &lt;/div&gt;    &lt;script&gt;      var ctx1 = document.querySelectorAll(&quot;.canvas&quot;)[0].getContext(&quot;2d&quot;);      var ctx2 = document.querySelectorAll(&quot;.canvas&quot;)[1].getContext(&quot;2d&quot;);      var imageData;      var data;      var img = new Image();      img.src = &quot;../1.jpg&quot;;      img.onload = function() {        ctx1.drawImage(img, 0, 0, 500, 500);      };      function mosaice() {        var imgData = ctx1.getImageData(0, 0, 500, 500);        var data = imgData.data;        var tmpimgData = ctx1.getImageData(0, 0, 500, 500);        var tmpData = tmpimgData.data;        var size = 16,          totalnum = Math.pow(size, 2);        for (var i = 0; i &lt; ctx2.canvas.height; i += size) {          for (var j = 0; j &lt; ctx2.canvas.width; j += size) {            var totalr = 0,              totalg = 0,              totalb = 0;            for (var dx = 0; dx &lt; size; dx++) {              for (var dy = 0; dy &lt; size; dy++) {                let x = i + dx,                  y = j + dy;                let p = x * ctx2.canvas.width + y;                totalr += tmpData[p * 4 + 0];                totalg += tmpData[p * 4 + 1];                totalb += tmpData[p * 4 + 2];              }            }            var p = i * ctx2.canvas.width + j;            var resr = totalr / totalnum;            var resg = totalg / totalnum;            var resb = totalb / totalnum;            for (var dx = 0; dx &lt; size; dx++) {              for (var dy = 0; dy &lt; size; dy++) {                var x = dx + i,                  y = dy + j;                var p = x * ctx2.canvas.width + y;                data[4 * p + 0] = resr;                data[4 * p + 1] = resg;                data[4 * p + 2] = resb;              }            }          }        }        ctx2.putImageData(imgData, 0, 0, 0, 0, 500, 500);      }      function revers() {        imageData = ctx1.getImageData(0, 0, 500, 500);        data = imageData.data;        for (let i = 0; i &lt; ctx2.canvas.width * ctx2.canvas.height; i++) {          let r = 255 - data[4 * i + 0],            g = 255 - data[4 * i + 1],            b = 255 - data[4 * i + 2];          data[4 * i + 0] = r;          data[4 * i + 1] = g;          data[4 * i + 2] = b;        }        ctx2.putImageData(imageData, 0, 0, 0, 0, 500, 500);      }      function Blur() {        var imgData = ctx1.getImageData(0, 0, 500, 500);        var data = imgData.data;        var tmpimgData = ctx1.getImageData(0, 0, 500, 500);        var tmpData = tmpimgData.data;        var blurR = 2,          totalnum = Math.pow(2 * blurR + 1, 2);        for (var i = blurR; i &lt; ctx2.canvas.height - blurR; i++) {          for (var j = blurR; j &lt; ctx2.canvas.width - blurR; j++) {            var totalr = 0,              totalg = 0,              totalb = 0;            for (var dx = -blurR; dx &lt;= blurR; dx++) {              for (var dy = -blurR; dy &lt;= blurR; dy++) {                let x = i + dx,                  y = j + dy;                let p = x * ctx2.canvas.width + y;                totalr += tmpData[p * 4 + 0];                totalg += tmpData[p * 4 + 1];                totalb += tmpData[p * 4 + 2];              }            }            var p = i * ctx2.canvas.width + j;            data[p * 4 + 0] = totalr / totalnum;            data[p * 4 + 1] = totalg / totalnum;            data[p * 4 + 2] = totalb / totalnum;          }        }        ctx2.putImageData(imgData, 0, 0, 0, 0, 500, 500);      }      function grey() {        imageData = ctx1.getImageData(0, 0, 500, 500);        data = imageData.data;        for (let i = 0; i &lt; ctx2.canvas.width * ctx2.canvas.height; i++) {          let r = data[4 * i + 0],            g = data[4 * i + 1],            b = data[4 * i + 2];          let grey = r * 0.3 + g * 0.59 + b * 0.11;          data[4 * i + 0] = grey;          data[4 * i + 1] = grey;          data[4 * i + 2] = grey;        }        ctx2.putImageData(imageData, 0, 0, 0, 0, 500, 500);      }      function black() {        imageData = ctx1.getImageData(0, 0, 500, 500);        data = imageData.data;        for (let i = 0; i &lt; ctx2.canvas.width * ctx2.canvas.height; i++) {          let r = data[4 * i + 0],            g = data[4 * i + 1],            b = data[4 * i + 2];          let grey = r * 0.3 + g * 0.59 + b * 0.11;          if (grey &gt; 255 / 2) {            v = 255;          } else {            v = 0;          }          data[4 * i + 0] = v;          data[4 * i + 1] = v;          data[4 * i + 2] = v;        }        ctx2.putImageData(imageData, 0, 0, 0, 0, 500, 500);      }    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="案例：颜色板"><a href="#案例：颜色板" class="headerlink" title="案例：颜色板"></a>案例：颜色板</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;      body,      html {        /* background: black; */        height: 2000px;      }      .btnbox &gt; a {        float: left;        margin: 10px 20px;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;canvas class=&quot;canvas&quot; style=&quot;float:left&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;    &lt;div class=&quot;btnbox&quot; style=&quot;display: block;&quot;&gt;&lt;/div&gt;    &lt;script&gt;      var ctx = document.querySelectorAll(&quot;.canvas&quot;)[0].getContext(&quot;2d&quot;);      var img = ctx.createImageData(800, 800);      var data = img.data;      for (var i = 0; i &lt; ctx.canvas.height; i++) {        for (var j = 0; j &lt; ctx.canvas.width; j++) {          var p = i * ctx.canvas.width + j;          data[4 * p + 0] = parseInt(            Math.pow(Math.cos(Math.atan2(j - 400, i - 400) / 2), 2) * 255          );          data[4 * p + 1] = parseInt(            Math.pow(              Math.cos(                Math.atan2(j - 400, i - 400) / 2 - (2 * Math.acos(-1)) / 3              ),              2            ) * 255          );          data[4 * p + 2] = parseInt(            Math.pow(              Math.cos(                Math.atan2(j - 400, i - 400) / 2 + (2 * Math.acos(-1)) / 3              ),              2            ) * 255          );          data[4 * p + 3] = 255;        }      }      ctx.putImageData(img, 0, 0, 0, 0, 800, 800);    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h1 id="什么是Ajax？"><a href="#什么是Ajax？" class="headerlink" title="什么是Ajax？"></a>什么是Ajax？</h1><blockquote><p>Ajax是一种可以与服务器交换数据并更新部分页面内容，同时可以在不让整个网页重新加载的情况下更新网页的一种技术</p></blockquote><h2 id="Ajax请求过程："><a href="#Ajax请求过程：" class="headerlink" title="Ajax请求过程："></a><strong>Ajax请求过程：</strong></h2><h5 id="1：创建一个异步对象"><a href="#1：创建一个异步对象" class="headerlink" title="1：创建一个异步对象"></a>1：创建一个异步对象</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2：设置请求方式和请求地址"><a href="#2：设置请求方式和请求地址" class="headerlink" title="2：设置请求方式和请求地址"></a>2：设置请求方式和请求地址</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*    参数顺序，描述    （1）method：请求的类型；GET 或 POST    （2）url：文件在服务器上的位置    （3）async：true（异步）或 false（同步） （一般为true，因ajax的精髓就是异步）*/</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET||POST"</span><span class="token punctuation">,</span><span class="token string">"url 如（./ajax.php）"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注意点：url中不能出现中文，只能数字、字母、ASCII码、下划线</span><span class="token comment" spellcheck="true">//  GET方式的 url格式：./ajax.php?t=123&amp;321......</span><span class="token comment" spellcheck="true">//如果出现中文也可以用encodeURIComponent方法转换</span><span class="token comment" spellcheck="true">//  POST方式的url不能在后面接字符串传递参数</span>xmlHttp<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//setRequestHeader 必须放在设置请求与发送请求之间</span><span class="token comment" spellcheck="true">//下一步在发送请求send中传递参数即可</span>xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"name=xuyuxin&amp;age=18"</span><span class="token punctuation">)</span></code></pre><h5 id="3：发送请求"><a href="#3：发送请求" class="headerlink" title="3：发送请求"></a>3：发送请求</h5><pre class=" language-javascript"><code class="language-javascript"> xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4-监听状态变化"><a href="#4-监听状态变化" class="headerlink" title="4.监听状态变化"></a>4.监听状态变化</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//监听事件： onreadystatechange 每当请求状态发生变化，就会触发此函数</span>xmlHttp<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ev2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    readyState 状态变化有以下5种    0：请求未初始化    1：服务器连接已建立    2：请求已接收    3：请求处理中    4：请求已完成，且响应已就绪*/</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//请求已完成，并不代表请求成功，因此还需判断是否请求成功</span>        <span class="token comment" spellcheck="true">//status是专门判断请求是否成功的状态码</span>        <span class="token comment" spellcheck="true">// 状态码大于或等于200并且不能超过300以上，300以上除了304以外全都是请求失败</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xmlHttp<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span> <span class="token operator">||</span> xmlHttp<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="http://baike.baidu.com/link?url=LarF3FUBzX-IU1BMZbwbxaC8oJPUSGOj3seQRNVSVbZ2F9A6BiE-Je0sxFwsQK8dFJkKH6VP_ghpK66p8C2Zvkdl9nABXBR8mIqZGJj_D59q6NJQwmw3GqjIx2bzAsEG" target="_blank" rel="noopener">http请求成功或失败状态码资料查询</a></p><h2 id="IE低版本浏览器兼容问题"><a href="#IE低版本浏览器兼容问题" class="headerlink" title="IE低版本浏览器兼容问题"></a>IE低版本浏览器兼容问题</h2><blockquote><p>由于在IE6-IE5以下不支持XMLHttpRequest这个属性，因此会产生错误，在低级浏览器中可以使用ActiveXObject来实现同样的效果</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>在IE低版本中ajax还有缓存的问题，解决这个问题，要url地址不断改变，不能为常量，即可解决</p></blockquote><pre class=" language-javascript"><code class="language-javascript">xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"ajax.php?"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span></code></pre><h2 id="解决兼容性通用方法"><a href="#解决兼容性通用方法" class="headerlink" title="解决兼容性通用方法"></a>解决兼容性通用方法</h2><blockquote><p>由于在Ajax中浏览器支持的属性不同，单一方案不能支持全部浏览器，有两种解决方案，因此可以把这两种方案合成一种，以便使用</p></blockquote><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRuquest<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>           <span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>    <span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> window<span class="token punctuation">.</span>XMLHttpRequest <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">new</span>                     <span class="token class-name">ActiveXOject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="封装Ajax"><a href="#封装Ajax" class="headerlink" title="封装Ajax"></a>封装Ajax</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {请求的类型}option.type * @param {发送请求的地址} option.url * @param {发送请求的数据}option.data * @param {超时时间} option.timeout * @param {请求成功后执行的函数*} option.sucess * @param {请求失败后执行的函数*} option.error */</span><span class="token keyword">function</span> <span class="token function">createAjax</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//0.把传入对象处理成字符串，服务器才可接收</span>  <span class="token keyword">var</span> toStringObj <span class="token operator">=</span> <span class="token function">objToString</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//1.创建ajax对象，并判断游览器支持那个属性</span>  <span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> window<span class="token punctuation">.</span>XMLHttpRequest    <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> timer<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token punctuation">.</span>type<span class="token punctuation">.</span>toloworCase <span class="token operator">===</span> <span class="token string">"get"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//2.设置请求方式和地址</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> option<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> toStringObj<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.发送请求</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.监听请求状态</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// POST请求方式</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>type<span class="token punctuation">,</span> option<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>      <span class="token string">"Content-type"</span><span class="token punctuation">,</span>      <span class="token string">"application/x-www-form-urlencoded"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>toStringObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  xmlHttp<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//请求完成，并不代表请求成功</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//判断请求是否成功</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xmlHttp<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span>        xmlHttp<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        option<span class="token punctuation">.</span><span class="token function">sucess</span><span class="token punctuation">(</span>xmlHttp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        option<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>xmlHttp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//判断外界是否传入超时时间</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>    timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//超时时间到后执行停止此次发送请求，默认为失败</span>      xmlHttp<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> option<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//把obj转为字符串</span><span class="token keyword">function</span> <span class="token function">objToString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//encodeURLComponent函数对，对象名和属性进行转换，以防出现url中不能出现的字符而出错</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用方式</span>    <span class="token function">createAjax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    data<span class="token punctuation">:</span><span class="token punctuation">{</span>                       name<span class="token punctuation">:</span> that<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    type<span class="token punctuation">:</span><span class="token string">"POST"</span><span class="token punctuation">,</span>                    timeout<span class="token punctuation">:</span><span class="token number">3000</span><span class="token punctuation">,</span>                    url<span class="token punctuation">:</span><span class="token string">"./ajaxLesson2.php"</span><span class="token punctuation">,</span>                    sucess<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">{</span>                         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    error<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>；</code></pre><h2 id="获取服务器响应数据方式"><a href="#获取服务器响应数据方式" class="headerlink" title="获取服务器响应数据方式"></a>获取服务器响应数据方式</h2><blockquote><ol><li>responseText 可以获取服务器以字符串形式返回的数据</li><li>responseXML 可以获取服务器以XML形式返回的数据</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//调用方式</span><span class="token comment" spellcheck="true">// ajax对象.要获取的方式</span>xmlHttp<span class="token punctuation">.</span>responseText</code></pre><h2 id="通过XML传输数据"><a href="#通过XML传输数据" class="headerlink" title="通过XML传输数据"></a>通过XML传输数据</h2><h4 id="XML数据基本格式"><a href="#XML数据基本格式" class="headerlink" title="XML数据基本格式"></a>XML数据基本格式</h4><p>​        1.开头前缀指定版本和编码（必要）</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span></code></pre><p>​        2.根目录（必要 和html标签一样要闭合）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><p>​        3.之后标签名不受限制，完整版</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nz</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>甜美女装<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>des</span><span class="token punctuation">></span></span>人见人爱,花间花开,甜美系列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>des</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span><span class="token punctuation">></span></span>images/1.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nz</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bb</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>奢华驴包<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>des</span><span class="token punctuation">></span></span>送女友,送情人,送学妹,一送一个准系列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>des</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span><span class="token punctuation">></span></span>images/2.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bb</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tx</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>键盘拖鞋<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>des</span><span class="token punctuation">></span></span>程序员专属拖鞋, 屌丝气息浓郁, 你值得拥有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>des</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span><span class="token punctuation">></span></span>images/3.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tx</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><h4 id="PHP基本XML配置格式"><a href="#PHP基本XML配置格式" class="headerlink" title="PHP基本XML配置格式"></a>PHP基本XML配置格式</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">//向客户端发送原始的 HTTP 报头。</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"content-type:text/xml;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//file_get_contents() 函数是用于将文件的内容读入到一个字符串中的首选方法。如果操作系统支持，还会使用    内存映射技术来增强性能。</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"xml文件地址如（./ajax.xml）"</span><span class="token punctuation">)</span>    <span class="token delimiter">?></span></code></pre><h4 id="Ajax获取XML数据格式"><a href="#Ajax获取XML数据格式" class="headerlink" title="Ajax获取XML数据格式"></a>Ajax获取XML数据格式</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//获取XML传输而来的数据要使用 responseXML方式获取</span><span class="token keyword">var</span> Data <span class="token operator">=</span> xml<span class="token punctuation">.</span>responseXML<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回的是一个document文档对象</span><span class="token comment" spellcheck="true">//接着使用javascript获取遍历DOM元素</span> <span class="token keyword">var</span> titleinfo <span class="token operator">=</span> Data<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">'>title'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> des <span class="token operator">=</span> Data<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">'>des'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> image <span class="token operator">=</span> Data<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">'>image'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后就可以对DOM里面存储的数据进行操作了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>des<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="通过JSON传输数据"><a href="#通过JSON传输数据" class="headerlink" title="通过JSON传输数据"></a>通过JSON传输数据</h2><blockquote><p><a href="https://baike.baidu.com/item/JSON/2462549?fr=aladdin" target="_blank" rel="noopener">JSON资料</a></p></blockquote><h4 id="JSON数据基本格式"><a href="#JSON数据基本格式" class="headerlink" title="JSON数据基本格式"></a>JSON数据基本格式</h4><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"nz"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"甜美女装"</span><span class="token punctuation">,</span>        <span class="token property">"des"</span><span class="token operator">:</span><span class="token string">"人见人爱,花间花开,甜美系列"</span><span class="token punctuation">,</span>        <span class="token property">"image"</span><span class="token operator">:</span><span class="token string">"./images/1.jpg"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"bb"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"奢华驴包"</span><span class="token punctuation">,</span>        <span class="token property">"des"</span><span class="token operator">:</span><span class="token string">"送女友,送情人,送学妹,一送一个准系列"</span><span class="token punctuation">,</span>        <span class="token property">"image"</span><span class="token operator">:</span><span class="token string">"./images/2.jpg"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"tx"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"键盘拖鞋"</span><span class="token punctuation">,</span>        <span class="token property">"des"</span><span class="token operator">:</span><span class="token string">"程序员专属拖鞋, 屌丝气息浓郁, 你值得拥有"</span><span class="token punctuation">,</span>        <span class="token property">"image"</span><span class="token operator">:</span><span class="token string">"./images/3.jpg"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>//在 JS 语言中，一切都是对象。因此，任何支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。但是对象和数组是比较特殊且常用的两种类型：//JSON 键/值对//JSON 键值对是用来保存 JS 对象的一种方式，和 JS 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 <span class="token string">""</span> 包裹，使用冒号 <span class="token operator">:</span> 分隔，然后紧接着值："<span class="token punctuation">{</span><span class="token property">"firstName"</span><span class="token operator">:</span> <span class="token string">"Json"</span><span class="token punctuation">}</span><span class="token string">"这很容易理解，等价于这条 JavaScript 语句：{firstName : "</span>Json"<span class="token punctuation">}</span>//JSON 与 JS 对象的关系//很多人搞不清楚 JSON 和 Js 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：//JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。//如<span class="token operator">:</span>var obj = <span class="token punctuation">{</span>a<span class="token operator">:</span> 'Hello'<span class="token punctuation">,</span> b<span class="token operator">:</span> 'World'<span class="token punctuation">}</span><span class="token punctuation">;</span> //这是一个对象，注意键名也是可以使用引号包裹的var json = '<span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token property">"b"</span><span class="token operator">:</span> <span class="token string">"World"</span><span class="token punctuation">}</span>'<span class="token punctuation">;</span> //这是一个 JSON 字符串，本质是一个字符串</code></pre><h4 id="JSON和JS对象互转"><a href="#JSON和JS对象互转" class="headerlink" title="JSON和JS对象互转"></a>JSON和JS对象互转</h4><pre class=" language-json"><code class="language-json">//要实现从JSON对象转换为JS字符串，使用 JSON.parse(<span class="token punctuation">)</span> 方法：var obj = JSON.parse('<span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token property">"b"</span><span class="token operator">:</span> <span class="token string">"World"</span><span class="token punctuation">}</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span> //结果是 <span class="token punctuation">{</span>a<span class="token operator">:</span> 'Hello'<span class="token punctuation">,</span> b<span class="token operator">:</span> 'World'<span class="token punctuation">}</span>//要实现从JS对象转换为JSON字符串，使用 JSON.stringify(<span class="token punctuation">)</span> 方法：var json = JSON.stringify(<span class="token punctuation">{</span>a<span class="token operator">:</span> 'Hello'<span class="token punctuation">,</span> b<span class="token operator">:</span> 'World'<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //结果是 '<span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token property">"b"</span><span class="token operator">:</span> <span class="token string">"World"</span><span class="token punctuation">}</span>'//当从服务器返回的数据不是标准json字符串时是无法使用parse的，那么可以试试用eval(<span class="token punctuation">)</span>强制转化和为js对象</code></pre><h4 id="非标准json转js对象"><a href="#非标准json转js对象" class="headerlink" title="非标准json转js对象"></a>非标准json转js对象</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//当从服务器返回的数据不是标准json字符串时是无法使用parse的，那么可以试试用eval()强制转化和为js对象</span><span class="token comment" spellcheck="true">//注意点： 转js对象必须加 "("+data+")"</span><span class="token keyword">var</span> Data <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token operator">+</span>data<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span></code></pre><h4 id="JSON兼容性问题"><a href="#JSON兼容性问题" class="headerlink" title="JSON兼容性问题"></a>JSON兼容性问题</h4><blockquote><p> 在低版本的IE中, 不可以使用原生的JSON.parse方法, 但是可以使用json2.js这个框架来兼容</p><p><a href="https://github.com/douglascrockford/JSON-js" target="_blank" rel="noopener">json2.js下载地址：</a></p></blockquote><h4 id="PHP基本JSON格式"><a href="#PHP基本JSON格式" class="headerlink" title="PHP基本JSON格式"></a>PHP基本JSON格式</h4><pre class=" language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">" JSON文件地址 如(./json.txt)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><blockquote><p>ajax的请求过程：ajax发送请求–浏览器–服务器</p><p>响应过程则是请求过程的颠倒</p><p>当ajax发送请求到浏览器，浏览器发送到服务器，处理并响应后，原路返回到浏览器，此时会验证其请求来源的域名跟发送请求时是否一样，是则过，否则会被浏览器截止并提示错误，这正是跨域所造成的，想要解决此问题，并不能从前端入手，应该从后端，只有在后端响应并返回后告诉浏览器是自己人即可。</p><p>那怎么告诉浏览器是自己人呢？ 只要设置其响应头部信息+（<strong>Access-Control-Allow-Origin</strong>：域名）告诉浏览器即可,允许多个、单个、全部 （*）。</p></blockquote><h3 id="PHP-方式"><a href="#PHP-方式" class="headerlink" title="PHP 方式"></a>PHP 方式</h3><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/*    1、允许单个域名访问*/</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin:(域名)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    2、允许多个域名访问*/</span>    <span class="token variable">$origin</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_ORIGIN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_ORIGIN'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$option</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token string">'域名1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">'域名2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$origin</span><span class="token punctuation">,</span><span class="token variable">$option</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin:$origin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    3、允许全部域名访问*/</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin:*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="node方式"><a href="#node方式" class="headerlink" title="node方式"></a>node方式</h3><pre><code>/*    1、允许单个域名访问*/    http.createServer(req,res)    {        res.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;（域名）&quot;);    }/*    2、允许多个域名访问*/        let option = [        (域名1),        (域名2),        ...    ];    http.createServer(req,res)    {      let {origin} =  req.headers;      let ori = option[&quot;origin&quot;] ? option[&quot;origin&quot;] ： null；      res.setHeader(&quot;Access-Control-Allow-Origin&quot;,ori);    }/*    3、允许全部域名访问*/    http.createServer(req,res)    {        res.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;*&quot;);    }</code></pre><h2 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h2><blockquote><p>FormData是ajax2.0新添加的功能，其作用是让表单也能异步发送</p></blockquote><h3 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//必须要new 一个FormData对象 参数是要应用的表单元素 </span><span class="token comment" spellcheck="true">//禁止表单默认行为</span><span class="token comment" spellcheck="true">//其请求方式、请求地址跟随表单元素</span><span class="token comment" spellcheck="true">//最后发送formdata对象即可</span><span class="token comment" spellcheck="true">//原生方式</span>         <span class="token keyword">let</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onsubmit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> formdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>method<span class="token punctuation">,</span>form<span class="token punctuation">.</span>action<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>formdata<span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span>          <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//jQuery方式 </span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"submit"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> formdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              url<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>action<span class="token punctuation">,</span>              type<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">,</span>              data<span class="token punctuation">:</span>formdata<span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//由于jq在发送请求时，会把请求数据自动处理为适合发送的数据格式，但是formdata对象本事就不用处理，系统识别会自动处理数据，如果被jq格式化后，数据就会出错，所以要关闭其数据格式化，以及发送的头部信息。</span>              processData<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>                  contentType<span class="token punctuation">:</span><span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果不使用表单提交，可以使用以下另门方式</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span> dir<span class="token operator">=</span><span class="token string">"ltr"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"div1"</span><span class="token operator">></span>      用户：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"user"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>      密码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> id<span class="token operator">=</span><span class="token string">"pass"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>      文件：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> id<span class="token operator">=</span><span class="token string">"f1"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>      <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"btn1"</span> type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"提交"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">let</span> oBtn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  oBtn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#pass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'f1'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#f1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token keyword">let</span> xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:8080/'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>formdata<span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><blockquote><p>fetch是官方用来解决原生js的ajax的繁杂步骤问题的一门新语法，大大简化了ajax操作，原理基于ajax</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// get txt</span> window<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> oBtn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      oBtn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.请求</span>        <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'data/1.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.解析</span>        <span class="token keyword">let</span> str<span class="token operator">=</span><span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//get json</span> window<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> oBtn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      oBtn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.请求</span>        <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'data/1.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.解析</span>        <span class="token keyword">let</span> json<span class="token operator">=</span><span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//get blod</span>window<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> oImg<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'img1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> oBtn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      oBtn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.请求</span>        <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'data/1.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.解析</span>        <span class="token keyword">let</span> data<span class="token operator">=</span><span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> url<span class="token operator">=</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        oImg<span class="token punctuation">.</span>src<span class="token operator">=</span>url<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中Buffer数据详解</title>
      <link href="/posts/bd7.html"/>
      <url>/posts/bd7.html</url>
      
        <content type="html"><![CDATA[<h1 id="元数据处理"><a href="#元数据处理" class="headerlink" title="元数据处理"></a>元数据处理</h1><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a><strong>序言</strong></h2><p>随着WebSocket、WebAudio、Ajax2等广泛应用，前端方面只要是处理大数据或者想提高数据处理性能，那一定是少不了 ArrayBuffer对象</p><p>同时在浏览器当中处理二进制数据的需求也在不断的增加，有时需要字节数组、8位、16位、32位整数型数组，所以对于JS中处理二进制迟早学习比较好</p><p>现今世界上几乎所有的计算机体系结构都是以字节（byte）为二进制数据的基本单位，所以二进制常常以字节数组的形式存在于程序当中</p><p>众所周知，JS是弱类型语言i，并且JS设计之初似乎根本没想过要处理二进制的东西，对于字节的概念可以说是非常非常的模糊。如果要表达字节数组，那么似乎只能用一个普通数组来表示</p><p>那么H5的诞生及标准的发布，对技术的革新起了非常大的作用，深入地研究H5，会渐渐发现，很多时候都会对二进制数据进行处理，结合JS的ArrayBuffer和 Typed Array去获取及处理音频数据、XHR2上传或下载二进制内容等等</p><h2 id="arrayBuffer"><a href="#arrayBuffer" class="headerlink" title="arrayBuffer"></a>arrayBuffer</h2><p><code>ArrayBuffer</code>表示二进制数据的原始缓冲区，该缓冲区用于存储各种类型化数组的数据。是最基础的原始数据容器，无法直接读取或写入， 需要通过其他方式来读写。 但可根据需要将其传递到类型化数组或 DataView 对象来解释原始缓冲区。</p><p>也就是说他是一个二进制数据的原始缓冲区，虽然 JavaScript 是弱类型语言，但是他本身是对数据的类型和大小都有限制的，我们<code>需要通过某种数据结构将缓冲区的内容有序的读取出来或写进去</code></p><pre class=" language-css"><code class="language-css">例如：Int<span class="token number">8</span>Array             <span class="token number">8</span>位有符号整数Uint<span class="token number">8</span>Array            <span class="token number">8</span>位无符号整数Uint<span class="token number">8</span>ClampedArray      同上，像素操作Int<span class="token number">16</span>Array            Uint<span class="token number">16</span>ArrayInt<span class="token number">32</span>ArrayUint<span class="token number">32</span>ArrayFloat<span class="token number">32</span>ArrayFloat<span class="token number">64</span>Array以上是Typed Array类型化数组，类型化数组类型表示可编制索引和操纵的 ArrayBuffer 对象 的各种视图。 所有数组类型的长度均固定。而DataView视图对象对数据的操作更加细致</code></pre><p><code>ArrayBuffer</code>是一个固定长度的字节序列，通过<code>new ArrayBuffer(length)</code>来得到一片空间，内部实现与数组应该是不一样（内存分配和布局与Array不一样），<code>ArrayBuffer</code>是连续内存，因此对于高密度的访问（如音频数据）操作而言它比JS中的Array速度会快很多</p><p><code>ArrayBuffer</code>是不能直接被访问的，因此需要借助Typed Array</p><p>Typed Array的背后是一个<code>ArrayBuffer</code>，也就是说，事实上的数据是存在<code>ArrayBuffer</code>里面的，而Typed Array只是给你提供了一个某种类型的读写接口</p><p>总结一句话:    Typed Array不直接存放任何数据，所有对Typed Array进行读写的操作，最终都会落实到它背后所持有的<code>ArrayBuffer</code>的身上。 <code>ArrayBuffer</code>才是真正的元始数据字节，而Typed Array只是一个操作窗口/操作视图（View）</p><h2 id="获取二进制数据"><a href="#获取二进制数据" class="headerlink" title="获取二进制数据"></a>获取二进制数据</h2><p>常见的在网页里获取二进制数据有三种:</p><blockquote><p>-[x] XMLHttpRequest2<br>-[x] File<br>-[x] Blob</p></blockquote><p>​    <strong>通过XMLHttpRequest 2</strong></p><p>​    <code>XHR2</code> 的接口跟 <code>XHR</code> 几乎是一样的，当制定<code>xhr.responseType = &#39;arraybuffer&#39;</code>以后，在成功获取数据的回调里就可以通过<code>xhr.response</code>来得到请求结果的<code>ArrayBuffer</code>了，然后就可以按照你的意愿来构造各种Typed Array进行访问。</p><p><code>responseType</code>还可以有<code>blob</code>取值，可以用<code>xhr.response</code>获得<a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="noopener">Blob</a>对象。</p><p>​    <strong>通过File和Blob</strong></p><p>​    在H5的表单File控件中，通过files对象来获取一个<code>FileList</code> ，此列表对象中的每一个都是files对象</p><p>​    也可以通过H5的拖拽drop事件捕获到files对象或blob对象</p><p>​    <code>File</code>继承了<code>Blob</code>，并提供了<code>name</code>  ， <code>lastModifiedDate</code>， <code>size</code> ，<code>type</code> 等基础元数据</p><p>​    <code>Blob</code> 与<code>ArrayBuffer</code>的区别是除了 原始字节 以外它还提供了mime type作为元数据</p><p>​    它们都可以借助 FileReader将<code>Blob</code>读取为更为实用的数据类型去使用</p><pre class=" language-css"><code class="language-css"><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">readAsBinaryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>readAsData<span class="token url">URL()</span><span class="token function">readAsText</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="各种类型"><a href="#各种类型" class="headerlink" title="各种类型"></a>各种类型</h2><p>上节课中，我们讲过在火狐下拖拽元素需要用setData函数设置键值对，同时用getData函数可以获取key的value值，那么IE定义了 text和url 这两种有效的数据类型，可以获取本网页上文本和图片路径</p><blockquote><p>e.dataTransfer.getData(‘url’)    获取 url</p></blockquote><blockquote><p>e.dataTransfer.getData(‘Text’)        获取文本</p></blockquote><p>H5对此也支持，并扩展了各种 <code>MIME</code> 类型，这两种类型会被映射为 ‘text/plain’和’text/uri-list’</p><p>所以可以兼容一下:</p><pre class=" language-css"><code class="language-css">兼容var dataTransfer = e<span class="token number">.</span>dataTransfer获取 URLvar url = dataTransfer<span class="token number">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span> || dataTransfer<span class="token number">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'text/uri-list'</span><span class="token punctuation">)</span>获取 文本var url = dataTransfer<span class="token number">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'Text'</span><span class="token punctuation">)</span> || dataTransfer<span class="token number">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'text/plain'</span><span class="token punctuation">)</span></code></pre><pre class=" language-css"><code class="language-css">MIME 类型MIME <span class="token punctuation">(</span>Multipurpose Internet Mail Extensions<span class="token punctuation">)</span> 是描述消息内容类型的因特网标准。MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。不同的应用程序支持不同的 MIME 类型。MIME 类型大约有<span class="token number">191</span>种类型，是的没错，<span class="token number">191</span>种^<span class="token number">.</span>^</code></pre><pre class=" language-css"><code class="language-css">Base<span class="token number">64</span> 类型Base<span class="token number">64</span>是网络上最常见的用于传输<span class="token number">8</span>Bit字节码的编码方式之一，Base<span class="token number">64</span>就是一种基于<span class="token number">64</span>个可打印字符来表示二进制数据的方法Base<span class="token number">64</span>编码是从二进制到字符的过程中，可用于在HTTP环境下传递较长的标识信息</code></pre><p><strong>FileReader文件对象</strong></p><pre class=" language-css"><code class="language-css">FileReader API 用于读取文件，即把文件内容读入内存，是一种异步文件读取机制，它的参数是 File 对象或 Blob 对象。对于不同类型的文件，FileReader 提供不同的方法读取文件。</code></pre><pre class=" language-css"><code class="language-css">创建读取文件的对象var reader = new <span class="token function">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    readAsData<span class="token url">URL(Blob|File)</span> 读取文件并将文件以数据URI的形式保存在result属性中，返回一个基于 Base<span class="token number">64</span> 编码的 data-uri 对象reader<span class="token number">.</span>readAsData<span class="token url">URL(files[0])</span><span class="token function">readAsText</span><span class="token punctuation">(</span>Blob|File, opt_encoding<span class="token punctuation">)</span>返回文本字符串。默认情况下，文本编码格式是 UTF-<span class="token number">8</span>，可以通过可选的格式参数，指定其他编码格式的文本以纯文本形式读取文件，将读取到的文本保存在result属性中，第二个参数用于指定编码类型，可选的reader<span class="token number">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span> files[<span class="token number">0</span>],encoding <span class="token punctuation">)</span><span class="token function">readAsBinaryString</span><span class="token punctuation">(</span>Blob|File<span class="token punctuation">)</span>    IE可能不支持返回二进制字符串，该字符串每个字节包含一个 <span class="token number">0</span> 到 <span class="token number">255</span> 之间的整数。（已废弃）读取文件并将一个字符保存在result属性中，字符串的每个字符表示一字节reader<span class="token number">.</span><span class="token function">readAsBinaryString</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>Blob|File<span class="token punctuation">)</span>    IE可能不支持返回一个 ArrayBuffer 对象读取文件并将一个包含文件内容的ArrayBuffer保存在result属性中reader<span class="token number">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span></code></pre><h2 id="具体用法"><a href="#具体用法" class="headerlink" title="具体用法"></a>具体用法</h2><p><strong>FileList</strong> 对象 </p><p>​        当用户通过 <strong><em>file 控件</em></strong> 选取文件后，这个控件的 this.files 属性值就是 FileList 对象。是个<strong><em>类数组</em></strong>，带上multiple 属性用户可选取多个文件，否则只能选择一个元素。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">'file'</span> multiple id<span class="token operator">=</span><span class="token string">'oInput'</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    oInput<span class="token punctuation">.</span>onchange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>​        拖拽也可以获取  FileList 对象</p><pre class=" language-js"><code class="language-js">oInput<span class="token punctuation">.</span>ondrop <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> files <span class="token operator">=</span> e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>​        <em>在表单选择文件或者拖拽文件中，用户通过事件触发，只能被动地读取FileList 文件列表</em></p><p><strong>Blob</strong> 对象 </p><p>​        file对象的父类型是Blob对象， Blob对象代表了一段二进制数据，提供了一系列操作接口</p><p>​        生成 Blob 对象有两种方法：</p><blockquote><ul><li><input checked="" disabled="" type="checkbox"> 使用 Blob 构造函数</li><li><input checked="" disabled="" type="checkbox"> 另一种是对现有的 Blob 对象使用 slice 方法切出一部分</li></ul></blockquote><pre class=" language-js"><code class="language-js">Blob 构造函数，接受两个参数。第一个参数是一个包含实际数据的数组第二个参数是数据的类型这两个参数都不是必需的<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">]</span><span class="token keyword">var</span> Blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"type"</span> <span class="token punctuation">:</span> <span class="token string">"text/xml"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Blob<span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js">Blob 对象的 slice 方法，将二进制数据按照字节分块，返回一个新的 Blob 对象<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">]</span><span class="token keyword">var</span> Blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"type"</span> <span class="token punctuation">:</span> <span class="token string">"text/xml"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> newBlob <span class="token operator">=</span> Blob<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用在分片文件 ，后台接收把这些片段检验并组合一个文件</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newBlob<span class="token punctuation">)</span>Blob 对象有两个只读属性：size：二进制数据的大小，单位为字节。（文件上传时可以在前端判断文件大小是否合适）type：二进制数据的 MIME 类型，全部为小写，如果类型未知，则该值为空字符串。（文件上传时可以在前端判断文件类型是否合适）gbk编码：    数字字母 一字节 1KB<span class="token operator">=</span> <span class="token number">1024</span>字节 一中文汉字是 <span class="token number">2</span>字节UTF<span class="token number">-8</span>编码： 数字字母 一字节 1KB<span class="token operator">=</span> <span class="token number">1024</span>字节 一个中文汉字是 <span class="token number">3</span>字节</code></pre><p>​    <strong>Silce</strong> <em>读取部分内容</em></p><p>​        有时候我们读取一部分而不是全部内容，Filereader对象支持一个slice( )方法，在火狐中用mozSlice( )，在chrome中webkitSilde( )</p><pre class=" language-css"><code class="language-css">    > <span class="token function">silce</span><span class="token punctuation">(</span> start,end <span class="token punctuation">)</span>    >    > start 开始索引，默认为<span class="token number">0</span>    >    > end    截取结束索引（不包括end）    > contentType    新Blob的MIME类型，默认为空字符串</code></pre><p>​        这个方法返回一个Blob实例，Blog是File类型的父类型，Blog类型有一个size属性和一个type属性，它也支持slice方法，以便进一步切割数据，通过FileReader也可以从Blob中读取数据</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">blogSlice</span><span class="token punctuation">(</span> blob<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> blog<span class="token punctuation">.</span>slice <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> blob<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> blob<span class="token punctuation">.</span>webkitSlice <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> blob<span class="token punctuation">.</span><span class="token function">webkitSlice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> blob<span class="token punctuation">.</span>mozSlice <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> blob<span class="token punctuation">.</span><span class="token function">mozSlice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span>             <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    blob类型读取FileReader的20B内容 </p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token function">blogSlice</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span>reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span> blob <span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span> blob <span class="token punctuation">)</span><span class="token punctuation">{</span>       reader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        box<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'no data'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>​    只读取文件的一部分可以节省时间，非常适合只关注数据中某个特定部分（如文件文件）的情况</p><p>​    <strong>对象URL</strong>    </p><p>​        对象URL也被称为 blob URL，指的是引用保存在File或Blob中数据的URL，使用对象URL的好处是没必要把内容读取到js中，而直接使用文件内容，能生成一个链接，例如 Img的src = URL</p><p>​        创建对象URL，用 window.URL.createObjectURL( blob )方法，并传入flle或Blob对象，对二进制数据生成一个 临时的URL，这个 URL 可以放置于任何通常可以放置 URL 的地方，比如 img 标签的 src 属性，出于一些特殊的需要，也可以使URL失效，调用 URL.revokeObjectURL( url ) 方法，使 URL 失效</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createObject</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span> window<span class="token punctuation">.</span>URL <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> window<span class="token punctuation">.</span>webkitURL <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> window<span class="token punctuation">.</span>webkitURL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">null</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    createObject函数的返回值是一个字符串，指向一块<strong><em>内存地址</em></strong>。因为这个字符串是URL，所 以在DOM中也能使用，例如下用法 </p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span> url <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token regex">/image/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>         box<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;img src="'</span><span class="token operator">+</span>url<span class="token operator">+</span><span class="token string">'" />'</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'no img'</span> <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'no data'</span> <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>​    直接把对象URL放在img标签中，就省去了把数据先读取js中，另一方面img标签则会找到相应的内存地址，直接读取数据并将图像显示到页面中</p>]]></content>
      
      
      <categories>
          
          <category> Front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Buffer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebAudio API</title>
      <link href="/posts/3a3a.html"/>
      <url>/posts/3a3a.html</url>
      
        <content type="html"><![CDATA[<h1 id="webAudio-API"><a href="#webAudio-API" class="headerlink" title="webAudio  API"></a>webAudio  API</h1><blockquote><p>webAudio API接口可以用来实现音乐可视化、音频剪辑、修声、语音、去声等等强大的操作</p></blockquote><p>webAudioAPI接口关系图：</p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5d50eef100016c9212800720.jpg" alt=""></p><h2 id="AudioContext"><a href="#AudioContext" class="headerlink" title="AudioContext"></a>AudioContext</h2><blockquote><p>AudioContext是所有音频操作的前提，一个类似Canvas的ctx的上下文对象</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5d50eb23000143f212800720.jpg" alt=""></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>AudioContext <span class="token operator">||</span>  window<span class="token punctuation">.</span>webkitAudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>mozAudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>msAudioContext<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//由于API兼容性问题，需要在创建时加上后缀</span></code></pre><h2 id="AudioBufferSourceNode"><a href="#AudioBufferSourceNode" class="headerlink" title="AudioBufferSourceNode"></a>AudioBufferSourceNode</h2><blockquote><h3 id="创建音频源-方法（1）"><a href="#创建音频源-方法（1）" class="headerlink" title="创建音频源    方法（1）"></a>创建音频源    方法（1）</h3><p>这种方式是通过请求方式播放音乐</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5d50eea80001ad1a12800720.jpg" alt=""></p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>AudioContext <span class="token operator">||</span>  window<span class="token punctuation">.</span>webkitAudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>mozAudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>msAudioContext<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'./Kalimba.mp3'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过 fetch请求本地文件，返回样式设置为arraybuffer</span>        <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">{</span>            responseType<span class="token punctuation">:</span><span class="token string">'arraybuffer'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//将返回的数据转成arrayBuffer数据，并返回</span>          <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使用ac.decodeAudioData(arrayBuffer, succ(buffer), err)方法音频解码，获取成功后调用第一个回调并返回buffer解码数据，失败则调用最后个回调</span>            ac<span class="token punctuation">.</span><span class="token function">decodeAudioData</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//创建bufferSource</span>                <span class="token keyword">let</span> BufferSource <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">createBufferSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将返回的数据给它</span>                BufferSource<span class="token punctuation">.</span>buffer <span class="token operator">=</span> buffer<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//直接连接音频聚集地</span>                BufferSource<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>ac<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//开始播放</span>                BufferSource<span class="token punctuation">[</span>BufferSource<span class="token punctuation">.</span>start <span class="token operator">?</span> <span class="token string">'start'</span> <span class="token punctuation">:</span> <span class="token string">'noteOn'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="MediaElementAudioSourceNode"><a href="#MediaElementAudioSourceNode" class="headerlink" title="MediaElementAudioSourceNode"></a>MediaElementAudioSourceNode</h3><blockquote><p><strong>创建音频源  方法（2）</strong></p><p>这种方式是通过 DOM元素 播放音乐</p></blockquote><pre class=" language-js"><code class="language-js">    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"播放"</span> onclick<span class="token operator">=</span><span class="token string">'music.play()'</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">//点击播放音乐   </span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"停止"</span> onclick<span class="token operator">=</span><span class="token string">"music.pause()"</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//点击停止音乐</span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">var</span> ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>AudioContext <span class="token operator">||</span>  window<span class="token punctuation">.</span>webkitAudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>mozAudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>msAudioContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建音乐DOM元素</span>        <span class="token keyword">let</span> music <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span><span class="token string">'./Kalimba.mp3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过 DOM元素创建音频源</span>        <span class="token keyword">let</span> source <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">createMediaElementSource</span><span class="token punctuation">(</span>music<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//直接连接音频聚集地</span>        source<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>ac<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="使用input-type-file-创建-（可以本地获取）"><a href="#使用input-type-file-创建-（可以本地获取）" class="headerlink" title="使用input[type=file]创建 （可以本地获取）"></a>使用input[type=file]创建 （可以本地获取）</h3><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> audioCtx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">window<span class="token punctuation">.</span>AudioContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> audioInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"uploader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//HTML语句：&lt;input type="file" id="uploader" /></span>      audioInput<span class="token punctuation">.</span>onchange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//文件长度不为0则真的选中了文件，因为用户点击取消也会触发onchange事件。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>audioInput<span class="token punctuation">.</span>files<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          files <span class="token operator">=</span> audioInput<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//得到用户选取的文件 //文件选定之后，马上用FileReader进行读入</span>          fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          fr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> fileResult <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件读入完成，进行解码</span>            audioCtx<span class="token punctuation">.</span><span class="token function">decodeAudioData</span><span class="token punctuation">(</span>              fileResult<span class="token punctuation">,</span>              <span class="token keyword">function</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> source <span class="token operator">=</span> audioCtx<span class="token punctuation">.</span><span class="token function">createBufferSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                source<span class="token punctuation">.</span>buffer <span class="token operator">=</span> buffer<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将解码出来的数据放入source中 //转到播放和分析环节</span>                source<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>audioCtx<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>                source<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"!Fail to decode the file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解码出错</span>              <span class="token punctuation">}</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>          fr<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"!Fail to read the file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件读入出错</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>          fr<span class="token punctuation">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//同样的，ArrayBuffer方式读取</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="GainNode"><a href="#GainNode" class="headerlink" title="GainNode"></a>GainNode</h2><blockquote><p>gain是在音乐播放之前处理声音大小的中间件</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5d50efb100011b9612800718.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/gain.PNG" alt=""></p><p>这里使用DOM元素方式来演示 ， 请求方式的设置也和它一样</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"播放"</span> onclick<span class="token operator">=</span><span class="token string">'music.play()'</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">//点击播放音乐   </span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"停止"</span> onclick<span class="token operator">=</span><span class="token string">"music.pause()"</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//点击停止音乐</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"range"</span> max<span class="token operator">=</span><span class="token string">"100"</span> min<span class="token operator">=</span><span class="token string">"0"</span> value<span class="token operator">=</span><span class="token string">"60"</span> oninput<span class="token operator">=</span><span class="token string">"setGain(this)"</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//控制音乐播放声音</span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">var</span> ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>AudioContext <span class="token operator">||</span>  window<span class="token punctuation">.</span>webkitAudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>mozAudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>msAudioContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建音乐DOM元素</span>        <span class="token keyword">let</span> music <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span><span class="token string">'./Kalimba.mp3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过 DOM元素创建音频源</span>        <span class="token keyword">let</span> source <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">createMediaElementSource</span><span class="token punctuation">(</span>music<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Gain连接destination</span>        <span class="token keyword">let</span> gain <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">createGain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gain<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>ac<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//必须连接Gain ， 不再是连接destination了，否则音频没有经过gain处理，效果不会生效</span>        source<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>gain<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置gain.gain.value 的值，跟随input的value改变，实现改变声音大小</span>        <span class="token keyword">function</span> <span class="token function">setGain</span><span class="token punctuation">(</span>that<span class="token punctuation">)</span>        <span class="token punctuation">{</span>               gain<span class="token punctuation">.</span>gain<span class="token punctuation">.</span>value <span class="token operator">=</span> that<span class="token punctuation">.</span>value<span class="token operator">/</span>that<span class="token punctuation">.</span>max<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="analyserNode"><a href="#analyserNode" class="headerlink" title="analyserNode"></a>analyserNode</h2><blockquote><p>这个节点可以实现音频的可视化，是一个可视化中必不可少的重要步骤</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/JingHong0202/jinghong0202.github.io@v0.1.0/loading.gif" data-original="https://cdn.jsdelivr.net/gh/JingHong0202/blog_images/images/5d50eff8000127e612800718.jpg" alt=""></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建Analyser</span><span class="token keyword">var</span> analyser <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">createAnalyser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置fftSize大小</span>analyser<span class="token punctuation">.</span>fftSize <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//链接destination Gain节点，随之Gain节点到终点去</span>analyser<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>gain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建Uint8Array数据，并运用frequencyBinCount 来获取fft的一半</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>analyser<span class="token punctuation">.</span>frequencyBinCount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//然后使用getByFrequencyData来获取范围频域</span>analyser<span class="token punctuation">.</span><span class="token function">getByteFrequencyData</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后配合Canvas和requestAnimationFrame(callback)动画函数来实现可视化;</span></code></pre><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>      <span class="token keyword">var</span> width <span class="token operator">=</span> ctx<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span>        height <span class="token operator">=</span> ctx<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>height<span class="token punctuation">;</span>      window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>        width <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>        <span class="token keyword">let</span> line <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">createLinearGradient</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>        line<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        line<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        line<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> line<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> line <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">createLinearGradient</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>      line<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      line<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      line<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> line<span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> w <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span>            w <span class="token operator">*</span> i<span class="token punctuation">,</span>            height <span class="token operator">-</span> <span class="token punctuation">(</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">*</span> height<span class="token punctuation">,</span>            <span class="token punctuation">(</span>width <span class="token operator">/</span> Data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.5</span><span class="token punctuation">,</span>            Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">var</span> ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>AudioContext <span class="token operator">||</span>        window<span class="token punctuation">.</span>webkitAudioContext <span class="token operator">||</span>        window<span class="token punctuation">.</span>mozAudioContext <span class="token operator">||</span>        window<span class="token punctuation">.</span>msAudioContext<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建gain 来控制声音大小</span>      <span class="token keyword">let</span> gain <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">createGain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//链接音频终点</span>      gain<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>ac<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建analyser 来实现可视化</span>      <span class="token keyword">let</span> analyser <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">createAnalyser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      analyser<span class="token punctuation">.</span>fftSize <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//链接gain</span>      analyser<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>gain<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取音乐数据</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"./music/Kalimba.mp3"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        responseType<span class="token punctuation">:</span> <span class="token string">"arraybuffer"</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          ac<span class="token punctuation">.</span><span class="token function">decodeAudioData</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> buffer <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> bufferSource <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">createBufferSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferSource<span class="token punctuation">.</span>buffer <span class="token operator">=</span> buffer<span class="token punctuation">;</span>            bufferSource<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>analyser<span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferSource<span class="token punctuation">[</span>bufferSource<span class="token punctuation">.</span>start <span class="token operator">?</span> <span class="token string">"start"</span> <span class="token punctuation">:</span> <span class="token string">"noteOn"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建数据</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>analyser<span class="token punctuation">.</span>frequencyBinCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解决各浏览器的兼容性问题</span>        requestAnimationFrame <span class="token operator">=</span>          window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span>          window<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span>          window<span class="token punctuation">.</span>mozRequestAnimationFrame<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建动画函数</span>        <span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//获取频域</span>          analyser<span class="token punctuation">.</span><span class="token function">getByteFrequencyData</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">draw</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//循环</span>          <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//启动动画函数</span>        <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">setGain</span><span class="token punctuation">(</span>that<span class="token punctuation">)</span> <span class="token punctuation">{</span>        gain<span class="token punctuation">.</span>gain<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">+</span>that<span class="token punctuation">.</span>value <span class="token operator">/</span> <span class="token operator">+</span>that<span class="token punctuation">.</span>max<span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> webAudio API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/posts/921d.html"/>
      <url>/posts/921d.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Ajax？"><a href="#什么是Ajax？" class="headerlink" title="什么是Ajax？"></a>什么是Ajax？</h1><blockquote><p>Ajax是一种可以与服务器交换数据并更新部分页面内容，同时可以在不让整个网页重新加载的情况下更新网页的一种技术</p></blockquote><h2 id="Ajax请求过程："><a href="#Ajax请求过程：" class="headerlink" title="Ajax请求过程："></a><strong>Ajax请求过程：</strong></h2><h5 id="1：创建一个异步对象"><a href="#1：创建一个异步对象" class="headerlink" title="1：创建一个异步对象"></a>1：创建一个异步对象</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2：设置请求方式和请求地址"><a href="#2：设置请求方式和请求地址" class="headerlink" title="2：设置请求方式和请求地址"></a>2：设置请求方式和请求地址</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*    参数顺序，描述    （1）method：请求的类型；GET 或 POST    （2）url：文件在服务器上的位置    （3）async：true（异步）或 false（同步） （一般为true，因ajax的精髓就是异步）*/</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET||POST"</span><span class="token punctuation">,</span><span class="token string">"url 如（./ajax.php）"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注意点：url中不能出现中文，只能数字、字母、ASCII码、下划线</span><span class="token comment" spellcheck="true">//  GET方式的 url格式：./ajax.php?t=123&amp;321......</span><span class="token comment" spellcheck="true">//如果出现中文也可以用encodeURIComponent方法转换</span><span class="token comment" spellcheck="true">//  POST方式的url不能在后面接字符串传递参数</span>xmlHttp<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//setRequestHeader 必须放在设置请求与发送请求之间</span><span class="token comment" spellcheck="true">//下一步在发送请求send中传递参数即可</span>xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"name=xuyuxin&amp;age=18"</span><span class="token punctuation">)</span></code></pre><h5 id="3：发送请求"><a href="#3：发送请求" class="headerlink" title="3：发送请求"></a>3：发送请求</h5><pre class=" language-javascript"><code class="language-javascript"> xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4-监听状态变化"><a href="#4-监听状态变化" class="headerlink" title="4.监听状态变化"></a>4.监听状态变化</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//监听事件： onreadystatechange 每当请求状态发生变化，就会触发此函数</span>xmlHttp<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ev2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    readyState 状态变化有以下5种    0：请求未初始化    1：服务器连接已建立    2：请求已接收    3：请求处理中    4：请求已完成，且响应已就绪*/</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//请求已完成，并不代表请求成功，因此还需判断是否请求成功</span>        <span class="token comment" spellcheck="true">//status是专门判断请求是否成功的状态码</span>        <span class="token comment" spellcheck="true">// 状态码大于或等于200并且不能超过300以上，300以上除了304以外全都是请求失败</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xmlHttp<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span> <span class="token operator">||</span> xmlHttp<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="http://baike.baidu.com/link?url=LarF3FUBzX-IU1BMZbwbxaC8oJPUSGOj3seQRNVSVbZ2F9A6BiE-Je0sxFwsQK8dFJkKH6VP_ghpK66p8C2Zvkdl9nABXBR8mIqZGJj_D59q6NJQwmw3GqjIx2bzAsEG" target="_blank" rel="noopener">http请求成功或失败状态码资料查询</a></p><h2 id="IE低版本浏览器兼容问题"><a href="#IE低版本浏览器兼容问题" class="headerlink" title="IE低版本浏览器兼容问题"></a>IE低版本浏览器兼容问题</h2><blockquote><p>由于在IE6-IE5以下不支持XMLHttpRequest这个属性，因此会产生错误，在低级浏览器中可以使用ActiveXObject来实现同样的效果</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>在IE低版本中ajax还有缓存的问题，解决这个问题，要url地址不断改变，不能为常量，即可解决</p></blockquote><pre class=" language-javascript"><code class="language-javascript">xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"ajax.php?"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span></code></pre><h2 id="解决兼容性通用方法"><a href="#解决兼容性通用方法" class="headerlink" title="解决兼容性通用方法"></a>解决兼容性通用方法</h2><blockquote><p>由于在Ajax中浏览器支持的属性不同，单一方案不能支持全部浏览器，有两种解决方案，因此可以把这两种方案合成一种，以便使用</p></blockquote><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRuquest<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>           <span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>    <span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> window<span class="token punctuation">.</span>XMLHttpRequest <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">new</span>                     <span class="token class-name">ActiveXOject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="封装Ajax"><a href="#封装Ajax" class="headerlink" title="封装Ajax"></a>封装Ajax</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {请求的类型}option.type * @param {发送请求的地址} option.url * @param {发送请求的数据}option.data * @param {超时时间} option.timeout * @param {请求成功后执行的函数*} option.sucess * @param {请求失败后执行的函数*} option.error */</span><span class="token keyword">function</span> <span class="token function">createAjax</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//0.把传入对象处理成字符串，服务器才可接收</span>  <span class="token keyword">var</span> toStringObj <span class="token operator">=</span> <span class="token function">objToString</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//1.创建ajax对象，并判断游览器支持那个属性</span>  <span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> window<span class="token punctuation">.</span>XMLHttpRequest    <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> timer<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token punctuation">.</span>type<span class="token punctuation">.</span>toloworCase <span class="token operator">===</span> <span class="token string">"get"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//2.设置请求方式和地址</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> option<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> toStringObj<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.发送请求</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.监听请求状态</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// POST请求方式</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>type<span class="token punctuation">,</span> option<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>      <span class="token string">"Content-type"</span><span class="token punctuation">,</span>      <span class="token string">"application/x-www-form-urlencoded"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>toStringObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  xmlHttp<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//请求完成，并不代表请求成功</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//判断请求是否成功</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xmlHttp<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span>        xmlHttp<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        option<span class="token punctuation">.</span><span class="token function">sucess</span><span class="token punctuation">(</span>xmlHttp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        option<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>xmlHttp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//判断外界是否传入超时时间</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>    timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//超时时间到后执行停止此次发送请求，默认为失败</span>      xmlHttp<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> option<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//把obj转为字符串</span><span class="token keyword">function</span> <span class="token function">objToString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//encodeURLComponent函数对，对象名和属性进行转换，以防出现url中不能出现的字符而出错</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用方式</span>    <span class="token function">createAjax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    data<span class="token punctuation">:</span><span class="token punctuation">{</span>                       name<span class="token punctuation">:</span> that<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    type<span class="token punctuation">:</span><span class="token string">"POST"</span><span class="token punctuation">,</span>                    timeout<span class="token punctuation">:</span><span class="token number">3000</span><span class="token punctuation">,</span>                    url<span class="token punctuation">:</span><span class="token string">"./ajaxLesson2.php"</span><span class="token punctuation">,</span>                    sucess<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">{</span>                         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    error<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>；</code></pre><h2 id="获取服务器响应数据方式"><a href="#获取服务器响应数据方式" class="headerlink" title="获取服务器响应数据方式"></a>获取服务器响应数据方式</h2><blockquote><ol><li>responseText 可以获取服务器以字符串形式返回的数据</li><li>responseXML 可以获取服务器以XML形式返回的数据</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//调用方式</span><span class="token comment" spellcheck="true">// ajax对象.要获取的方式</span>xmlHttp<span class="token punctuation">.</span>responseText</code></pre><h2 id="通过XML传输数据"><a href="#通过XML传输数据" class="headerlink" title="通过XML传输数据"></a>通过XML传输数据</h2><h4 id="XML数据基本格式"><a href="#XML数据基本格式" class="headerlink" title="XML数据基本格式"></a>XML数据基本格式</h4><p>​        1.开头前缀指定版本和编码（必要）</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span></code></pre><p>​        2.根目录（必要 和html标签一样要闭合）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><p>​        3.之后标签名不受限制，完整版</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nz</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>甜美女装<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>des</span><span class="token punctuation">></span></span>人见人爱,花间花开,甜美系列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>des</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span><span class="token punctuation">></span></span>images/1.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nz</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bb</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>奢华驴包<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>des</span><span class="token punctuation">></span></span>送女友,送情人,送学妹,一送一个准系列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>des</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span><span class="token punctuation">></span></span>images/2.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bb</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tx</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>键盘拖鞋<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>des</span><span class="token punctuation">></span></span>程序员专属拖鞋, 屌丝气息浓郁, 你值得拥有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>des</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span><span class="token punctuation">></span></span>images/3.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tx</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><h4 id="PHP基本XML配置格式"><a href="#PHP基本XML配置格式" class="headerlink" title="PHP基本XML配置格式"></a>PHP基本XML配置格式</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">//向客户端发送原始的 HTTP 报头。</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"content-type:text/xml;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//file_get_contents() 函数是用于将文件的内容读入到一个字符串中的首选方法。如果操作系统支持，还会使用    内存映射技术来增强性能。</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"xml文件地址如（./ajax.xml）"</span><span class="token punctuation">)</span>    <span class="token delimiter">?></span></code></pre><h4 id="Ajax获取XML数据格式"><a href="#Ajax获取XML数据格式" class="headerlink" title="Ajax获取XML数据格式"></a>Ajax获取XML数据格式</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//获取XML传输而来的数据要使用 responseXML方式获取</span><span class="token keyword">var</span> Data <span class="token operator">=</span> xml<span class="token punctuation">.</span>responseXML<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回的是一个document文档对象</span><span class="token comment" spellcheck="true">//接着使用javascript获取遍历DOM元素</span> <span class="token keyword">var</span> titleinfo <span class="token operator">=</span> Data<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">'>title'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> des <span class="token operator">=</span> Data<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">'>des'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> image <span class="token operator">=</span> Data<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">'>image'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后就可以对DOM里面存储的数据进行操作了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>des<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="通过JSON传输数据"><a href="#通过JSON传输数据" class="headerlink" title="通过JSON传输数据"></a>通过JSON传输数据</h2><blockquote><p><a href="https://baike.baidu.com/item/JSON/2462549?fr=aladdin" target="_blank" rel="noopener">JSON资料</a></p></blockquote><h4 id="JSON数据基本格式"><a href="#JSON数据基本格式" class="headerlink" title="JSON数据基本格式"></a>JSON数据基本格式</h4><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"nz"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"甜美女装"</span><span class="token punctuation">,</span>        <span class="token property">"des"</span><span class="token operator">:</span><span class="token string">"人见人爱,花间花开,甜美系列"</span><span class="token punctuation">,</span>        <span class="token property">"image"</span><span class="token operator">:</span><span class="token string">"./images/1.jpg"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"bb"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"奢华驴包"</span><span class="token punctuation">,</span>        <span class="token property">"des"</span><span class="token operator">:</span><span class="token string">"送女友,送情人,送学妹,一送一个准系列"</span><span class="token punctuation">,</span>        <span class="token property">"image"</span><span class="token operator">:</span><span class="token string">"./images/2.jpg"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"tx"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"键盘拖鞋"</span><span class="token punctuation">,</span>        <span class="token property">"des"</span><span class="token operator">:</span><span class="token string">"程序员专属拖鞋, 屌丝气息浓郁, 你值得拥有"</span><span class="token punctuation">,</span>        <span class="token property">"image"</span><span class="token operator">:</span><span class="token string">"./images/3.jpg"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>//在 JS 语言中，一切都是对象。因此，任何支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。但是对象和数组是比较特殊且常用的两种类型：//JSON 键/值对//JSON 键值对是用来保存 JS 对象的一种方式，和 JS 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 <span class="token string">""</span> 包裹，使用冒号 <span class="token operator">:</span> 分隔，然后紧接着值："<span class="token punctuation">{</span><span class="token property">"firstName"</span><span class="token operator">:</span> <span class="token string">"Json"</span><span class="token punctuation">}</span><span class="token string">"这很容易理解，等价于这条 JavaScript 语句：{firstName : "</span>Json"<span class="token punctuation">}</span>//JSON 与 JS 对象的关系//很多人搞不清楚 JSON 和 Js 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：//JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。//如<span class="token operator">:</span>var obj = <span class="token punctuation">{</span>a<span class="token operator">:</span> 'Hello'<span class="token punctuation">,</span> b<span class="token operator">:</span> 'World'<span class="token punctuation">}</span><span class="token punctuation">;</span> //这是一个对象，注意键名也是可以使用引号包裹的var json = '<span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token property">"b"</span><span class="token operator">:</span> <span class="token string">"World"</span><span class="token punctuation">}</span>'<span class="token punctuation">;</span> //这是一个 JSON 字符串，本质是一个字符串</code></pre><h4 id="JSON和JS对象互转"><a href="#JSON和JS对象互转" class="headerlink" title="JSON和JS对象互转"></a>JSON和JS对象互转</h4><pre class=" language-json"><code class="language-json">//要实现从JSON对象转换为JS字符串，使用 JSON.parse(<span class="token punctuation">)</span> 方法：var obj = JSON.parse('<span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token property">"b"</span><span class="token operator">:</span> <span class="token string">"World"</span><span class="token punctuation">}</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span> //结果是 <span class="token punctuation">{</span>a<span class="token operator">:</span> 'Hello'<span class="token punctuation">,</span> b<span class="token operator">:</span> 'World'<span class="token punctuation">}</span>//要实现从JS对象转换为JSON字符串，使用 JSON.stringify(<span class="token punctuation">)</span> 方法：var json = JSON.stringify(<span class="token punctuation">{</span>a<span class="token operator">:</span> 'Hello'<span class="token punctuation">,</span> b<span class="token operator">:</span> 'World'<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //结果是 '<span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token property">"b"</span><span class="token operator">:</span> <span class="token string">"World"</span><span class="token punctuation">}</span>'//当从服务器返回的数据不是标准json字符串时是无法使用parse的，那么可以试试用eval(<span class="token punctuation">)</span>强制转化和为js对象</code></pre><h4 id="非标准json转js对象"><a href="#非标准json转js对象" class="headerlink" title="非标准json转js对象"></a>非标准json转js对象</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//当从服务器返回的数据不是标准json字符串时是无法使用parse的，那么可以试试用eval()强制转化和为js对象</span><span class="token comment" spellcheck="true">//注意点： 转js对象必须加 "("+data+")"</span><span class="token keyword">var</span> Data <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token operator">+</span>data<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span></code></pre><h4 id="JSON兼容性问题"><a href="#JSON兼容性问题" class="headerlink" title="JSON兼容性问题"></a>JSON兼容性问题</h4><blockquote><p> 在低版本的IE中, 不可以使用原生的JSON.parse方法, 但是可以使用json2.js这个框架来兼容</p><p><a href="https://github.com/douglascrockford/JSON-js" target="_blank" rel="noopener">json2.js下载地址：</a></p></blockquote><h4 id="PHP基本JSON格式"><a href="#PHP基本JSON格式" class="headerlink" title="PHP基本JSON格式"></a>PHP基本JSON格式</h4><pre class=" language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">" JSON文件地址 如(./json.txt)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><blockquote><p>ajax的请求过程：ajax发送请求–浏览器–服务器</p><p>响应过程则是请求过程的颠倒</p><p>当ajax发送请求到浏览器，浏览器发送到服务器，处理并响应后，原路返回到浏览器，此时会验证其请求来源的域名跟发送请求时是否一样，是则过，否则会被浏览器截止并提示错误，这正是跨域所造成的，想要解决此问题，并不能从前端入手，应该从后端，只有在后端响应并返回后告诉浏览器是自己人即可。</p><p>那怎么告诉浏览器是自己人呢？ 只要设置其响应头部信息+（<strong>Access-Control-Allow-Origin</strong>：域名）告诉浏览器即可,允许多个、单个、全部 （*）。</p></blockquote><h3 id="PHP-方式"><a href="#PHP-方式" class="headerlink" title="PHP 方式"></a>PHP 方式</h3><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/*    1、允许单个域名访问*/</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin:(域名)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    2、允许多个域名访问*/</span>    <span class="token variable">$origin</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_ORIGIN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_ORIGIN'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$option</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token string">'域名1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">'域名2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$origin</span><span class="token punctuation">,</span><span class="token variable">$option</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin:$origin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    3、允许全部域名访问*/</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin:*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="node方式"><a href="#node方式" class="headerlink" title="node方式"></a>node方式</h3><pre><code>/*    1、允许单个域名访问*/    http.createServer(req,res)    {        res.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;（域名）&quot;);    }/*    2、允许多个域名访问*/        let option = [        (域名1),        (域名2),        ...    ];    http.createServer(req,res)    {      let {origin} =  req.headers;      let ori = option[&quot;origin&quot;] ? option[&quot;origin&quot;] ： null；      res.setHeader(&quot;Access-Control-Allow-Origin&quot;,ori);    }/*    3、允许全部域名访问*/    http.createServer(req,res)    {        res.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;*&quot;);    }</code></pre><h2 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h2><blockquote><p>FormData是ajax2.0新添加的功能，其作用是让表单也能异步发送</p></blockquote><h3 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//必须要new 一个FormData对象 参数是要应用的表单元素 </span><span class="token comment" spellcheck="true">//禁止表单默认行为</span><span class="token comment" spellcheck="true">//其请求方式、请求地址跟随表单元素</span><span class="token comment" spellcheck="true">//最后发送formdata对象即可</span><span class="token comment" spellcheck="true">//原生方式</span>         <span class="token keyword">let</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onsubmit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> formdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>method<span class="token punctuation">,</span>form<span class="token punctuation">.</span>action<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>formdata<span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span>          <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//jQuery方式 </span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"submit"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> formdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              url<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>action<span class="token punctuation">,</span>              type<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">,</span>              data<span class="token punctuation">:</span>formdata<span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//由于jq在发送请求时，会把请求数据自动处理为适合发送的数据格式，但是formdata对象本事就不用处理，系统识别会自动处理数据，如果被jq格式化后，数据就会出错，所以要关闭其数据格式化，以及发送的头部信息。</span>              processData<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>                  contentType<span class="token punctuation">:</span><span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果不使用表单提交，可以使用以下另门方式</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span> dir<span class="token operator">=</span><span class="token string">"ltr"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"div1"</span><span class="token operator">></span>      用户：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"user"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>      密码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> id<span class="token operator">=</span><span class="token string">"pass"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>      文件：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> id<span class="token operator">=</span><span class="token string">"f1"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>      <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"btn1"</span> type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"提交"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">let</span> oBtn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  oBtn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#pass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'f1'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#f1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token keyword">let</span> xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:8080/'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>formdata<span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><blockquote><p>fetch是官方用来解决原生js的ajax的繁杂步骤问题的一门新语法，大大简化了ajax操作，原理基于ajax</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// get txt</span> window<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> oBtn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      oBtn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.请求</span>        <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'data/1.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.解析</span>        <span class="token keyword">let</span> str<span class="token operator">=</span><span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//get json</span> window<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> oBtn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      oBtn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.请求</span>        <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'data/1.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.解析</span>        <span class="token keyword">let</span> json<span class="token operator">=</span><span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//get blod</span>window<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> oImg<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'img1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> oBtn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      oBtn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.请求</span>        <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'data/1.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.解析</span>        <span class="token keyword">let</span> data<span class="token operator">=</span><span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> url<span class="token operator">=</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        oImg<span class="token punctuation">.</span>src<span class="token operator">=</span>url<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Ajax </tag>
            
            <tag> CORS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webSocket</title>
      <link href="/posts/a65a.html"/>
      <url>/posts/a65a.html</url>
      
        <content type="html"><![CDATA[<h1 id="WebSocket介绍、使用"><a href="#WebSocket介绍、使用" class="headerlink" title="WebSocket介绍、使用"></a>WebSocket介绍、使用</h1><blockquote><p>webSocket是一种新的传输协议，HTML5新增的协议，相较于http协议，webSocket更像是一台对讲机，可以实现实时通信，双向传输，即服务器也可以主动发送请求到前端，打破了以往只能前端发送请求，然后服务器被动响应的传统方式</p></blockquote><h2 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h2><h3 id="socket-io"><a href="#socket-io" class="headerlink" title="socket.io"></a>socket.io</h3><blockquote><p>socket.io是一个node.js平台上的webSocket封装框架，使用难度比较容易</p><p>在使用前必须先安装： </p><p>npm|cnpm  i  socket.io -D </p></blockquote><p>语法格式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*socket.emit('name', 数据)  发送socket.on(name，(data)=>{})    接收发送的名字是什么接收的名字就是什么，参数的个数也一样*/</span><span class="token comment" spellcheck="true">//后端</span><span class="token keyword">const</span> http <span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> io <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"socket.io"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> wsServer <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>wsServer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connection"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//前端</span><span class="token comment" spellcheck="true">//注意：必须在服务器里面成功导入此模块并且成功服务器开启后，方可引入soket.io.js</span><span class="token comment" spellcheck="true">//本地安装位置：node_modules/socket.io-client\dist\soket.io.js</span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://localhost:8080/socket.io/socket.io.js"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">let</span> socket <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8080/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Back </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> webSocket </tag>
            
            <tag> socket.io </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie</title>
      <link href="/posts/295f.html"/>
      <url>/posts/295f.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是cookie"><a href="#什么是cookie" class="headerlink" title="什么是cookie"></a>什么是cookie</h1><blockquote><p>cookie:会话跟踪技术 <u><strong>客户端</strong></u></p><p>session：会话跟踪技术 <u><strong>服务端</strong></u></p></blockquote><p><strong>在网页中怎么查看cookie里面的数据情况？</strong></p><p><strong>1.可以在编辑器中输入document.cookie,然后打印或输出即可</strong></p><p><strong>2.Chrome浏览器中F12打开，开发者工具 —— Application面板中查找cookie即可</strong></p><h2 id="cookie作用："><a href="#cookie作用：" class="headerlink" title="cookie作用："></a>cookie作用：</h2><blockquote><p><u><strong>将网页中的数据保存到浏览器中</strong></u></p></blockquote><h2 id="cookie生命周期："><a href="#cookie生命周期：" class="headerlink" title="cookie生命周期："></a>cookie生命周期：</h2><blockquote><p>默认情况下cookie生命周期是一次会话（<u><strong>浏览器被关闭</strong></u>）</p><p>可以通过<u><strong>expires</strong></u>来设置cookie的生命周期</p></blockquote><ol><li><strong>如果通过<u>expires=</u>设置了过期时间, 并且过期时间没有过期, 那么下次打开浏览器还是存在</strong></li><li><strong><u>如果通过expires=设置了过期时间, 并且过期时间没有过期, 那么下次打开浏览器还是存在</u></strong></li></ol><p>以下代码块示例怎么修改cookie的过期时间并设置到当天的时间</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>date<span class="token punctuation">.</span>setDate（curTime<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>） <span class="token comment" spellcheck="true">//这里可以加一就是明天，也可以减一就是昨天也就看不到此数据，两者只能选其一</span>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">"name=xuyuxin;expires="</span><span class="token operator">+</span>date<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="cookie其他注意点："><a href="#cookie其他注意点：" class="headerlink" title="cookie其他注意点："></a>cookie其他注意点：</h2><ol><li>cookie<strong>默认不会保存任何数据</strong></li><li>cookie<strong>不能一次性保存多条数据</strong></li><li>cookie<u>保存数据有大小和个数限制</u>： <u><strong>个数限制：20~60</strong></u>  ，  <strong><u>总大小不能超过4KB左右</u></strong></li></ol><h2 id="cookie作用范围："><a href="#cookie作用范围：" class="headerlink" title="cookie作用范围："></a>cookie作用范围：</h2><ol><li>同一个浏览器同一个路径下访问</li><li>如果在同一个浏览器中，默认情况下，下一级路径也能访问</li><li>如果在同一个浏览器中，想让上一级目录也能访问到保存的cookie数据，那么需要添加一个<strong><u>path</u></strong>属性即可（如下）</li></ol><pre class=" language-cookie"><code class="language-cookie">document.cookie = "name=xuyuxin;path=/;"           例如:            保存到了www.it666.com/jQuery/Ajax/路径下,            我们想在 www.it666.com/jQuery/Ajax/13-weibo/,            和 www.it666.com/jQuery/ 路径下也能访问            例如:            我们在www.it666.com下面保存了一个cookie,            那么我们在edu.it666.com中是无法访问的            如果想在edu.it666.com中也能访问, 那么我们需要再添加一个domain属性才可以;            document.cookie = "name=zs;path=/;domain=it666.com;";            */</code></pre><h2 id="cookie封装"><a href="#cookie封装" class="headerlink" title="cookie封装"></a>cookie封装</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {*} option.key  * @param {*} option.value  * @param {*} option.path  * @param {*} option.domain  * @param {*} option.beOverDueTime  * @method 添加一条cookie数据 */</span><span class="token keyword">function</span> <span class="token function">addCookie</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//路径</span>  <span class="token keyword">var</span> index <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    curPath <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>  option<span class="token punctuation">.</span>path <span class="token operator">=</span> option<span class="token punctuation">.</span>path <span class="token operator">||</span> curPath<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//域名作用域</span>    option<span class="token punctuation">.</span>domain <span class="token operator">=</span> option<span class="token punctuation">.</span>domain <span class="token operator">||</span> document<span class="token punctuation">.</span>domain<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//过期时间</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>option<span class="token punctuation">.</span>beOverDueTime<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//没传则直接创建cookie</span>        document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> option<span class="token punctuation">.</span>key<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>option<span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">";path="</span><span class="token operator">+</span>option<span class="token punctuation">.</span>path<span class="token operator">+</span><span class="token string">";domain="</span><span class="token operator">+</span>option<span class="token punctuation">.</span>domain<span class="token operator">+</span><span class="token string">";"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建cookie</span>        <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        date<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>option<span class="token punctuation">.</span>beOverDueTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> option<span class="token punctuation">.</span>key<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>option<span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">";path="</span><span class="token operator">+</span>option<span class="token punctuation">.</span>path<span class="token operator">+</span><span class="token string">";domain="</span><span class="token operator">+</span>option<span class="token punctuation">.</span>domain<span class="token operator">+</span><span class="token string">";expires="</span><span class="token operator">+</span>date<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @param {*} key  * @method 获取指定的cookie数据 */</span><span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @param {*} key  * @param {*} path  * @method 删除指定的cookie数据，注意点：默认只能删除默认路径的cookie数据，想删除别的路径的cookie，必须在调用函数前传入指定的路径即可删除 */</span><span class="token keyword">function</span> <span class="token function">delCookie</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">addCookie</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        key<span class="token punctuation">:</span>key<span class="token punctuation">,</span>        value<span class="token punctuation">:</span><span class="token function">getCookie</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>        path<span class="token punctuation">:</span>path<span class="token punctuation">,</span>        beOverDueTime<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h1 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h1><blockquote><p><strong>hash能实现和cookie一样的功能，各有各的好处，hash使用起来被cookie方便许多</strong></p></blockquote><h2 id="添加一条hash数据"><a href="#添加一条hash数据" class="headerlink" title="添加一条hash数据"></a>添加一条hash数据</h2><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> 要添加的数据；</code></pre><h2 id="获取hash数据"><a href="#获取hash数据" class="headerlink" title="获取hash数据"></a>获取hash数据</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//在js中没有专门获取hash数据的函数，因此只能自寻方法这里用substring()函数截取</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//从索引为1的字符串开始截取</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web Storage </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Cookie </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
